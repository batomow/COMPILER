lf

lf

lf

var v_id : int = int(23) lf

var v_id : double = double(3.000000) lf

var v_id : float = float(5.320000) lf

var v_id : float = float(5.320000) lf

var v_id : string = string("string") lf

var v_id : char = char('c') lf

var v_id : bool = bool(truth) lf

lf

lf

arr v_id : int [ int(12) ] lf

arr v_id : char [ int(6) ] = [ char('a') , char('b') , char('c') , char('d') , char('e') , char('f') ] lf

v_id [ int(9) ] = string("algo") lf

v_id [ int(0) ] = int(5) lf

var v_id : float = v_id [ int(0) ] lf

lf

mat v_id : int [ int(4) ] [ int(12) ] lf

mat v_id : int [ int(3) ] [ int(3) ] = [ lf


	[ int(1) , int(2) , int(3) ] , lf


	[ int(4) , int(5) , int(6) ] , lf


	[ int(7) , int(8) , int(9) ] lf


] lf

v_id [ int(0) ] [ int(2) ] = string("algo") lf

var v_id : string = v_id [ int(1) ] [ int(1) ] lf

lf

vector v_id = { int(10) , int(5) } lf

v_id . v_id = int(5) lf

v_id . v_id = int(5) lf

lf

element v_id = v_id ( { int(200) , int(300) } , int(50) , int(4) , bool(lie) ) lf

lf

v_id ( v_id . v_id , int(10) , { int(23) , int(1) } ) lf

lf

v_id . v_id = int(150) lf

v_id . v_id = int(250) lf

v_id . v_id = v_id . v_id lf

lf

lf

var v_id : int = int(5) * int(2) + 
cube[op: 4, dum:0, dum:0] int(1) / int(2) / 
cube[op: 3, dum:0, dum:0] float(1.000000) - 
cube[op: 3, dum:0, dum:1] 
cube[op: 0, dum:0, dum:1] int(5) lf

cube[op: 1, dum:1, dum:0] 
lf

lf

order v_id : double ( var v_id : int , var v_id : double ) { lf

	return v_id + v_id lf

cube[op: 0, dum:0, dum:7] 
ERROR: ERROR: error de tipos

} lf

lf

order v_id : int ( var v_id : char , var v_id : int ) { lf

	var v_id : float lf

		vector v_id lf

	vector v_id lf

	IF ( v_id > v_id ) 
cube[op: 14, dum:1, dum:7] { lf

		v_id = v_id + v_id lf

cube[op: 0, dum:0, dum:1] 
	} ELIF ( v_id ) { lf

		IF ( v_id ( v_id , v_id ) == bool(lie) ) 
cube[op: 19, dum:1, dum:6] 
ERROR: ERROR: error de tipos
{ lf

			medit lf

		} lf

	} ELSE { lf

		return bool(truth) lf

	} lf

		var v_id : int lf

	var v_id : int lf

	FOR [ int(0) , int(1) , v_id ] -> v_id { lf

		IF ( v_id ( v_id , v_id ) == bool(lie) ) 
cube[op: 19, dum:1, dum:6] 
ERROR: ERROR: error de tipos
{ lf

			medit lf

		} lf

	} lf

	var v_id : int lf

	FOR v_id -> v_id { lf

		medit lf

	} lf

lf

	WHILE ( v_id > int(5) ) 
cube[op: 14, dum:0, dum:0] { lf

		v_id ( v_id ) lf

		v_id = v_id - int(1) lf

cube[op: 1, dum:0, dum:0] 
	} lf

lf

	return bool(lie) lf

} lf

lf

COMPILATION SUCCESSFUL!
3
