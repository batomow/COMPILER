Terminals unused in grammar

   F_ID
   M_ID


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty
    4       | assign crlf script
    5       | expr crlf script
    6       | function crlf script
    7       | generaldec crlf script
    8       | crlf script

    9 crlf: CR LF
   10     | LF

   11 optlf: %empty
   12      | crlf

   13 $@1: %empty

   14 $@2: %empty

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

   16 funparams: generaldec morefunparams
   17          | %empty

   18 morefunparams: SYM_COMMA generaldec morefunparams
   19              | %empty

   20 funbody: stmt crlf funbody
   21        | generaldec crlf funbody
   22        | %empty

   23 generaldec: vardec
   24           | arrdec
   25           | matdec
   26           | vectordec
   27           | elementdec

   28 $@3: %empty

   29 generaldec: vardec MTH_SEQUA $@3 expr

   30 $@4: %empty

   31 generaldec: arrdec MTH_SEQUA $@4 arr

   32 $@5: %empty

   33 generaldec: matdec MTH_SEQUA $@5 mat

   34 $@6: %empty

   35 generaldec: vectordec MTH_SEQUA $@6 vector

   36 $@7: %empty

   37 generaldec: elementdec MTH_SEQUA $@7 funcall

   38 stmt: assign
   39     | expr
   40     | logicstruct
   41     | RES_MEDIT
   42     | ret

   43 funcall: V_ID SYM_OPARE funcallHelper SYM_CPARE

   44 funcallHelper: %empty
   45              | expr funcallHelper2
   46              | vector funcallHelper2

   47 funcallHelper2: %empty
   48               | SYM_COMMA funcallHelper

   49 ret: RES_RETRN expr

   50 vardec: V_VAR V_ID SYM_COLON vartypes

   51 basictypes: V_CHAR
   52           | V_STRING
   53           | V_FLOAT
   54           | V_DOUBLE
   55           | V_INT
   56           | V_BOOL

   57 vartypes: T_INT
   58         | T_FLOAT
   59         | T_DOUBLE
   60         | T_CHAR
   61         | T_STRING
   62         | T_BOOL

   63 var_or_cte: V_ID
   64           | basictypes

   65 $@8: %empty

   66 $@9: %empty

   67 assign: V_ID $@8 MTH_SEQUA $@9 expr

   68 $@10: %empty

   69 assign: structaccess MTH_SEQUA $@10 expr

   70 $@11: %empty

   71 assign: property MTH_SEQUA $@11 expr

   72 $@12: %empty

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@12 structIndex

   74 structIndex: %empty
   75            | SYM_OBRAC expr SYM_CBRAC

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   77 arr: SYM_OBRAC arrHelper SYM_CBRAC

   78 $@13: %empty

   79 arrHelper: expr SYM_COMMA $@13 arrHelper
   80          | expr

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   82 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   83 matHelper: arr SYM_COMMA optlf matHelper
   84          | arr optlf

   85 elementdec: V_ELEM V_ID

   86 vectordec: V_VECTOR V_ID

   87 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL

   88 property: V_ID SYM_DOT V_ID

   89 $@14: %empty

   90 $@15: %empty

   91 expr: logicoperation $@14 MTH_OR $@15 expr
   92     | logicoperation

   93 $@16: %empty

   94 $@17: %empty

   95 logicoperation: logicfactor $@16 MTH_AND $@17 logicoperation
   96               | logicfactor

   97 $@18: %empty

   98 logicfactor: MTH_NOT $@18 comparison
   99            | comparison

  100 $@19: %empty

  101 comparison: operation comp_operator $@19 operation
  102           | operation

  103 $@20: %empty

  104 $@21: %empty

  105 operation: factor $@20 MTH_PLUS $@21 operation

  106 $@22: %empty

  107 $@23: %empty

  108 operation: factor $@22 MTH_MINUS $@23 operation
  109          | factor

  110 $@24: %empty

  111 $@25: %empty

  112 factor: hvalue $@24 MTH_ASTRK $@25 factor

  113 $@26: %empty

  114 $@27: %empty

  115 factor: hvalue $@26 MTH_DIVIS $@27 factor
  116       | hvalue

  117 $@28: %empty

  118 $@29: %empty

  119 hvalue: value $@28 MTH_POWER $@29 hvalue

  120 $@30: %empty

  121 $@31: %empty

  122 hvalue: value $@30 MTH_ROOT $@31 hvalue
  123       | value

  124 value: var_or_cte
  125      | funcall
  126      | structaccess
  127      | property

  128 $@32: %empty

  129 value: SYM_OPARE $@32 expr SYM_CPARE

  130 comp_operator: MTH_GT
  131              | MTH_GTEQ
  132              | MTH_LT
  133              | MTH_LTEQ
  134              | MTH_DEQUA
  135              | MTH_NOTEQ

  136 logicstruct: if
  137            | for
  138            | while

  139 $@33: %empty

  140 if: LOG_IF $@33 ifHelper ifHelper3

  141 $@34: %empty

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  143 ifHelper2: %empty

  144 $@35: %empty

  145 ifHelper2: LOG_ELIF $@35 ifHelper

  146 ifHelper3: %empty

  147 $@36: %empty

  148 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  149 $@37: %empty

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  151 forHelper: V_ID
  152          | stepfor

  153 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  154 $@38: %empty

  155 $@39: %empty

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  157 newlineCicle: newline
  158             | newline newlineCicle

  159 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 73 75 76 77 81 82 153
SYM_CBRAC (259) 73 75 76 77 81 82 153
SYM_OPARE (260) 15 43 129 142 156
SYM_CPARE (261) 15 43 129 142 156
SYM_OCURL (262) 15 87 142 148 150 156
SYM_CCURL (263) 15 87 142 148 150 156
SYM_COMMA (264) 18 48 79 83 87 153
SYM_ARROW (265) 150
SYM_COLON (266) 15 50 76 81
SYM_DOT (267) 88
MTH_SEQUA (268) 29 31 33 35 37 67 69 71
MTH_DEQUA (269) 134
MTH_GT (270) 130
MTH_LT (271) 132
MTH_GTEQ (272) 131
MTH_LTEQ (273) 133
MTH_NOT (274) 98
MTH_NOTEQ (275) 135
MTH_PLUS (276) 105
MTH_MINUS (277) 108
MTH_ASTRK (278) 112
MTH_DIVIS (279) 115
MTH_POWER (280) 119
MTH_ROOT (281) 122
MTH_AND (282) 95
MTH_OR (283) 91
LF (284) 9 10
CR (285) 9
V_ID (286) 15 43 50 63 67 73 76 81 85 86 88 150 151
F_ID (287)
M_ID (288)
LOG_IF (289) 140
LOG_ELIF (290) 145
LOG_ELSE (291) 148
LOG_FOR (292) 150
LOG_WHILE (293) 156
V_VAR (294) 50
V_CHAR (295) 51
V_STRING (296) 52
V_FLOAT (297) 53
V_INT (298) 55 76 81
V_DOUBLE (299) 54
V_BOOL (300) 56
V_ARR (301) 76
V_MAT (302) 81
V_VECTOR (303) 86
V_ELEM (304) 85
T_BOOL (305) 62
T_INT (306) 57
T_FLOAT (307) 58
T_DOUBLE (308) 59
T_CHAR (309) 60
T_STRING (310) 61
RES_ORDER (311) 15
RES_MEDIT (312) 41
RES_RETRN (313) 49


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
prog (60)
    on left: 1 2, on right: 0
script (61)
    on left: 3 4 5 6 7 8, on right: 1 4 5 6 7 8
crlf (62)
    on left: 9 10, on right: 4 5 6 7 8 12 15 20 21 142 148 150 156
    159
optlf (63)
    on left: 11 12, on right: 15 82 83 84 142 148 150 156
function (64)
    on left: 15, on right: 6
$@1 (65)
    on left: 13, on right: 15
$@2 (66)
    on left: 14, on right: 15
funparams (67)
    on left: 16 17, on right: 15
morefunparams (68)
    on left: 18 19, on right: 16 18
funbody (69)
    on left: 20 21 22, on right: 15 20 21
generaldec (70)
    on left: 23 24 25 26 27 29 31 33 35 37, on right: 7 16 18 21
$@3 (71)
    on left: 28, on right: 29
$@4 (72)
    on left: 30, on right: 31
$@5 (73)
    on left: 32, on right: 33
$@6 (74)
    on left: 34, on right: 35
$@7 (75)
    on left: 36, on right: 37
stmt (76)
    on left: 38 39 40 41 42, on right: 20 159
funcall (77)
    on left: 43, on right: 37 125
funcallHelper (78)
    on left: 44 45 46, on right: 43 48
funcallHelper2 (79)
    on left: 47 48, on right: 45 46
ret (80)
    on left: 49, on right: 42
vardec (81)
    on left: 50, on right: 23 29
basictypes (82)
    on left: 51 52 53 54 55 56, on right: 64
vartypes (83)
    on left: 57 58 59 60 61 62, on right: 15 50 76 81
var_or_cte (84)
    on left: 63 64, on right: 124
assign (85)
    on left: 67 69 71, on right: 4 38
$@8 (86)
    on left: 65, on right: 67
$@9 (87)
    on left: 66, on right: 67
$@10 (88)
    on left: 68, on right: 69
$@11 (89)
    on left: 70, on right: 71
structaccess (90)
    on left: 73, on right: 69 126
$@12 (91)
    on left: 72, on right: 73
structIndex (92)
    on left: 74 75, on right: 73
arrdec (93)
    on left: 76, on right: 24 31
arr (94)
    on left: 77, on right: 31 83 84
arrHelper (95)
    on left: 79 80, on right: 77 79
$@13 (96)
    on left: 78, on right: 79
matdec (97)
    on left: 81, on right: 25 33
mat (98)
    on left: 82, on right: 33
matHelper (99)
    on left: 83 84, on right: 82 83
elementdec (100)
    on left: 85, on right: 27 37
vectordec (101)
    on left: 86, on right: 26 35
vector (102)
    on left: 87, on right: 35 46
property (103)
    on left: 88, on right: 71 127
expr (104)
    on left: 91 92, on right: 5 29 39 45 49 67 69 71 73 75 79 80 87
    91 129 142 153 156
$@14 (105)
    on left: 89, on right: 91
$@15 (106)
    on left: 90, on right: 91
logicoperation (107)
    on left: 95 96, on right: 91 92 95
$@16 (108)
    on left: 93, on right: 95
$@17 (109)
    on left: 94, on right: 95
logicfactor (110)
    on left: 98 99, on right: 95 96
$@18 (111)
    on left: 97, on right: 98
comparison (112)
    on left: 101 102, on right: 98 99
$@19 (113)
    on left: 100, on right: 101
operation (114)
    on left: 105 108 109, on right: 101 102 105 108
$@20 (115)
    on left: 103, on right: 105
$@21 (116)
    on left: 104, on right: 105
$@22 (117)
    on left: 106, on right: 108
$@23 (118)
    on left: 107, on right: 108
factor (119)
    on left: 112 115 116, on right: 105 108 109 112 115
$@24 (120)
    on left: 110, on right: 112
$@25 (121)
    on left: 111, on right: 112
$@26 (122)
    on left: 113, on right: 115
$@27 (123)
    on left: 114, on right: 115
hvalue (124)
    on left: 119 122 123, on right: 112 115 116 119 122
$@28 (125)
    on left: 117, on right: 119
$@29 (126)
    on left: 118, on right: 119
$@30 (127)
    on left: 120, on right: 122
$@31 (128)
    on left: 121, on right: 122
value (129)
    on left: 124 125 126 127 129, on right: 119 122 123
$@32 (130)
    on left: 128, on right: 129
comp_operator (131)
    on left: 130 131 132 133 134 135, on right: 101
logicstruct (132)
    on left: 136 137 138, on right: 40
if (133)
    on left: 140, on right: 136
$@33 (134)
    on left: 139, on right: 140
ifHelper (135)
    on left: 142, on right: 140 145
$@34 (136)
    on left: 141, on right: 142
ifHelper2 (137)
    on left: 143 145, on right: 142
$@35 (138)
    on left: 144, on right: 145
ifHelper3 (139)
    on left: 146 148, on right: 140
$@36 (140)
    on left: 147, on right: 148
for (141)
    on left: 150, on right: 137
$@37 (142)
    on left: 149, on right: 150
forHelper (143)
    on left: 151 152, on right: 150
stepfor (144)
    on left: 153, on right: 152
while (145)
    on left: 156, on right: 138
$@38 (146)
    on left: 154, on right: 156
$@39 (147)
    on left: 155, on right: 156
newlineCicle (148)
    on left: 157 158, on right: 142 148 150 156 158
newline (149)
    on left: 159, on right: 157 158


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $end  reduce using rule 3 (script)

    prog            go to state 19
    script          go to state 20
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

  129 value: SYM_OPARE . $@32 expr SYM_CPARE

    $default  reduce using rule 128 ($@32)

    $@32  go to state 43


State 3

   98 logicfactor: MTH_NOT . $@18 comparison

    $default  reduce using rule 97 ($@18)

    $@18  go to state 44


State 4

   10 crlf: LF .

    $default  reduce using rule 10 (crlf)


State 5

    9 crlf: CR . LF

    LF  shift, and go to state 45


State 6

   43 funcall: V_ID . SYM_OPARE funcallHelper SYM_CPARE
   63 var_or_cte: V_ID .
   67 assign: V_ID . $@8 MTH_SEQUA $@9 expr
   73 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@12 structIndex
   88 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 46
    SYM_OPARE  shift, and go to state 47
    SYM_DOT    shift, and go to state 48

    MTH_SEQUA  reduce using rule 65 ($@8)
    $default   reduce using rule 63 (var_or_cte)

    $@8  go to state 49


State 7

   50 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 50


State 8

   51 basictypes: V_CHAR .

    $default  reduce using rule 51 (basictypes)


State 9

   52 basictypes: V_STRING .

    $default  reduce using rule 52 (basictypes)


State 10

   53 basictypes: V_FLOAT .

    $default  reduce using rule 53 (basictypes)


State 11

   55 basictypes: V_INT .

    $default  reduce using rule 55 (basictypes)


State 12

   54 basictypes: V_DOUBLE .

    $default  reduce using rule 54 (basictypes)


State 13

   56 basictypes: V_BOOL .

    $default  reduce using rule 56 (basictypes)


State 14

   76 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 51


State 15

   81 matdec: V_MAT . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 52


State 16

   86 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 53


State 17

   85 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 54


State 18

   15 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 55


State 19

    0 $accept: prog . $end

    $end  shift, and go to state 56


State 20

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 21

    8 script: crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 57
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 22

    6 script: function . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 58


State 23

    7 script: generaldec . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 59


State 24

  125 value: funcall .

    $default  reduce using rule 125 (value)


State 25

   23 generaldec: vardec .
   29           | vardec . MTH_SEQUA $@3 expr

    MTH_SEQUA  shift, and go to state 60

    $default  reduce using rule 23 (generaldec)


State 26

   64 var_or_cte: basictypes .

    $default  reduce using rule 64 (var_or_cte)


State 27

  124 value: var_or_cte .

    $default  reduce using rule 124 (value)


State 28

    4 script: assign . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 61


State 29

   69 assign: structaccess . MTH_SEQUA $@10 expr
  126 value: structaccess .

    MTH_SEQUA  shift, and go to state 62

    $default  reduce using rule 126 (value)


State 30

   24 generaldec: arrdec .
   31           | arrdec . MTH_SEQUA $@4 arr

    MTH_SEQUA  shift, and go to state 63

    $default  reduce using rule 24 (generaldec)


State 31

   25 generaldec: matdec .
   33           | matdec . MTH_SEQUA $@5 mat

    MTH_SEQUA  shift, and go to state 64

    $default  reduce using rule 25 (generaldec)


State 32

   27 generaldec: elementdec .
   37           | elementdec . MTH_SEQUA $@7 funcall

    MTH_SEQUA  shift, and go to state 65

    $default  reduce using rule 27 (generaldec)


State 33

   26 generaldec: vectordec .
   35           | vectordec . MTH_SEQUA $@6 vector

    MTH_SEQUA  shift, and go to state 66

    $default  reduce using rule 26 (generaldec)


State 34

   71 assign: property . MTH_SEQUA $@11 expr
  127 value: property .

    MTH_SEQUA  shift, and go to state 67

    $default  reduce using rule 127 (value)


State 35

    5 script: expr . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 68


State 36

   91 expr: logicoperation . $@14 MTH_OR $@15 expr
   92     | logicoperation .

    MTH_OR    reduce using rule 89 ($@14)
    $default  reduce using rule 92 (expr)

    $@14  go to state 69


State 37

   95 logicoperation: logicfactor . $@16 MTH_AND $@17 logicoperation
   96               | logicfactor .

    MTH_AND   reduce using rule 93 ($@16)
    $default  reduce using rule 96 (logicoperation)

    $@16  go to state 70


State 38

   99 logicfactor: comparison .

    $default  reduce using rule 99 (logicfactor)


State 39

  101 comparison: operation . comp_operator $@19 operation
  102           | operation .

    MTH_DEQUA  shift, and go to state 71
    MTH_GT     shift, and go to state 72
    MTH_LT     shift, and go to state 73
    MTH_GTEQ   shift, and go to state 74
    MTH_LTEQ   shift, and go to state 75
    MTH_NOTEQ  shift, and go to state 76

    $default  reduce using rule 102 (comparison)

    comp_operator  go to state 77


State 40

  105 operation: factor . $@20 MTH_PLUS $@21 operation
  108          | factor . $@22 MTH_MINUS $@23 operation
  109          | factor .

    MTH_PLUS   reduce using rule 103 ($@20)
    MTH_MINUS  reduce using rule 106 ($@22)
    $default   reduce using rule 109 (operation)

    $@20  go to state 78
    $@22  go to state 79


State 41

  112 factor: hvalue . $@24 MTH_ASTRK $@25 factor
  115       | hvalue . $@26 MTH_DIVIS $@27 factor
  116       | hvalue .

    MTH_ASTRK  reduce using rule 110 ($@24)
    MTH_DIVIS  reduce using rule 113 ($@26)
    $default   reduce using rule 116 (factor)

    $@24  go to state 80
    $@26  go to state 81


State 42

  119 hvalue: value . $@28 MTH_POWER $@29 hvalue
  122       | value . $@30 MTH_ROOT $@31 hvalue
  123       | value .

    MTH_POWER  reduce using rule 117 ($@28)
    MTH_ROOT   reduce using rule 120 ($@30)
    $default   reduce using rule 123 (hvalue)

    $@28  go to state 82
    $@30  go to state 83


State 43

  129 value: SYM_OPARE $@32 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 87
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 44

   98 logicfactor: MTH_NOT $@18 . comparison

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    comparison    go to state 88
    operation     go to state 39
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 45

    9 crlf: CR LF .

    $default  reduce using rule 9 (crlf)


State 46

   73 structaccess: V_ID SYM_OBRAC . expr SYM_CBRAC $@12 structIndex

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 89
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 47

   43 funcall: V_ID SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 90
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    $default  reduce using rule 44 (funcallHelper)

    funcall         go to state 24
    funcallHelper   go to state 91
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    vector          go to state 92
    property        go to state 86
    expr            go to state 93
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 48

   88 property: V_ID SYM_DOT . V_ID

    V_ID  shift, and go to state 94


State 49

   67 assign: V_ID $@8 . MTH_SEQUA $@9 expr

    MTH_SEQUA  shift, and go to state 95


State 50

   50 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 96


State 51

   76 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 97


State 52

   81 matdec: V_MAT V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 98


State 53

   86 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 86 (vectordec)


State 54

   85 elementdec: V_ELEM V_ID .

    $default  reduce using rule 85 (elementdec)


State 55

   15 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 99


State 56

    0 $accept: prog $end .

    $default  accept


State 57

    8 script: crlf script .

    $default  reduce using rule 8 (script)


State 58

    6 script: function crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 100
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 59

    7 script: generaldec crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 101
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 60

   29 generaldec: vardec MTH_SEQUA . $@3 expr

    $default  reduce using rule 28 ($@3)

    $@3  go to state 102


State 61

    4 script: assign crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 103
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 62

   69 assign: structaccess MTH_SEQUA . $@10 expr

    $default  reduce using rule 68 ($@10)

    $@10  go to state 104


State 63

   31 generaldec: arrdec MTH_SEQUA . $@4 arr

    $default  reduce using rule 30 ($@4)

    $@4  go to state 105


State 64

   33 generaldec: matdec MTH_SEQUA . $@5 mat

    $default  reduce using rule 32 ($@5)

    $@5  go to state 106


State 65

   37 generaldec: elementdec MTH_SEQUA . $@7 funcall

    $default  reduce using rule 36 ($@7)

    $@7  go to state 107


State 66

   35 generaldec: vectordec MTH_SEQUA . $@6 vector

    $default  reduce using rule 34 ($@6)

    $@6  go to state 108


State 67

   71 assign: property MTH_SEQUA . $@11 expr

    $default  reduce using rule 70 ($@11)

    $@11  go to state 109


State 68

    5 script: expr crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 110
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 69

   91 expr: logicoperation $@14 . MTH_OR $@15 expr

    MTH_OR  shift, and go to state 111


State 70

   95 logicoperation: logicfactor $@16 . MTH_AND $@17 logicoperation

    MTH_AND  shift, and go to state 112


State 71

  134 comp_operator: MTH_DEQUA .

    $default  reduce using rule 134 (comp_operator)


State 72

  130 comp_operator: MTH_GT .

    $default  reduce using rule 130 (comp_operator)


State 73

  132 comp_operator: MTH_LT .

    $default  reduce using rule 132 (comp_operator)


State 74

  131 comp_operator: MTH_GTEQ .

    $default  reduce using rule 131 (comp_operator)


State 75

  133 comp_operator: MTH_LTEQ .

    $default  reduce using rule 133 (comp_operator)


State 76

  135 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 135 (comp_operator)


State 77

  101 comparison: operation comp_operator . $@19 operation

    $default  reduce using rule 100 ($@19)

    $@19  go to state 113


State 78

  105 operation: factor $@20 . MTH_PLUS $@21 operation

    MTH_PLUS  shift, and go to state 114


State 79

  108 operation: factor $@22 . MTH_MINUS $@23 operation

    MTH_MINUS  shift, and go to state 115


State 80

  112 factor: hvalue $@24 . MTH_ASTRK $@25 factor

    MTH_ASTRK  shift, and go to state 116


State 81

  115 factor: hvalue $@26 . MTH_DIVIS $@27 factor

    MTH_DIVIS  shift, and go to state 117


State 82

  119 hvalue: value $@28 . MTH_POWER $@29 hvalue

    MTH_POWER  shift, and go to state 118


State 83

  122 hvalue: value $@30 . MTH_ROOT $@31 hvalue

    MTH_ROOT  shift, and go to state 119


State 84

   43 funcall: V_ID . SYM_OPARE funcallHelper SYM_CPARE
   63 var_or_cte: V_ID .
   73 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@12 structIndex
   88 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 46
    SYM_OPARE  shift, and go to state 47
    SYM_DOT    shift, and go to state 48

    $default  reduce using rule 63 (var_or_cte)


State 85

  126 value: structaccess .

    $default  reduce using rule 126 (value)


State 86

  127 value: property .

    $default  reduce using rule 127 (value)


State 87

  129 value: SYM_OPARE $@32 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 120


State 88

   98 logicfactor: MTH_NOT $@18 comparison .

    $default  reduce using rule 98 (logicfactor)


State 89

   73 structaccess: V_ID SYM_OBRAC expr . SYM_CBRAC $@12 structIndex

    SYM_CBRAC  shift, and go to state 121


State 90

   87 vector: SYM_OCURL . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 122
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 91

   43 funcall: V_ID SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 123


State 92

   46 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 124

    $default  reduce using rule 47 (funcallHelper2)

    funcallHelper2  go to state 125


State 93

   45 funcallHelper: expr . funcallHelper2

    SYM_COMMA  shift, and go to state 124

    $default  reduce using rule 47 (funcallHelper2)

    funcallHelper2  go to state 126


State 94

   88 property: V_ID SYM_DOT V_ID .

    $default  reduce using rule 88 (property)


State 95

   67 assign: V_ID $@8 MTH_SEQUA . $@9 expr

    $default  reduce using rule 66 ($@9)

    $@9  go to state 127


State 96

   50 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 134


State 97

   76 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 135


State 98

   81 matdec: V_MAT V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 136


State 99

   15 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 137


State 100

    6 script: function crlf script .

    $default  reduce using rule 6 (script)


State 101

    7 script: generaldec crlf script .

    $default  reduce using rule 7 (script)


State 102

   29 generaldec: vardec MTH_SEQUA $@3 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 138
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 103

    4 script: assign crlf script .

    $default  reduce using rule 4 (script)


State 104

   69 assign: structaccess MTH_SEQUA $@10 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 139
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 105

   31 generaldec: arrdec MTH_SEQUA $@4 . arr

    SYM_OBRAC  shift, and go to state 140

    arr  go to state 141


State 106

   33 generaldec: matdec MTH_SEQUA $@5 . mat

    SYM_OBRAC  shift, and go to state 142

    mat  go to state 143


State 107

   37 generaldec: elementdec MTH_SEQUA $@7 . funcall

    V_ID  shift, and go to state 144

    funcall  go to state 145


State 108

   35 generaldec: vectordec MTH_SEQUA $@6 . vector

    SYM_OCURL  shift, and go to state 90

    vector  go to state 146


State 109

   71 assign: property MTH_SEQUA $@11 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 147
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 110

    5 script: expr crlf script .

    $default  reduce using rule 5 (script)


State 111

   91 expr: logicoperation $@14 MTH_OR . $@15 expr

    $default  reduce using rule 90 ($@15)

    $@15  go to state 148


State 112

   95 logicoperation: logicfactor $@16 MTH_AND . $@17 logicoperation

    $default  reduce using rule 94 ($@17)

    $@17  go to state 149


State 113

  101 comparison: operation comp_operator $@19 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 150
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 114

  105 operation: factor $@20 MTH_PLUS . $@21 operation

    $default  reduce using rule 104 ($@21)

    $@21  go to state 151


State 115

  108 operation: factor $@22 MTH_MINUS . $@23 operation

    $default  reduce using rule 107 ($@23)

    $@23  go to state 152


State 116

  112 factor: hvalue $@24 MTH_ASTRK . $@25 factor

    $default  reduce using rule 111 ($@25)

    $@25  go to state 153


State 117

  115 factor: hvalue $@26 MTH_DIVIS . $@27 factor

    $default  reduce using rule 114 ($@27)

    $@27  go to state 154


State 118

  119 hvalue: value $@28 MTH_POWER . $@29 hvalue

    $default  reduce using rule 118 ($@29)

    $@29  go to state 155


State 119

  122 hvalue: value $@30 MTH_ROOT . $@31 hvalue

    $default  reduce using rule 121 ($@31)

    $@31  go to state 156


State 120

  129 value: SYM_OPARE $@32 expr SYM_CPARE .

    $default  reduce using rule 129 (value)


State 121

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC . $@12 structIndex

    $default  reduce using rule 72 ($@12)

    $@12  go to state 157


State 122

   87 vector: SYM_OCURL expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 158


State 123

   43 funcall: V_ID SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 43 (funcall)


State 124

   48 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 90
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    $default  reduce using rule 44 (funcallHelper)

    funcall         go to state 24
    funcallHelper   go to state 159
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    vector          go to state 92
    property        go to state 86
    expr            go to state 93
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 125

   46 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 46 (funcallHelper)


State 126

   45 funcallHelper: expr funcallHelper2 .

    $default  reduce using rule 45 (funcallHelper)


State 127

   67 assign: V_ID $@8 MTH_SEQUA $@9 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 160
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 128

   62 vartypes: T_BOOL .

    $default  reduce using rule 62 (vartypes)


State 129

   57 vartypes: T_INT .

    $default  reduce using rule 57 (vartypes)


State 130

   58 vartypes: T_FLOAT .

    $default  reduce using rule 58 (vartypes)


State 131

   59 vartypes: T_DOUBLE .

    $default  reduce using rule 59 (vartypes)


State 132

   60 vartypes: T_CHAR .

    $default  reduce using rule 60 (vartypes)


State 133

   61 vartypes: T_STRING .

    $default  reduce using rule 61 (vartypes)


State 134

   50 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 50 (vardec)


State 135

   76 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 161


State 136

   81 matdec: V_MAT V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 162


State 137

   15 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 163


State 138

   29 generaldec: vardec MTH_SEQUA $@3 expr .

    $default  reduce using rule 29 (generaldec)


State 139

   69 assign: structaccess MTH_SEQUA $@10 expr .

    $default  reduce using rule 69 (assign)


State 140

   77 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    arrHelper       go to state 164
    property        go to state 86
    expr            go to state 165
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 141

   31 generaldec: arrdec MTH_SEQUA $@4 arr .

    $default  reduce using rule 31 (generaldec)


State 142

   82 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 167


State 143

   33 generaldec: matdec MTH_SEQUA $@5 mat .

    $default  reduce using rule 33 (generaldec)


State 144

   43 funcall: V_ID . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 47


State 145

   37 generaldec: elementdec MTH_SEQUA $@7 funcall .

    $default  reduce using rule 37 (generaldec)


State 146

   35 generaldec: vectordec MTH_SEQUA $@6 vector .

    $default  reduce using rule 35 (generaldec)


State 147

   71 assign: property MTH_SEQUA $@11 expr .

    $default  reduce using rule 71 (assign)


State 148

   91 expr: logicoperation $@14 MTH_OR $@15 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 168
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 149

   95 logicoperation: logicfactor $@16 MTH_AND $@17 . logicoperation

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    logicoperation  go to state 169
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 150

  101 comparison: operation comp_operator $@19 operation .

    $default  reduce using rule 101 (comparison)


State 151

  105 operation: factor $@20 MTH_PLUS $@21 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 170
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 152

  108 operation: factor $@22 MTH_MINUS $@23 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 171
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 153

  112 factor: hvalue $@24 MTH_ASTRK $@25 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 172
    hvalue        go to state 41
    value         go to state 42


State 154

  115 factor: hvalue $@26 MTH_DIVIS $@27 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 173
    hvalue        go to state 41
    value         go to state 42


State 155

  119 hvalue: value $@28 MTH_POWER $@29 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 174
    value         go to state 42


State 156

  122 hvalue: value $@30 MTH_ROOT $@31 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 175
    value         go to state 42


State 157

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@12 . structIndex

    SYM_OBRAC  shift, and go to state 176

    $default  reduce using rule 74 (structIndex)

    structIndex  go to state 177


State 158

   87 vector: SYM_OCURL expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 178
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 159

   48 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 48 (funcallHelper2)


State 160

   67 assign: V_ID $@8 MTH_SEQUA $@9 expr .

    $default  reduce using rule 67 (assign)


State 161

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 179


State 162

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 180


State 163

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 13 ($@1)

    $@1  go to state 181


State 164

   77 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 182


State 165

   79 arrHelper: expr . SYM_COMMA $@13 arrHelper
   80          | expr .

    SYM_COMMA  shift, and go to state 183

    $default  reduce using rule 80 (arrHelper)


State 166

   12 optlf: crlf .

    $default  reduce using rule 12 (optlf)


State 167

   82 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 140

    arr        go to state 184
    matHelper  go to state 185


State 168

   91 expr: logicoperation $@14 MTH_OR $@15 expr .

    $default  reduce using rule 91 (expr)


State 169

   95 logicoperation: logicfactor $@16 MTH_AND $@17 logicoperation .

    $default  reduce using rule 95 (logicoperation)


State 170

  105 operation: factor $@20 MTH_PLUS $@21 operation .

    $default  reduce using rule 105 (operation)


State 171

  108 operation: factor $@22 MTH_MINUS $@23 operation .

    $default  reduce using rule 108 (operation)


State 172

  112 factor: hvalue $@24 MTH_ASTRK $@25 factor .

    $default  reduce using rule 112 (factor)


State 173

  115 factor: hvalue $@26 MTH_DIVIS $@27 factor .

    $default  reduce using rule 115 (factor)


State 174

  119 hvalue: value $@28 MTH_POWER $@29 hvalue .

    $default  reduce using rule 119 (hvalue)


State 175

  122 hvalue: value $@30 MTH_ROOT $@31 hvalue .

    $default  reduce using rule 122 (hvalue)


State 176

   75 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 186
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 177

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@12 structIndex .

    $default  reduce using rule 73 (structaccess)


State 178

   87 vector: SYM_OCURL expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 187


State 179

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 188


State 180

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 189


State 181

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 . funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 14
    V_MAT     shift, and go to state 15
    V_VECTOR  shift, and go to state 16
    V_ELEM    shift, and go to state 17

    $default  reduce using rule 17 (funparams)

    funparams   go to state 190
    generaldec  go to state 191
    vardec      go to state 25
    arrdec      go to state 30
    matdec      go to state 31
    elementdec  go to state 32
    vectordec   go to state 33


State 182

   77 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 77 (arr)


State 183

   79 arrHelper: expr SYM_COMMA . $@13 arrHelper

    $default  reduce using rule 78 ($@13)

    $@13  go to state 192


State 184

   83 matHelper: arr . SYM_COMMA optlf matHelper
   84          | arr . optlf

    SYM_COMMA  shift, and go to state 193
    LF         shift, and go to state 4
    CR         shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 194


State 185

   82 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 195


State 186

   75 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 196


State 187

   87 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 87 (vector)


State 188

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 76 (arrdec)


State 189

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 197


State 190

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams . SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 198


State 191

   16 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 199

    $default  reduce using rule 19 (morefunparams)

    morefunparams  go to state 200


State 192

   79 arrHelper: expr SYM_COMMA $@13 . arrHelper

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    arrHelper       go to state 201
    property        go to state 86
    expr            go to state 165
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 193

   83 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 202


State 194

   84 matHelper: arr optlf .

    $default  reduce using rule 84 (matHelper)


State 195

   82 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 82 (mat)


State 196

   75 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 75 (structIndex)


State 197

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 203


State 198

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE . $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 14 ($@2)

    $@2  go to state 204


State 199

   18 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 14
    V_MAT     shift, and go to state 15
    V_VECTOR  shift, and go to state 16
    V_ELEM    shift, and go to state 17

    generaldec  go to state 205
    vardec      go to state 25
    arrdec      go to state 30
    matdec      go to state 31
    elementdec  go to state 32
    vectordec   go to state 33


State 200

   16 funparams: generaldec morefunparams .

    $default  reduce using rule 16 (funparams)


State 201

   79 arrHelper: expr SYM_COMMA $@13 arrHelper .

    $default  reduce using rule 79 (arrHelper)


State 202

   83 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 140

    arr        go to state 184
    matHelper  go to state 206


State 203

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 207


State 204

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 208


State 205

   18 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 199

    $default  reduce using rule 19 (morefunparams)

    morefunparams  go to state 209


State 206

   83 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 83 (matHelper)


State 207

   81 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 81 (matdec)


State 208

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 210


State 209

   18 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 18 (morefunparams)


State 210

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 211


State 211

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 22 (funbody)

    funbody         go to state 217
    generaldec      go to state 218
    stmt            go to state 219
    funcall         go to state 24
    ret             go to state 220
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226


State 212

  140 if: LOG_IF . $@33 ifHelper ifHelper3

    $default  reduce using rule 139 ($@33)

    $@33  go to state 227


State 213

  150 for: LOG_FOR . forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 228
    V_ID       shift, and go to state 229

    forHelper  go to state 230
    stepfor    go to state 231


State 214

  156 while: LOG_WHILE . $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 154 ($@38)

    $@38  go to state 232


State 215

   41 stmt: RES_MEDIT .

    $default  reduce using rule 41 (stmt)


State 216

   49 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 233
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 217

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 234


State 218

   21 funbody: generaldec . crlf funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 235


State 219

   20 funbody: stmt . crlf funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 236


State 220

   42 stmt: ret .

    $default  reduce using rule 42 (stmt)


State 221

   38 stmt: assign .

    $default  reduce using rule 38 (stmt)


State 222

   39 stmt: expr .

    $default  reduce using rule 39 (stmt)


State 223

   40 stmt: logicstruct .

    $default  reduce using rule 40 (stmt)


State 224

  136 logicstruct: if .

    $default  reduce using rule 136 (logicstruct)


State 225

  137 logicstruct: for .

    $default  reduce using rule 137 (logicstruct)


State 226

  138 logicstruct: while .

    $default  reduce using rule 138 (logicstruct)


State 227

  140 if: LOG_IF $@33 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 237

    ifHelper  go to state 238


State 228

  153 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 239
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 229

  151 forHelper: V_ID .

    $default  reduce using rule 151 (forHelper)


State 230

  150 for: LOG_FOR forHelper . SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 240


State 231

  152 forHelper: stepfor .

    $default  reduce using rule 152 (forHelper)


State 232

  156 while: LOG_WHILE $@38 . SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 241


State 233

   49 ret: RES_RETRN expr .

    $default  reduce using rule 49 (ret)


State 234

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 15 (function)


State 235

   21 funbody: generaldec crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 22 (funbody)

    funbody         go to state 242
    generaldec      go to state 218
    stmt            go to state 219
    funcall         go to state 24
    ret             go to state 220
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226


State 236

   20 funbody: stmt crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 22 (funbody)

    funbody         go to state 243
    generaldec      go to state 218
    stmt            go to state 219
    funcall         go to state 24
    ret             go to state 220
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226


State 237

  142 ifHelper: SYM_OPARE . expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 244
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 238

  140 if: LOG_IF $@33 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 245

    $default  reduce using rule 146 (ifHelper3)

    ifHelper3  go to state 246


State 239

  153 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 247


State 240

  150 for: LOG_FOR forHelper SYM_ARROW . V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 248


State 241

  156 while: LOG_WHILE $@38 SYM_OPARE . expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 249
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 242

   21 funbody: generaldec crlf funbody .

    $default  reduce using rule 21 (funbody)


State 243

   20 funbody: stmt crlf funbody .

    $default  reduce using rule 20 (funbody)


State 244

  142 ifHelper: SYM_OPARE expr . SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 250


State 245

  148 ifHelper3: LOG_ELSE . $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 147 ($@36)

    $@36  go to state 251


State 246

  140 if: LOG_IF $@33 ifHelper ifHelper3 .

    $default  reduce using rule 140 (if)


State 247

  153 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 252
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 248

  150 for: LOG_FOR forHelper SYM_ARROW V_ID . $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 149 ($@37)

    $@37  go to state 253


State 249

  156 while: LOG_WHILE $@38 SYM_OPARE expr . SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 254


State 250

  142 ifHelper: SYM_OPARE expr SYM_CPARE . $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 141 ($@34)

    $@34  go to state 255


State 251

  148 ifHelper3: LOG_ELSE $@36 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 256


State 252

  153 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 257


State 253

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 258


State 254

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE . $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 155 ($@39)

    $@39  go to state 259


State 255

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 260


State 256

  148 ifHelper3: LOG_ELSE $@36 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 261


State 257

  153 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 262
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 258

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 263


State 259

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 264


State 260

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 265


State 261

  148 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 266


State 262

  153 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 267


State 263

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 268


State 264

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 269


State 265

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 270


State 266

  148 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 271
    funcall         go to state 24
    ret             go to state 220
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226
    newlineCicle    go to state 272
    newline         go to state 273


State 267

  153 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 153 (stepfor)


State 268

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 271
    funcall         go to state 24
    ret             go to state 220
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226
    newlineCicle    go to state 274
    newline         go to state 273


State 269

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 275


State 270

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 271
    funcall         go to state 24
    ret             go to state 220
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226
    newlineCicle    go to state 276
    newline         go to state 273


State 271

  159 newline: stmt . crlf

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 277


State 272

  148 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 278


State 273

  157 newlineCicle: newline .
  158             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 157 (newlineCicle)

    stmt            go to state 271
    funcall         go to state 24
    ret             go to state 220
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226
    newlineCicle    go to state 279
    newline         go to state 273


State 274

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 280


State 275

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 271
    funcall         go to state 24
    ret             go to state 220
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 221
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 222
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 223
    if              go to state 224
    for             go to state 225
    while           go to state 226
    newlineCicle    go to state 281
    newline         go to state 273


State 276

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 282


State 277

  159 newline: stmt crlf .

    $default  reduce using rule 159 (newline)


State 278

  148 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 148 (ifHelper3)


State 279

  158 newlineCicle: newline newlineCicle .

    $default  reduce using rule 158 (newlineCicle)


State 280

  150 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 150 (for)


State 281

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 283


State 282

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 284

    $default  reduce using rule 143 (ifHelper2)

    ifHelper2  go to state 285


State 283

  156 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 156 (while)


State 284

  145 ifHelper2: LOG_ELIF . $@35 ifHelper

    $default  reduce using rule 144 ($@35)

    $@35  go to state 286


State 285

  142 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 142 (ifHelper)


State 286

  145 ifHelper2: LOG_ELIF $@35 . ifHelper

    SYM_OPARE  shift, and go to state 237

    ifHelper  go to state 287


State 287

  145 ifHelper2: LOG_ELIF $@35 ifHelper .

    $default  reduce using rule 145 (ifHelper2)
