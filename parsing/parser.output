Terminals unused in grammar

   F_ID
   M_ID
   T_FLOAT


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty

    4 $@1: %empty

    5 script: function crlf $@1 script

    6 $@2: %empty

    7 script: vardec crlf $@2 script
    8       | crlf script

    9 crlf: CR LF
   10     | LF

   11 optlf: %empty
   12      | crlf

   13 $@3: %empty

   14 $@4: %empty

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

   16 funparams: %empty
   17          | generaldec morefunparams

   18 morefunparams: %empty
   19              | SYM_COMMA generaldec morefunparams

   20 funbody: %empty

   21 $@5: %empty

   22 funbody: stmt crlf $@5 funbody

   23 $@6: %empty

   24 funbody: generaldec crlf $@6 funbody
   25        | crlf funbody

   26 generaldec: vardec
   27           | arrdec
   28           | matdec
   29           | vectordec
   30           | elementdec

   31 $@7: %empty

   32 generaldec: vardec $@7 MTH_SEQUA expr
   33           | arrdec MTH_SEQUA arr
   34           | matdec MTH_SEQUA mat
   35           | vectordec MTH_SEQUA vector
   36           | elementdec MTH_SEQUA funcall

   37 stmt: assign
   38     | expr
   39     | logicstruct
   40     | RES_MEDIT
   41     | ret

   42 $@8: %empty

   43 funcall: V_ID $@8 SYM_OPARE funcallHelper SYM_CPARE

   44 funcallHelper: %empty

   45 $@9: %empty

   46 funcallHelper: expr $@9 funcallHelper2
   47              | vector funcallHelper2

   48 funcallHelper2: %empty
   49               | SYM_COMMA funcallHelper

   50 ret: RES_RETRN expr

   51 vardec: V_VAR V_ID SYM_COLON vartypes

   52 basictypes: V_CHAR
   53           | V_STRING
   54           | V_DOUBLE
   55           | V_INT
   56           | V_BOOL

   57 vartypes: T_INT
   58         | T_DOUBLE
   59         | T_CHAR
   60         | T_STRING
   61         | T_BOOL

   62 var_or_cte: V_ID
   63           | basictypes

   64 $@10: %empty

   65 assign: V_ID $@10 MTH_SEQUA expr
   66       | structaccess MTH_SEQUA expr
   67       | property MTH_SEQUA expr

   68 $@11: %empty

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@11 structIndex

   70 structIndex: %empty
   71            | SYM_OBRAC expr SYM_CBRAC

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   73 arr: SYM_OBRAC arrHelper SYM_CBRAC

   74 $@12: %empty

   75 arrHelper: expr SYM_COMMA $@12 arrHelper
   76          | expr

   77 $@13: %empty

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   79 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   80 matHelper: arr SYM_COMMA optlf matHelper
   81          | arr optlf

   82 elementdec: V_ELEM V_ID

   83 vectordec: V_VECTOR V_ID

   84 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL

   85 $@14: %empty

   86 property: V_ID $@14 SYM_DOT V_ID

   87 $@15: %empty

   88 $@16: %empty

   89 expr: logicoperation $@15 MTH_OR $@16 expr
   90     | logicoperation

   91 $@17: %empty

   92 $@18: %empty

   93 logicoperation: logicfactor $@17 MTH_AND $@18 logicoperation
   94               | logicfactor

   95 $@19: %empty

   96 logicfactor: MTH_NOT $@19 comparison
   97            | comparison

   98 $@20: %empty

   99 comparison: operation comp_operator $@20 operation
  100           | operation

  101 $@21: %empty

  102 $@22: %empty

  103 operation: factor $@21 MTH_PLUS $@22 operation

  104 $@23: %empty

  105 $@24: %empty

  106 operation: factor $@23 MTH_MINUS $@24 operation
  107          | factor

  108 $@25: %empty

  109 $@26: %empty

  110 factor: hvalue $@25 MTH_ASTRK $@26 factor

  111 $@27: %empty

  112 $@28: %empty

  113 factor: hvalue $@27 MTH_DIVIS $@28 factor
  114       | hvalue

  115 $@29: %empty

  116 $@30: %empty

  117 hvalue: value $@29 MTH_POWER $@30 hvalue

  118 $@31: %empty

  119 $@32: %empty

  120 hvalue: value $@31 MTH_ROOT $@32 hvalue
  121       | value

  122 value: var_or_cte
  123      | funcall
  124      | structaccess
  125      | property

  126 $@33: %empty

  127 value: SYM_OPARE $@33 expr SYM_CPARE

  128 comp_operator: MTH_GT
  129              | MTH_GTEQ
  130              | MTH_LT
  131              | MTH_LTEQ
  132              | MTH_DEQUA
  133              | MTH_NOTEQ

  134 logicstruct: if
  135            | for
  136            | while

  137 $@34: %empty

  138 if: LOG_IF $@34 ifHelper ifHelper3

  139 $@35: %empty

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  141 ifHelper2: %empty

  142 $@36: %empty

  143 ifHelper2: LOG_ELIF $@36 ifHelper

  144 ifHelper3: %empty

  145 $@37: %empty

  146 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  147 $@38: %empty

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  149 forHelper: V_ID
  150          | stepfor

  151 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  152 $@39: %empty

  153 $@40: %empty

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  155 newlineCicle: newline
  156             | newline newlineCicle

  157 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 69 71 72 73 78 79 151
SYM_CBRAC (259) 69 71 72 73 78 79 151
SYM_OPARE (260) 15 43 127 140 154
SYM_CPARE (261) 15 43 127 140 154
SYM_OCURL (262) 15 84 140 146 148 154
SYM_CCURL (263) 15 84 140 146 148 154
SYM_COMMA (264) 19 49 75 80 84 151
SYM_ARROW (265) 148
SYM_COLON (266) 15 51 72 78
SYM_DOT (267) 86
MTH_SEQUA (268) 32 33 34 35 36 65 66 67
MTH_DEQUA (269) 132
MTH_GT (270) 128
MTH_LT (271) 130
MTH_GTEQ (272) 129
MTH_LTEQ (273) 131
MTH_NOT (274) 96
MTH_NOTEQ (275) 133
MTH_PLUS (276) 103
MTH_MINUS (277) 106
MTH_ASTRK (278) 110
MTH_DIVIS (279) 113
MTH_POWER (280) 117
MTH_ROOT (281) 120
MTH_AND (282) 93
MTH_OR (283) 89
LF (284) 9 10
CR (285) 9
V_ID (286) 15 43 51 62 65 69 72 78 82 83 86 148 149
F_ID (287)
M_ID (288)
LOG_IF (289) 138
LOG_ELIF (290) 143
LOG_ELSE (291) 146
LOG_FOR (292) 148
LOG_WHILE (293) 154
V_VAR (294) 51
V_CHAR (295) 52
V_STRING (296) 53
V_INT (297) 55 72 78
V_DOUBLE (298) 54
V_BOOL (299) 56
V_ARR (300) 72
V_MAT (301) 78
V_VECTOR (302) 83
V_ELEM (303) 82
T_BOOL (304) 61
T_INT (305) 57
T_FLOAT (306)
T_DOUBLE (307) 58
T_CHAR (308) 59
T_STRING (309) 60
RES_ORDER (310) 15
RES_MEDIT (311) 40
RES_RETRN (312) 50


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
prog (59)
    on left: 1 2, on right: 0
script (60)
    on left: 3 5 7 8, on right: 1 5 7 8
$@1 (61)
    on left: 4, on right: 5
$@2 (62)
    on left: 6, on right: 7
crlf (63)
    on left: 9 10, on right: 5 7 8 12 15 22 24 25 140 146 148 154 157
optlf (64)
    on left: 11 12, on right: 15 79 80 81 140 146 148 154
function (65)
    on left: 15, on right: 5
$@3 (66)
    on left: 13, on right: 15
$@4 (67)
    on left: 14, on right: 15
funparams (68)
    on left: 16 17, on right: 15
morefunparams (69)
    on left: 18 19, on right: 17 19
funbody (70)
    on left: 20 22 24 25, on right: 15 22 24 25
$@5 (71)
    on left: 21, on right: 22
$@6 (72)
    on left: 23, on right: 24
generaldec (73)
    on left: 26 27 28 29 30 32 33 34 35 36, on right: 17 19 24
$@7 (74)
    on left: 31, on right: 32
stmt (75)
    on left: 37 38 39 40 41, on right: 22 157
funcall (76)
    on left: 43, on right: 36 123
$@8 (77)
    on left: 42, on right: 43
funcallHelper (78)
    on left: 44 46 47, on right: 43 49
$@9 (79)
    on left: 45, on right: 46
funcallHelper2 (80)
    on left: 48 49, on right: 46 47
ret (81)
    on left: 50, on right: 41
vardec (82)
    on left: 51, on right: 7 26 32
basictypes (83)
    on left: 52 53 54 55 56, on right: 63
vartypes (84)
    on left: 57 58 59 60 61, on right: 15 51 72 78
var_or_cte (85)
    on left: 62 63, on right: 122
assign (86)
    on left: 65 66 67, on right: 37
$@10 (87)
    on left: 64, on right: 65
structaccess (88)
    on left: 69, on right: 66 124
$@11 (89)
    on left: 68, on right: 69
structIndex (90)
    on left: 70 71, on right: 69
arrdec (91)
    on left: 72, on right: 27 33
arr (92)
    on left: 73, on right: 33 80 81
arrHelper (93)
    on left: 75 76, on right: 73 75
$@12 (94)
    on left: 74, on right: 75
matdec (95)
    on left: 78, on right: 28 34
$@13 (96)
    on left: 77, on right: 78
mat (97)
    on left: 79, on right: 34
matHelper (98)
    on left: 80 81, on right: 79 80
elementdec (99)
    on left: 82, on right: 30 36
vectordec (100)
    on left: 83, on right: 29 35
vector (101)
    on left: 84, on right: 35 47
property (102)
    on left: 86, on right: 67 125
$@14 (103)
    on left: 85, on right: 86
expr (104)
    on left: 89 90, on right: 32 38 46 50 65 66 67 69 71 75 76 84 89
    127 140 151 154
$@15 (105)
    on left: 87, on right: 89
$@16 (106)
    on left: 88, on right: 89
logicoperation (107)
    on left: 93 94, on right: 89 90 93
$@17 (108)
    on left: 91, on right: 93
$@18 (109)
    on left: 92, on right: 93
logicfactor (110)
    on left: 96 97, on right: 93 94
$@19 (111)
    on left: 95, on right: 96
comparison (112)
    on left: 99 100, on right: 96 97
$@20 (113)
    on left: 98, on right: 99
operation (114)
    on left: 103 106 107, on right: 99 100 103 106
$@21 (115)
    on left: 101, on right: 103
$@22 (116)
    on left: 102, on right: 103
$@23 (117)
    on left: 104, on right: 106
$@24 (118)
    on left: 105, on right: 106
factor (119)
    on left: 110 113 114, on right: 103 106 107 110 113
$@25 (120)
    on left: 108, on right: 110
$@26 (121)
    on left: 109, on right: 110
$@27 (122)
    on left: 111, on right: 113
$@28 (123)
    on left: 112, on right: 113
hvalue (124)
    on left: 117 120 121, on right: 110 113 114 117 120
$@29 (125)
    on left: 115, on right: 117
$@30 (126)
    on left: 116, on right: 117
$@31 (127)
    on left: 118, on right: 120
$@32 (128)
    on left: 119, on right: 120
value (129)
    on left: 122 123 124 125 127, on right: 117 120 121
$@33 (130)
    on left: 126, on right: 127
comp_operator (131)
    on left: 128 129 130 131 132 133, on right: 99
logicstruct (132)
    on left: 134 135 136, on right: 39
if (133)
    on left: 138, on right: 134
$@34 (134)
    on left: 137, on right: 138
ifHelper (135)
    on left: 140, on right: 138 143
$@35 (136)
    on left: 139, on right: 140
ifHelper2 (137)
    on left: 141 143, on right: 140
$@36 (138)
    on left: 142, on right: 143
ifHelper3 (139)
    on left: 144 146, on right: 138
$@37 (140)
    on left: 145, on right: 146
for (141)
    on left: 148, on right: 135
$@38 (142)
    on left: 147, on right: 148
forHelper (143)
    on left: 149 150, on right: 148
stepfor (144)
    on left: 151, on right: 150
while (145)
    on left: 154, on right: 136
$@39 (146)
    on left: 152, on right: 154
$@40 (147)
    on left: 153, on right: 154
newlineCicle (148)
    on left: 155 156, on right: 140 146 148 154 156
newline (149)
    on left: 157, on right: 155 156


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $end  reduce using rule 3 (script)

    prog      go to state 6
    script    go to state 7
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

   10 crlf: LF .

    $default  reduce using rule 10 (crlf)


State 3

    9 crlf: CR . LF

    LF  shift, and go to state 11


State 4

   51 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 12


State 5

   15 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 13


State 6

    0 $accept: prog . $end

    $end  shift, and go to state 14


State 7

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 8

    8 script: crlf . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $default  reduce using rule 3 (script)

    script    go to state 15
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 9

    5 script: function . crlf $@1 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 16


State 10

    7 script: vardec . crlf $@2 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 17


State 11

    9 crlf: CR LF .

    $default  reduce using rule 9 (crlf)


State 12

   51 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 18


State 13

   15 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 19


State 14

    0 $accept: prog $end .

    $default  accept


State 15

    8 script: crlf script .

    $default  reduce using rule 8 (script)


State 16

    5 script: function crlf . $@1 script

    $default  reduce using rule 4 ($@1)

    $@1  go to state 20


State 17

    7 script: vardec crlf . $@2 script

    $default  reduce using rule 6 ($@2)

    $@2  go to state 21


State 18

   51 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 27


State 19

   15 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 28


State 20

    5 script: function crlf $@1 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $default  reduce using rule 3 (script)

    script    go to state 29
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 21

    7 script: vardec crlf $@2 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $default  reduce using rule 3 (script)

    script    go to state 30
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 22

   61 vartypes: T_BOOL .

    $default  reduce using rule 61 (vartypes)


State 23

   57 vartypes: T_INT .

    $default  reduce using rule 57 (vartypes)


State 24

   58 vartypes: T_DOUBLE .

    $default  reduce using rule 58 (vartypes)


State 25

   59 vartypes: T_CHAR .

    $default  reduce using rule 59 (vartypes)


State 26

   60 vartypes: T_STRING .

    $default  reduce using rule 60 (vartypes)


State 27

   51 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 51 (vardec)


State 28

   15 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 31


State 29

    5 script: function crlf $@1 script .

    $default  reduce using rule 5 (script)


State 30

    7 script: vardec crlf $@2 script .

    $default  reduce using rule 7 (script)


State 31

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 13 ($@3)

    $@3  go to state 32


State 32

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 . funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 33
    V_MAT     shift, and go to state 34
    V_VECTOR  shift, and go to state 35
    V_ELEM    shift, and go to state 36

    $default  reduce using rule 16 (funparams)

    funparams   go to state 37
    generaldec  go to state 38
    vardec      go to state 39
    arrdec      go to state 40
    matdec      go to state 41
    elementdec  go to state 42
    vectordec   go to state 43


State 33

   72 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 44


State 34

   78 matdec: V_MAT . V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 45


State 35

   83 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 46


State 36

   82 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 47


State 37

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams . SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 48


State 38

   17 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 49

    $default  reduce using rule 18 (morefunparams)

    morefunparams  go to state 50


State 39

   26 generaldec: vardec .
   32           | vardec . $@7 MTH_SEQUA expr

    MTH_SEQUA  reduce using rule 31 ($@7)
    $default   reduce using rule 26 (generaldec)

    $@7  go to state 51


State 40

   27 generaldec: arrdec .
   33           | arrdec . MTH_SEQUA arr

    MTH_SEQUA  shift, and go to state 52

    $default  reduce using rule 27 (generaldec)


State 41

   28 generaldec: matdec .
   34           | matdec . MTH_SEQUA mat

    MTH_SEQUA  shift, and go to state 53

    $default  reduce using rule 28 (generaldec)


State 42

   30 generaldec: elementdec .
   36           | elementdec . MTH_SEQUA funcall

    MTH_SEQUA  shift, and go to state 54

    $default  reduce using rule 30 (generaldec)


State 43

   29 generaldec: vectordec .
   35           | vectordec . MTH_SEQUA vector

    MTH_SEQUA  shift, and go to state 55

    $default  reduce using rule 29 (generaldec)


State 44

   72 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 56


State 45

   78 matdec: V_MAT V_ID . $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    $default  reduce using rule 77 ($@13)

    $@13  go to state 57


State 46

   83 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 83 (vectordec)


State 47

   82 elementdec: V_ELEM V_ID .

    $default  reduce using rule 82 (elementdec)


State 48

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE . $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 14 ($@4)

    $@4  go to state 58


State 49

   19 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 33
    V_MAT     shift, and go to state 34
    V_VECTOR  shift, and go to state 35
    V_ELEM    shift, and go to state 36

    generaldec  go to state 59
    vardec      go to state 39
    arrdec      go to state 40
    matdec      go to state 41
    elementdec  go to state 42
    vectordec   go to state 43


State 50

   17 funparams: generaldec morefunparams .

    $default  reduce using rule 17 (funparams)


State 51

   32 generaldec: vardec $@7 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 60


State 52

   33 generaldec: arrdec MTH_SEQUA . arr

    SYM_OBRAC  shift, and go to state 61

    arr  go to state 62


State 53

   34 generaldec: matdec MTH_SEQUA . mat

    SYM_OBRAC  shift, and go to state 63

    mat  go to state 64


State 54

   36 generaldec: elementdec MTH_SEQUA . funcall

    V_ID  shift, and go to state 65

    funcall  go to state 66


State 55

   35 generaldec: vectordec MTH_SEQUA . vector

    SYM_OCURL  shift, and go to state 67

    vector  go to state 68


State 56

   72 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 69


State 57

   78 matdec: V_MAT V_ID $@13 . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 70


State 58

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 72


State 59

   19 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 49

    $default  reduce using rule 18 (morefunparams)

    morefunparams  go to state 73


State 60

   32 generaldec: vardec $@7 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 87
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 61

   73 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    arrHelper       go to state 95
    property        go to state 86
    expr            go to state 96
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 62

   33 generaldec: arrdec MTH_SEQUA arr .

    $default  reduce using rule 33 (generaldec)


State 63

   79 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 97


State 64

   34 generaldec: matdec MTH_SEQUA mat .

    $default  reduce using rule 34 (generaldec)


State 65

   43 funcall: V_ID . $@8 SYM_OPARE funcallHelper SYM_CPARE

    $default  reduce using rule 42 ($@8)

    $@8  go to state 98


State 66

   36 generaldec: elementdec MTH_SEQUA funcall .

    $default  reduce using rule 36 (generaldec)


State 67

   84 vector: SYM_OCURL . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 99
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 68

   35 generaldec: vectordec MTH_SEQUA vector .

    $default  reduce using rule 35 (generaldec)


State 69

   72 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 100


State 70

   78 matdec: V_MAT V_ID $@13 SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 101


State 71

   12 optlf: crlf .

    $default  reduce using rule 12 (optlf)


State 72

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 102


State 73

   19 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 19 (morefunparams)


State 74

  127 value: SYM_OPARE . $@33 expr SYM_CPARE

    $default  reduce using rule 126 ($@33)

    $@33  go to state 103


State 75

   96 logicfactor: MTH_NOT . $@19 comparison

    $default  reduce using rule 95 ($@19)

    $@19  go to state 104


State 76

   43 funcall: V_ID . $@8 SYM_OPARE funcallHelper SYM_CPARE
   62 var_or_cte: V_ID .
   69 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@11 structIndex
   86 property: V_ID . $@14 SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 105

    SYM_OPARE  reduce using rule 42 ($@8)
    SYM_DOT    reduce using rule 85 ($@14)
    $default   reduce using rule 62 (var_or_cte)

    $@8   go to state 98
    $@14  go to state 106


State 77

   52 basictypes: V_CHAR .

    $default  reduce using rule 52 (basictypes)


State 78

   53 basictypes: V_STRING .

    $default  reduce using rule 53 (basictypes)


State 79

   55 basictypes: V_INT .

    $default  reduce using rule 55 (basictypes)


State 80

   54 basictypes: V_DOUBLE .

    $default  reduce using rule 54 (basictypes)


State 81

   56 basictypes: V_BOOL .

    $default  reduce using rule 56 (basictypes)


State 82

  123 value: funcall .

    $default  reduce using rule 123 (value)


State 83

   63 var_or_cte: basictypes .

    $default  reduce using rule 63 (var_or_cte)


State 84

  122 value: var_or_cte .

    $default  reduce using rule 122 (value)


State 85

  124 value: structaccess .

    $default  reduce using rule 124 (value)


State 86

  125 value: property .

    $default  reduce using rule 125 (value)


State 87

   32 generaldec: vardec $@7 MTH_SEQUA expr .

    $default  reduce using rule 32 (generaldec)


State 88

   89 expr: logicoperation . $@15 MTH_OR $@16 expr
   90     | logicoperation .

    MTH_OR    reduce using rule 87 ($@15)
    $default  reduce using rule 90 (expr)

    $@15  go to state 107


State 89

   93 logicoperation: logicfactor . $@17 MTH_AND $@18 logicoperation
   94               | logicfactor .

    MTH_AND   reduce using rule 91 ($@17)
    $default  reduce using rule 94 (logicoperation)

    $@17  go to state 108


State 90

   97 logicfactor: comparison .

    $default  reduce using rule 97 (logicfactor)


State 91

   99 comparison: operation . comp_operator $@20 operation
  100           | operation .

    MTH_DEQUA  shift, and go to state 109
    MTH_GT     shift, and go to state 110
    MTH_LT     shift, and go to state 111
    MTH_GTEQ   shift, and go to state 112
    MTH_LTEQ   shift, and go to state 113
    MTH_NOTEQ  shift, and go to state 114

    $default  reduce using rule 100 (comparison)

    comp_operator  go to state 115


State 92

  103 operation: factor . $@21 MTH_PLUS $@22 operation
  106          | factor . $@23 MTH_MINUS $@24 operation
  107          | factor .

    MTH_PLUS   reduce using rule 101 ($@21)
    MTH_MINUS  reduce using rule 104 ($@23)
    $default   reduce using rule 107 (operation)

    $@21  go to state 116
    $@23  go to state 117


State 93

  110 factor: hvalue . $@25 MTH_ASTRK $@26 factor
  113       | hvalue . $@27 MTH_DIVIS $@28 factor
  114       | hvalue .

    MTH_ASTRK  reduce using rule 108 ($@25)
    MTH_DIVIS  reduce using rule 111 ($@27)
    $default   reduce using rule 114 (factor)

    $@25  go to state 118
    $@27  go to state 119


State 94

  117 hvalue: value . $@29 MTH_POWER $@30 hvalue
  120       | value . $@31 MTH_ROOT $@32 hvalue
  121       | value .

    MTH_POWER  reduce using rule 115 ($@29)
    MTH_ROOT   reduce using rule 118 ($@31)
    $default   reduce using rule 121 (hvalue)

    $@29  go to state 120
    $@31  go to state 121


State 95

   73 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 122


State 96

   75 arrHelper: expr . SYM_COMMA $@12 arrHelper
   76          | expr .

    SYM_COMMA  shift, and go to state 123

    $default  reduce using rule 76 (arrHelper)


State 97

   79 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 61

    arr        go to state 124
    matHelper  go to state 125


State 98

   43 funcall: V_ID $@8 . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 126


State 99

   84 vector: SYM_OCURL expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 127


State 100

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 128


State 101

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 129


State 102

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 130


State 103

  127 value: SYM_OPARE $@33 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 131
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 104

   96 logicfactor: MTH_NOT $@19 . comparison

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    comparison    go to state 132
    operation     go to state 91
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 105

   69 structaccess: V_ID SYM_OBRAC . expr SYM_CBRAC $@11 structIndex

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 133
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 106

   86 property: V_ID $@14 . SYM_DOT V_ID

    SYM_DOT  shift, and go to state 134


State 107

   89 expr: logicoperation $@15 . MTH_OR $@16 expr

    MTH_OR  shift, and go to state 135


State 108

   93 logicoperation: logicfactor $@17 . MTH_AND $@18 logicoperation

    MTH_AND  shift, and go to state 136


State 109

  132 comp_operator: MTH_DEQUA .

    $default  reduce using rule 132 (comp_operator)


State 110

  128 comp_operator: MTH_GT .

    $default  reduce using rule 128 (comp_operator)


State 111

  130 comp_operator: MTH_LT .

    $default  reduce using rule 130 (comp_operator)


State 112

  129 comp_operator: MTH_GTEQ .

    $default  reduce using rule 129 (comp_operator)


State 113

  131 comp_operator: MTH_LTEQ .

    $default  reduce using rule 131 (comp_operator)


State 114

  133 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 133 (comp_operator)


State 115

   99 comparison: operation comp_operator . $@20 operation

    $default  reduce using rule 98 ($@20)

    $@20  go to state 137


State 116

  103 operation: factor $@21 . MTH_PLUS $@22 operation

    MTH_PLUS  shift, and go to state 138


State 117

  106 operation: factor $@23 . MTH_MINUS $@24 operation

    MTH_MINUS  shift, and go to state 139


State 118

  110 factor: hvalue $@25 . MTH_ASTRK $@26 factor

    MTH_ASTRK  shift, and go to state 140


State 119

  113 factor: hvalue $@27 . MTH_DIVIS $@28 factor

    MTH_DIVIS  shift, and go to state 141


State 120

  117 hvalue: value $@29 . MTH_POWER $@30 hvalue

    MTH_POWER  shift, and go to state 142


State 121

  120 hvalue: value $@31 . MTH_ROOT $@32 hvalue

    MTH_ROOT  shift, and go to state 143


State 122

   73 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 73 (arr)


State 123

   75 arrHelper: expr SYM_COMMA . $@12 arrHelper

    $default  reduce using rule 74 ($@12)

    $@12  go to state 144


State 124

   80 matHelper: arr . SYM_COMMA optlf matHelper
   81          | arr . optlf

    SYM_COMMA  shift, and go to state 145
    LF         shift, and go to state 2
    CR         shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 146


State 125

   79 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 147


State 126

   43 funcall: V_ID $@8 SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 74
    SYM_OCURL  shift, and go to state 67
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    $default  reduce using rule 44 (funcallHelper)

    funcall         go to state 82
    funcallHelper   go to state 148
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    vector          go to state 149
    property        go to state 86
    expr            go to state 150
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 127

   84 vector: SYM_OCURL expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 151
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 128

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 152


State 129

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 153


State 130

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 161
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 131

  127 value: SYM_OPARE $@33 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 173


State 132

   96 logicfactor: MTH_NOT $@19 comparison .

    $default  reduce using rule 96 (logicfactor)


State 133

   69 structaccess: V_ID SYM_OBRAC expr . SYM_CBRAC $@11 structIndex

    SYM_CBRAC  shift, and go to state 174


State 134

   86 property: V_ID $@14 SYM_DOT . V_ID

    V_ID  shift, and go to state 175


State 135

   89 expr: logicoperation $@15 MTH_OR . $@16 expr

    $default  reduce using rule 88 ($@16)

    $@16  go to state 176


State 136

   93 logicoperation: logicfactor $@17 MTH_AND . $@18 logicoperation

    $default  reduce using rule 92 ($@18)

    $@18  go to state 177


State 137

   99 comparison: operation comp_operator $@20 . operation

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 178
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 138

  103 operation: factor $@21 MTH_PLUS . $@22 operation

    $default  reduce using rule 102 ($@22)

    $@22  go to state 179


State 139

  106 operation: factor $@23 MTH_MINUS . $@24 operation

    $default  reduce using rule 105 ($@24)

    $@24  go to state 180


State 140

  110 factor: hvalue $@25 MTH_ASTRK . $@26 factor

    $default  reduce using rule 109 ($@26)

    $@26  go to state 181


State 141

  113 factor: hvalue $@27 MTH_DIVIS . $@28 factor

    $default  reduce using rule 112 ($@28)

    $@28  go to state 182


State 142

  117 hvalue: value $@29 MTH_POWER . $@30 hvalue

    $default  reduce using rule 116 ($@30)

    $@30  go to state 183


State 143

  120 hvalue: value $@31 MTH_ROOT . $@32 hvalue

    $default  reduce using rule 119 ($@32)

    $@32  go to state 184


State 144

   75 arrHelper: expr SYM_COMMA $@12 . arrHelper

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    arrHelper       go to state 185
    property        go to state 86
    expr            go to state 96
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 145

   80 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 186


State 146

   81 matHelper: arr optlf .

    $default  reduce using rule 81 (matHelper)


State 147

   79 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 79 (mat)


State 148

   43 funcall: V_ID $@8 SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 187


State 149

   47 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 188

    $default  reduce using rule 48 (funcallHelper2)

    funcallHelper2  go to state 189


State 150

   46 funcallHelper: expr . $@9 funcallHelper2

    $default  reduce using rule 45 ($@9)

    $@9  go to state 190


State 151

   84 vector: SYM_OCURL expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 191


State 152

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 72 (arrdec)


State 153

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 192


State 154

   43 funcall: V_ID . $@8 SYM_OPARE funcallHelper SYM_CPARE
   62 var_or_cte: V_ID .
   65 assign: V_ID . $@10 MTH_SEQUA expr
   69 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@11 structIndex
   86 property: V_ID . $@14 SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 105

    SYM_OPARE  reduce using rule 42 ($@8)
    SYM_DOT    reduce using rule 85 ($@14)
    MTH_SEQUA  reduce using rule 64 ($@10)
    $default   reduce using rule 62 (var_or_cte)

    $@8   go to state 98
    $@10  go to state 193
    $@14  go to state 106


State 155

  138 if: LOG_IF . $@34 ifHelper ifHelper3

    $default  reduce using rule 137 ($@34)

    $@34  go to state 194


State 156

  148 for: LOG_FOR . forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 195
    V_ID       shift, and go to state 196

    forHelper  go to state 197
    stepfor    go to state 198


State 157

  154 while: LOG_WHILE . $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 152 ($@39)

    $@39  go to state 199


State 158

   40 stmt: RES_MEDIT .

    $default  reduce using rule 40 (stmt)


State 159

   50 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 200
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 160

   25 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 201
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 161

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 202


State 162

   24 funbody: generaldec . crlf $@6 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 203


State 163

   22 funbody: stmt . crlf $@5 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 204


State 164

   41 stmt: ret .

    $default  reduce using rule 41 (stmt)


State 165

   37 stmt: assign .

    $default  reduce using rule 37 (stmt)


State 166

   66 assign: structaccess . MTH_SEQUA expr
  124 value: structaccess .

    MTH_SEQUA  shift, and go to state 205

    $default  reduce using rule 124 (value)


State 167

   67 assign: property . MTH_SEQUA expr
  125 value: property .

    MTH_SEQUA  shift, and go to state 206

    $default  reduce using rule 125 (value)


State 168

   38 stmt: expr .

    $default  reduce using rule 38 (stmt)


State 169

   39 stmt: logicstruct .

    $default  reduce using rule 39 (stmt)


State 170

  134 logicstruct: if .

    $default  reduce using rule 134 (logicstruct)


State 171

  135 logicstruct: for .

    $default  reduce using rule 135 (logicstruct)


State 172

  136 logicstruct: while .

    $default  reduce using rule 136 (logicstruct)


State 173

  127 value: SYM_OPARE $@33 expr SYM_CPARE .

    $default  reduce using rule 127 (value)


State 174

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC . $@11 structIndex

    $default  reduce using rule 68 ($@11)

    $@11  go to state 207


State 175

   86 property: V_ID $@14 SYM_DOT V_ID .

    $default  reduce using rule 86 (property)


State 176

   89 expr: logicoperation $@15 MTH_OR $@16 . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 208
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 177

   93 logicoperation: logicfactor $@17 MTH_AND $@18 . logicoperation

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    logicoperation  go to state 209
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 178

   99 comparison: operation comp_operator $@20 operation .

    $default  reduce using rule 99 (comparison)


State 179

  103 operation: factor $@21 MTH_PLUS $@22 . operation

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 210
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 180

  106 operation: factor $@23 MTH_MINUS $@24 . operation

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 211
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 181

  110 factor: hvalue $@25 MTH_ASTRK $@26 . factor

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 212
    hvalue        go to state 93
    value         go to state 94


State 182

  113 factor: hvalue $@27 MTH_DIVIS $@28 . factor

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 213
    hvalue        go to state 93
    value         go to state 94


State 183

  117 hvalue: value $@29 MTH_POWER $@30 . hvalue

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 214
    value         go to state 94


State 184

  120 hvalue: value $@31 MTH_ROOT $@32 . hvalue

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 215
    value         go to state 94


State 185

   75 arrHelper: expr SYM_COMMA $@12 arrHelper .

    $default  reduce using rule 75 (arrHelper)


State 186

   80 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 61

    arr        go to state 124
    matHelper  go to state 216


State 187

   43 funcall: V_ID $@8 SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 43 (funcall)


State 188

   49 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 74
    SYM_OCURL  shift, and go to state 67
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    $default  reduce using rule 44 (funcallHelper)

    funcall         go to state 82
    funcallHelper   go to state 217
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    vector          go to state 149
    property        go to state 86
    expr            go to state 150
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 189

   47 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 47 (funcallHelper)


State 190

   46 funcallHelper: expr $@9 . funcallHelper2

    SYM_COMMA  shift, and go to state 188

    $default  reduce using rule 48 (funcallHelper2)

    funcallHelper2  go to state 218


State 191

   84 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 84 (vector)


State 192

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 219


State 193

   65 assign: V_ID $@10 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 220


State 194

  138 if: LOG_IF $@34 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 221

    ifHelper  go to state 222


State 195

  151 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 223
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 196

  149 forHelper: V_ID .

    $default  reduce using rule 149 (forHelper)


State 197

  148 for: LOG_FOR forHelper . SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 224


State 198

  150 forHelper: stepfor .

    $default  reduce using rule 150 (forHelper)


State 199

  154 while: LOG_WHILE $@39 . SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 225


State 200

   50 ret: RES_RETRN expr .

    $default  reduce using rule 50 (ret)


State 201

   25 funbody: crlf funbody .

    $default  reduce using rule 25 (funbody)


State 202

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 15 (function)


State 203

   24 funbody: generaldec crlf . $@6 funbody

    $default  reduce using rule 23 ($@6)

    $@6  go to state 226


State 204

   22 funbody: stmt crlf . $@5 funbody

    $default  reduce using rule 21 ($@5)

    $@5  go to state 227


State 205

   66 assign: structaccess MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 228
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 206

   67 assign: property MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 229
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 207

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@11 . structIndex

    SYM_OBRAC  shift, and go to state 230

    $default  reduce using rule 70 (structIndex)

    structIndex  go to state 231


State 208

   89 expr: logicoperation $@15 MTH_OR $@16 expr .

    $default  reduce using rule 89 (expr)


State 209

   93 logicoperation: logicfactor $@17 MTH_AND $@18 logicoperation .

    $default  reduce using rule 93 (logicoperation)


State 210

  103 operation: factor $@21 MTH_PLUS $@22 operation .

    $default  reduce using rule 103 (operation)


State 211

  106 operation: factor $@23 MTH_MINUS $@24 operation .

    $default  reduce using rule 106 (operation)


State 212

  110 factor: hvalue $@25 MTH_ASTRK $@26 factor .

    $default  reduce using rule 110 (factor)


State 213

  113 factor: hvalue $@27 MTH_DIVIS $@28 factor .

    $default  reduce using rule 113 (factor)


State 214

  117 hvalue: value $@29 MTH_POWER $@30 hvalue .

    $default  reduce using rule 117 (hvalue)


State 215

  120 hvalue: value $@31 MTH_ROOT $@32 hvalue .

    $default  reduce using rule 120 (hvalue)


State 216

   80 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 80 (matHelper)


State 217

   49 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 49 (funcallHelper2)


State 218

   46 funcallHelper: expr $@9 funcallHelper2 .

    $default  reduce using rule 46 (funcallHelper)


State 219

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 232


State 220

   65 assign: V_ID $@10 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 233
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 221

  140 ifHelper: SYM_OPARE . expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 234
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 222

  138 if: LOG_IF $@34 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 235

    $default  reduce using rule 144 (ifHelper3)

    ifHelper3  go to state 236


State 223

  151 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 237


State 224

  148 for: LOG_FOR forHelper SYM_ARROW . V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 238


State 225

  154 while: LOG_WHILE $@39 SYM_OPARE . expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 239
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 226

   24 funbody: generaldec crlf $@6 . funbody

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 240
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 227

   22 funbody: stmt crlf $@5 . funbody

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 241
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 228

   66 assign: structaccess MTH_SEQUA expr .

    $default  reduce using rule 66 (assign)


State 229

   67 assign: property MTH_SEQUA expr .

    $default  reduce using rule 67 (assign)


State 230

   71 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 242
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 231

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@11 structIndex .

    $default  reduce using rule 69 (structaccess)


State 232

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 243


State 233

   65 assign: V_ID $@10 MTH_SEQUA expr .

    $default  reduce using rule 65 (assign)


State 234

  140 ifHelper: SYM_OPARE expr . SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 244


State 235

  146 ifHelper3: LOG_ELSE . $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 145 ($@37)

    $@37  go to state 245


State 236

  138 if: LOG_IF $@34 ifHelper ifHelper3 .

    $default  reduce using rule 138 (if)


State 237

  151 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 246
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 238

  148 for: LOG_FOR forHelper SYM_ARROW V_ID . $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 147 ($@38)

    $@38  go to state 247


State 239

  154 while: LOG_WHILE $@39 SYM_OPARE expr . SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 248


State 240

   24 funbody: generaldec crlf $@6 funbody .

    $default  reduce using rule 24 (funbody)


State 241

   22 funbody: stmt crlf $@5 funbody .

    $default  reduce using rule 22 (funbody)


State 242

   71 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 249


State 243

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 78 (matdec)


State 244

  140 ifHelper: SYM_OPARE expr SYM_CPARE . $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 139 ($@35)

    $@35  go to state 250


State 245

  146 ifHelper3: LOG_ELSE $@37 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 251


State 246

  151 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 252


State 247

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 253


State 248

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE . $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 153 ($@40)

    $@40  go to state 254


State 249

   71 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 71 (structIndex)


State 250

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 255


State 251

  146 ifHelper3: LOG_ELSE $@37 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 256


State 252

  151 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 257
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 253

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 258


State 254

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 259


State 255

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 260


State 256

  146 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 261


State 257

  151 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 262


State 258

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 263


State 259

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 264


State 260

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 265


State 261

  146 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 266
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 267
    newline         go to state 268


State 262

  151 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 151 (stepfor)


State 263

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 266
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 269
    newline         go to state 268


State 264

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 270


State 265

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 266
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 271
    newline         go to state 268


State 266

  157 newline: stmt . crlf

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 272


State 267

  146 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 273


State 268

  155 newlineCicle: newline .
  156             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 155 (newlineCicle)

    stmt            go to state 266
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 274
    newline         go to state 268


State 269

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 275


State 270

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 266
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 276
    newline         go to state 268


State 271

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 277


State 272

  157 newline: stmt crlf .

    $default  reduce using rule 157 (newline)


State 273

  146 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 146 (ifHelper3)


State 274

  156 newlineCicle: newline newlineCicle .

    $default  reduce using rule 156 (newlineCicle)


State 275

  148 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 148 (for)


State 276

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 278


State 277

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 279

    $default  reduce using rule 141 (ifHelper2)

    ifHelper2  go to state 280


State 278

  154 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 154 (while)


State 279

  143 ifHelper2: LOG_ELIF . $@36 ifHelper

    $default  reduce using rule 142 ($@36)

    $@36  go to state 281


State 280

  140 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 140 (ifHelper)


State 281

  143 ifHelper2: LOG_ELIF $@36 . ifHelper

    SYM_OPARE  shift, and go to state 221

    ifHelper  go to state 282


State 282

  143 ifHelper2: LOG_ELIF $@36 ifHelper .

    $default  reduce using rule 143 (ifHelper2)
