Terminals unused in grammar

   F_ID
   M_ID
   T_FLOAT


State 183 conflicts: 8 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty

    4 $@1: %empty

    5 script: function crlf $@1 script

    6 $@2: %empty

    7 script: vardec crlf $@2 script

    8 $@3: %empty

    9 script: arrdec crlf $@3 script

   10 $@4: %empty

   11 script: matdec crlf $@4 script
   12       | crlf script

   13 crlf: CR LF
   14     | LF

   15 optlf: %empty
   16      | crlf

   17 $@5: %empty

   18 $@6: %empty

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

   20 funparams: %empty
   21          | generaldec morefunparams

   22 morefunparams: %empty
   23              | SYM_COMMA generaldec morefunparams

   24 funbody: %empty

   25 $@7: %empty

   26 funbody: stmt crlf $@7 funbody

   27 $@8: %empty

   28 funbody: generaldec crlf $@8 funbody
   29        | crlf funbody

   30 generaldec: vardec
   31           | arrdec
   32           | matdec
   33           | vectordec
   34           | elementdec

   35 $@9: %empty

   36 generaldec: vardec $@9 MTH_SEQUA expr

   37 $@10: %empty

   38 generaldec: arrdec $@10 MTH_SEQUA arr

   39 $@11: %empty

   40 generaldec: matdec $@11 MTH_SEQUA mat
   41           | vectordec MTH_SEQUA vector
   42           | elementdec MTH_SEQUA element

   43 stmt: assign
   44     | expr
   45     | logicstruct
   46     | RES_MEDIT
   47     | ret

   48 $@12: %empty

   49 funcall: V_ID $@12 SYM_OPARE funcallHelper SYM_CPARE

   50 funcallHelper: %empty

   51 $@13: %empty

   52 funcallHelper: expr $@13 funcallHelper2
   53              | vector funcallHelper2

   54 funcallHelper2: %empty
   55               | SYM_COMMA funcallHelper

   56 ret: RES_RETRN expr

   57 vardec: V_VAR V_ID SYM_COLON vartypes

   58 basictypes: V_CHAR
   59           | V_STRING
   60           | V_DOUBLE
   61           | V_INT
   62           | V_BOOL

   63 vartypes: T_INT
   64         | T_DOUBLE
   65         | T_CHAR
   66         | T_STRING
   67         | T_BOOL

   68 var_or_cte: V_ID
   69           | basictypes

   70 $@14: %empty

   71 assign: V_ID $@14 MTH_SEQUA expr
   72       | structaccess MTH_SEQUA expr
   73       | property MTH_SEQUA expr

   74 $@15: %empty

   75 $@16: %empty

   76 structaccess: V_ID $@15 SYM_OBRAC expr SYM_CBRAC $@16 structIndex

   77 structIndex: %empty
   78            | SYM_OBRAC expr SYM_CBRAC

   79 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   80 arr: SYM_OBRAC arrHelper SYM_CBRAC

   81 $@17: %empty

   82 arrHelper: expr SYM_COMMA $@17 arrHelper
   83          | expr

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   85 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   86 matHelper: arr SYM_COMMA optlf matHelper
   87          | arr optlf

   88 elementdec: V_ELEM V_ID

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

   90 vectordec: V_VECTOR V_ID

   91 vector: SYM_OPARE expr SYM_COMMA expr SYM_CPARE

   92 $@18: %empty

   93 property: V_ID $@18 SYM_DOT V_ID

   94 $@19: %empty

   95 $@20: %empty

   96 expr: logicoperation $@19 MTH_OR $@20 expr
   97     | logicoperation

   98 $@21: %empty

   99 $@22: %empty

  100 logicoperation: logicfactor $@21 MTH_AND $@22 logicoperation
  101               | logicfactor

  102 $@23: %empty

  103 logicfactor: MTH_NOT $@23 comparison
  104            | comparison

  105 $@24: %empty

  106 comparison: operation comp_operator $@24 operation
  107           | operation

  108 $@25: %empty

  109 $@26: %empty

  110 operation: factor $@25 MTH_PLUS $@26 operation

  111 $@27: %empty

  112 $@28: %empty

  113 operation: factor $@27 MTH_MINUS $@28 operation
  114          | factor

  115 $@29: %empty

  116 $@30: %empty

  117 factor: hvalue $@29 MTH_ASTRK $@30 factor

  118 $@31: %empty

  119 $@32: %empty

  120 factor: hvalue $@31 MTH_DIVIS $@32 factor
  121       | hvalue

  122 $@33: %empty

  123 $@34: %empty

  124 hvalue: value $@33 MTH_POWER $@34 hvalue

  125 $@35: %empty

  126 $@36: %empty

  127 hvalue: value $@35 MTH_ROOT $@36 hvalue
  128       | value

  129 value: var_or_cte
  130      | funcall
  131      | structaccess
  132      | property

  133 $@37: %empty

  134 value: SYM_OPARE $@37 expr SYM_CPARE

  135 comp_operator: MTH_GT
  136              | MTH_GTEQ
  137              | MTH_LT
  138              | MTH_LTEQ
  139              | MTH_DEQUA
  140              | MTH_NOTEQ

  141 logicstruct: if
  142            | for
  143            | while

  144 $@38: %empty

  145 if: LOG_IF $@38 ifHelper ifHelper3

  146 $@39: %empty

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  148 ifHelper2: %empty

  149 $@40: %empty

  150 ifHelper2: LOG_ELIF $@40 ifHelper

  151 ifHelper3: %empty

  152 $@41: %empty

  153 ifHelper3: LOG_ELSE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  154 $@42: %empty

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  156 forHelper: V_ID
  157          | stepfor

  158 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  159 $@43: %empty

  160 $@44: %empty

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  162 newlineCicle: newline
  163             | newline newlineCicle

  164 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 76 78 79 80 84 85 158
SYM_CBRAC (259) 76 78 79 80 84 85 158
SYM_OPARE (260) 19 49 91 134 147 161
SYM_CPARE (261) 19 49 91 134 147 161
SYM_OCURL (262) 19 89 147 153 155 161
SYM_CCURL (263) 19 89 147 153 155 161
SYM_COMMA (264) 23 55 82 86 89 91 158
SYM_ARROW (265) 155
SYM_COLON (266) 19 57 79 84
SYM_DOT (267) 93
MTH_SEQUA (268) 36 38 40 41 42 71 72 73
MTH_DEQUA (269) 139
MTH_GT (270) 135
MTH_LT (271) 137
MTH_GTEQ (272) 136
MTH_LTEQ (273) 138
MTH_NOT (274) 103
MTH_NOTEQ (275) 140
MTH_PLUS (276) 110
MTH_MINUS (277) 113
MTH_ASTRK (278) 117
MTH_DIVIS (279) 120
MTH_POWER (280) 124
MTH_ROOT (281) 127
MTH_AND (282) 100
MTH_OR (283) 96
LF (284) 13 14
CR (285) 13
V_ID (286) 19 49 57 68 71 76 79 84 88 90 93 155 156
F_ID (287)
M_ID (288)
LOG_IF (289) 145
LOG_ELIF (290) 150
LOG_ELSE (291) 153
LOG_FOR (292) 155
LOG_WHILE (293) 161
V_VAR (294) 57
V_CHAR (295) 58
V_STRING (296) 59
V_INT (297) 61 79 84
V_DOUBLE (298) 60
V_BOOL (299) 62
V_ARR (300) 79
V_MAT (301) 84
V_VECTOR (302) 90
V_ELEM (303) 88
T_BOOL (304) 67
T_INT (305) 63
T_FLOAT (306)
T_DOUBLE (307) 64
T_CHAR (308) 65
T_STRING (309) 66
RES_ORDER (310) 19
RES_MEDIT (311) 46
RES_RETRN (312) 56


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
prog (59)
    on left: 1 2, on right: 0
script (60)
    on left: 3 5 7 9 11 12, on right: 1 5 7 9 11 12
$@1 (61)
    on left: 4, on right: 5
$@2 (62)
    on left: 6, on right: 7
$@3 (63)
    on left: 8, on right: 9
$@4 (64)
    on left: 10, on right: 11
crlf (65)
    on left: 13 14, on right: 5 7 9 11 12 16 19 26 28 29 147 153 155
    161 164
optlf (66)
    on left: 15 16, on right: 19 85 86 87 147 153 155 161
function (67)
    on left: 19, on right: 5
$@5 (68)
    on left: 17, on right: 19
$@6 (69)
    on left: 18, on right: 19
funparams (70)
    on left: 20 21, on right: 19
morefunparams (71)
    on left: 22 23, on right: 21 23
funbody (72)
    on left: 24 26 28 29, on right: 19 26 28 29
$@7 (73)
    on left: 25, on right: 26
$@8 (74)
    on left: 27, on right: 28
generaldec (75)
    on left: 30 31 32 33 34 36 38 40 41 42, on right: 21 23 28
$@9 (76)
    on left: 35, on right: 36
$@10 (77)
    on left: 37, on right: 38
$@11 (78)
    on left: 39, on right: 40
stmt (79)
    on left: 43 44 45 46 47, on right: 26 164
funcall (80)
    on left: 49, on right: 130
$@12 (81)
    on left: 48, on right: 49
funcallHelper (82)
    on left: 50 52 53, on right: 49 55
$@13 (83)
    on left: 51, on right: 52
funcallHelper2 (84)
    on left: 54 55, on right: 52 53
ret (85)
    on left: 56, on right: 47
vardec (86)
    on left: 57, on right: 7 30 36
basictypes (87)
    on left: 58 59 60 61 62, on right: 69
vartypes (88)
    on left: 63 64 65 66 67, on right: 19 57 79 84
var_or_cte (89)
    on left: 68 69, on right: 129
assign (90)
    on left: 71 72 73, on right: 43
$@14 (91)
    on left: 70, on right: 71
structaccess (92)
    on left: 76, on right: 72 131
$@15 (93)
    on left: 74, on right: 76
$@16 (94)
    on left: 75, on right: 76
structIndex (95)
    on left: 77 78, on right: 76
arrdec (96)
    on left: 79, on right: 9 31 38
arr (97)
    on left: 80, on right: 38 86 87
arrHelper (98)
    on left: 82 83, on right: 80 82
$@17 (99)
    on left: 81, on right: 82
matdec (100)
    on left: 84, on right: 11 32 40
mat (101)
    on left: 85, on right: 40
matHelper (102)
    on left: 86 87, on right: 85 86
elementdec (103)
    on left: 88, on right: 34 42
element (104)
    on left: 89, on right: 42
vectordec (105)
    on left: 90, on right: 33 41
vector (106)
    on left: 91, on right: 41 53
property (107)
    on left: 93, on right: 73 132
$@18 (108)
    on left: 92, on right: 93
expr (109)
    on left: 96 97, on right: 36 44 52 56 71 72 73 76 78 82 83 89 91
    96 134 147 158 161
$@19 (110)
    on left: 94, on right: 96
$@20 (111)
    on left: 95, on right: 96
logicoperation (112)
    on left: 100 101, on right: 96 97 100
$@21 (113)
    on left: 98, on right: 100
$@22 (114)
    on left: 99, on right: 100
logicfactor (115)
    on left: 103 104, on right: 100 101
$@23 (116)
    on left: 102, on right: 103
comparison (117)
    on left: 106 107, on right: 103 104
$@24 (118)
    on left: 105, on right: 106
operation (119)
    on left: 110 113 114, on right: 106 107 110 113
$@25 (120)
    on left: 108, on right: 110
$@26 (121)
    on left: 109, on right: 110
$@27 (122)
    on left: 111, on right: 113
$@28 (123)
    on left: 112, on right: 113
factor (124)
    on left: 117 120 121, on right: 110 113 114 117 120
$@29 (125)
    on left: 115, on right: 117
$@30 (126)
    on left: 116, on right: 117
$@31 (127)
    on left: 118, on right: 120
$@32 (128)
    on left: 119, on right: 120
hvalue (129)
    on left: 124 127 128, on right: 117 120 121 124 127
$@33 (130)
    on left: 122, on right: 124
$@34 (131)
    on left: 123, on right: 124
$@35 (132)
    on left: 125, on right: 127
$@36 (133)
    on left: 126, on right: 127
value (134)
    on left: 129 130 131 132 134, on right: 124 127 128
$@37 (135)
    on left: 133, on right: 134
comp_operator (136)
    on left: 135 136 137 138 139 140, on right: 106
logicstruct (137)
    on left: 141 142 143, on right: 45
if (138)
    on left: 145, on right: 141
$@38 (139)
    on left: 144, on right: 145
ifHelper (140)
    on left: 147, on right: 145 150
$@39 (141)
    on left: 146, on right: 147
ifHelper2 (142)
    on left: 148 150, on right: 147
$@40 (143)
    on left: 149, on right: 150
ifHelper3 (144)
    on left: 151 153, on right: 145
$@41 (145)
    on left: 152, on right: 153
for (146)
    on left: 155, on right: 142
$@42 (147)
    on left: 154, on right: 155
forHelper (148)
    on left: 156 157, on right: 155
stepfor (149)
    on left: 158, on right: 157
while (150)
    on left: 161, on right: 143
$@43 (151)
    on left: 159, on right: 161
$@44 (152)
    on left: 160, on right: 161
newlineCicle (153)
    on left: 162 163, on right: 147 153 155 161 163
newline (154)
    on left: 164, on right: 162 163


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    RES_ORDER  shift, and go to state 7

    $end  reduce using rule 3 (script)

    prog      go to state 8
    script    go to state 9
    crlf      go to state 10
    function  go to state 11
    vardec    go to state 12
    arrdec    go to state 13
    matdec    go to state 14


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

   14 crlf: LF .

    $default  reduce using rule 14 (crlf)


State 3

   13 crlf: CR . LF

    LF  shift, and go to state 15


State 4

   57 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 16


State 5

   79 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 17


State 6

   84 matdec: V_MAT . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 18


State 7

   19 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 19


State 8

    0 $accept: prog . $end

    $end  shift, and go to state 20


State 9

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 10

   12 script: crlf . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    RES_ORDER  shift, and go to state 7

    $default  reduce using rule 3 (script)

    script    go to state 21
    crlf      go to state 10
    function  go to state 11
    vardec    go to state 12
    arrdec    go to state 13
    matdec    go to state 14


State 11

    5 script: function . crlf $@1 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 22


State 12

    7 script: vardec . crlf $@2 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 23


State 13

    9 script: arrdec . crlf $@3 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 24


State 14

   11 script: matdec . crlf $@4 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 25


State 15

   13 crlf: CR LF .

    $default  reduce using rule 13 (crlf)


State 16

   57 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 26


State 17

   79 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 27


State 18

   84 matdec: V_MAT V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 28


State 19

   19 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 29


State 20

    0 $accept: prog $end .

    $default  accept


State 21

   12 script: crlf script .

    $default  reduce using rule 12 (script)


State 22

    5 script: function crlf . $@1 script

    $default  reduce using rule 4 ($@1)

    $@1  go to state 30


State 23

    7 script: vardec crlf . $@2 script

    $default  reduce using rule 6 ($@2)

    $@2  go to state 31


State 24

    9 script: arrdec crlf . $@3 script

    $default  reduce using rule 8 ($@3)

    $@3  go to state 32


State 25

   11 script: matdec crlf . $@4 script

    $default  reduce using rule 10 ($@4)

    $@4  go to state 33


State 26

   57 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 34
    T_INT     shift, and go to state 35
    T_DOUBLE  shift, and go to state 36
    T_CHAR    shift, and go to state 37
    T_STRING  shift, and go to state 38

    vartypes  go to state 39


State 27

   79 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 34
    T_INT     shift, and go to state 35
    T_DOUBLE  shift, and go to state 36
    T_CHAR    shift, and go to state 37
    T_STRING  shift, and go to state 38

    vartypes  go to state 40


State 28

   84 matdec: V_MAT V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 34
    T_INT     shift, and go to state 35
    T_DOUBLE  shift, and go to state 36
    T_CHAR    shift, and go to state 37
    T_STRING  shift, and go to state 38

    vartypes  go to state 41


State 29

   19 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 34
    T_INT     shift, and go to state 35
    T_DOUBLE  shift, and go to state 36
    T_CHAR    shift, and go to state 37
    T_STRING  shift, and go to state 38

    vartypes  go to state 42


State 30

    5 script: function crlf $@1 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    RES_ORDER  shift, and go to state 7

    $default  reduce using rule 3 (script)

    script    go to state 43
    crlf      go to state 10
    function  go to state 11
    vardec    go to state 12
    arrdec    go to state 13
    matdec    go to state 14


State 31

    7 script: vardec crlf $@2 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    RES_ORDER  shift, and go to state 7

    $default  reduce using rule 3 (script)

    script    go to state 44
    crlf      go to state 10
    function  go to state 11
    vardec    go to state 12
    arrdec    go to state 13
    matdec    go to state 14


State 32

    9 script: arrdec crlf $@3 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    RES_ORDER  shift, and go to state 7

    $default  reduce using rule 3 (script)

    script    go to state 45
    crlf      go to state 10
    function  go to state 11
    vardec    go to state 12
    arrdec    go to state 13
    matdec    go to state 14


State 33

   11 script: matdec crlf $@4 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    RES_ORDER  shift, and go to state 7

    $default  reduce using rule 3 (script)

    script    go to state 46
    crlf      go to state 10
    function  go to state 11
    vardec    go to state 12
    arrdec    go to state 13
    matdec    go to state 14


State 34

   67 vartypes: T_BOOL .

    $default  reduce using rule 67 (vartypes)


State 35

   63 vartypes: T_INT .

    $default  reduce using rule 63 (vartypes)


State 36

   64 vartypes: T_DOUBLE .

    $default  reduce using rule 64 (vartypes)


State 37

   65 vartypes: T_CHAR .

    $default  reduce using rule 65 (vartypes)


State 38

   66 vartypes: T_STRING .

    $default  reduce using rule 66 (vartypes)


State 39

   57 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 57 (vardec)


State 40

   79 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 47


State 41

   84 matdec: V_MAT V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 48


State 42

   19 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 49


State 43

    5 script: function crlf $@1 script .

    $default  reduce using rule 5 (script)


State 44

    7 script: vardec crlf $@2 script .

    $default  reduce using rule 7 (script)


State 45

    9 script: arrdec crlf $@3 script .

    $default  reduce using rule 9 (script)


State 46

   11 script: matdec crlf $@4 script .

    $default  reduce using rule 11 (script)


State 47

   79 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 50


State 48

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 51


State 49

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 17 ($@5)

    $@5  go to state 52


State 50

   79 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 53


State 51

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 54


State 52

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 . funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 5
    V_MAT     shift, and go to state 6
    V_VECTOR  shift, and go to state 55
    V_ELEM    shift, and go to state 56

    $default  reduce using rule 20 (funparams)

    funparams   go to state 57
    generaldec  go to state 58
    vardec      go to state 59
    arrdec      go to state 60
    matdec      go to state 61
    elementdec  go to state 62
    vectordec   go to state 63


State 53

   79 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 79 (arrdec)


State 54

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 64


State 55

   90 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 65


State 56

   88 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 66


State 57

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams . SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 67


State 58

   21 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 68

    $default  reduce using rule 22 (morefunparams)

    morefunparams  go to state 69


State 59

   30 generaldec: vardec .
   36           | vardec . $@9 MTH_SEQUA expr

    MTH_SEQUA  reduce using rule 35 ($@9)
    $default   reduce using rule 30 (generaldec)

    $@9  go to state 70


State 60

   31 generaldec: arrdec .
   38           | arrdec . $@10 MTH_SEQUA arr

    MTH_SEQUA  reduce using rule 37 ($@10)
    $default   reduce using rule 31 (generaldec)

    $@10  go to state 71


State 61

   32 generaldec: matdec .
   40           | matdec . $@11 MTH_SEQUA mat

    MTH_SEQUA  reduce using rule 39 ($@11)
    $default   reduce using rule 32 (generaldec)

    $@11  go to state 72


State 62

   34 generaldec: elementdec .
   42           | elementdec . MTH_SEQUA element

    MTH_SEQUA  shift, and go to state 73

    $default  reduce using rule 34 (generaldec)


State 63

   33 generaldec: vectordec .
   41           | vectordec . MTH_SEQUA vector

    MTH_SEQUA  shift, and go to state 74

    $default  reduce using rule 33 (generaldec)


State 64

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 75


State 65

   90 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 90 (vectordec)


State 66

   88 elementdec: V_ELEM V_ID .

    $default  reduce using rule 88 (elementdec)


State 67

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE . $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 18 ($@6)

    $@6  go to state 76


State 68

   23 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 5
    V_MAT     shift, and go to state 6
    V_VECTOR  shift, and go to state 55
    V_ELEM    shift, and go to state 56

    generaldec  go to state 77
    vardec      go to state 59
    arrdec      go to state 60
    matdec      go to state 61
    elementdec  go to state 62
    vectordec   go to state 63


State 69

   21 funparams: generaldec morefunparams .

    $default  reduce using rule 21 (funparams)


State 70

   36 generaldec: vardec $@9 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 78


State 71

   38 generaldec: arrdec $@10 . MTH_SEQUA arr

    MTH_SEQUA  shift, and go to state 79


State 72

   40 generaldec: matdec $@11 . MTH_SEQUA mat

    MTH_SEQUA  shift, and go to state 80


State 73

   42 generaldec: elementdec MTH_SEQUA . element

    SYM_OCURL  shift, and go to state 81

    element  go to state 82


State 74

   41 generaldec: vectordec MTH_SEQUA . vector

    SYM_OPARE  shift, and go to state 83

    vector  go to state 84


State 75

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 85


State 76

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 87


State 77

   23 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 68

    $default  reduce using rule 22 (morefunparams)

    morefunparams  go to state 88


State 78

   36 generaldec: vardec $@9 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 102
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 79

   38 generaldec: arrdec $@10 MTH_SEQUA . arr

    SYM_OBRAC  shift, and go to state 110

    arr  go to state 111


State 80

   40 generaldec: matdec $@11 MTH_SEQUA . mat

    SYM_OBRAC  shift, and go to state 112

    mat  go to state 113


State 81

   89 element: SYM_OCURL . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 114
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 82

   42 generaldec: elementdec MTH_SEQUA element .

    $default  reduce using rule 42 (generaldec)


State 83

   91 vector: SYM_OPARE . expr SYM_COMMA expr SYM_CPARE

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 115
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 84

   41 generaldec: vectordec MTH_SEQUA vector .

    $default  reduce using rule 41 (generaldec)


State 85

   84 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 84 (matdec)


State 86

   16 optlf: crlf .

    $default  reduce using rule 16 (optlf)


State 87

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 116


State 88

   23 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 23 (morefunparams)


State 89

  134 value: SYM_OPARE . $@37 expr SYM_CPARE

    $default  reduce using rule 133 ($@37)

    $@37  go to state 117


State 90

  103 logicfactor: MTH_NOT . $@23 comparison

    $default  reduce using rule 102 ($@23)

    $@23  go to state 118


State 91

   49 funcall: V_ID . $@12 SYM_OPARE funcallHelper SYM_CPARE
   68 var_or_cte: V_ID .
   76 structaccess: V_ID . $@15 SYM_OBRAC expr SYM_CBRAC $@16 structIndex
   93 property: V_ID . $@18 SYM_DOT V_ID

    SYM_OBRAC  reduce using rule 74 ($@15)
    SYM_OPARE  reduce using rule 48 ($@12)
    SYM_DOT    reduce using rule 92 ($@18)
    $default   reduce using rule 68 (var_or_cte)

    $@12  go to state 119
    $@15  go to state 120
    $@18  go to state 121


State 92

   58 basictypes: V_CHAR .

    $default  reduce using rule 58 (basictypes)


State 93

   59 basictypes: V_STRING .

    $default  reduce using rule 59 (basictypes)


State 94

   61 basictypes: V_INT .

    $default  reduce using rule 61 (basictypes)


State 95

   60 basictypes: V_DOUBLE .

    $default  reduce using rule 60 (basictypes)


State 96

   62 basictypes: V_BOOL .

    $default  reduce using rule 62 (basictypes)


State 97

  130 value: funcall .

    $default  reduce using rule 130 (value)


State 98

   69 var_or_cte: basictypes .

    $default  reduce using rule 69 (var_or_cte)


State 99

  129 value: var_or_cte .

    $default  reduce using rule 129 (value)


State 100

  131 value: structaccess .

    $default  reduce using rule 131 (value)


State 101

  132 value: property .

    $default  reduce using rule 132 (value)


State 102

   36 generaldec: vardec $@9 MTH_SEQUA expr .

    $default  reduce using rule 36 (generaldec)


State 103

   96 expr: logicoperation . $@19 MTH_OR $@20 expr
   97     | logicoperation .

    MTH_OR    reduce using rule 94 ($@19)
    $default  reduce using rule 97 (expr)

    $@19  go to state 122


State 104

  100 logicoperation: logicfactor . $@21 MTH_AND $@22 logicoperation
  101               | logicfactor .

    MTH_AND   reduce using rule 98 ($@21)
    $default  reduce using rule 101 (logicoperation)

    $@21  go to state 123


State 105

  104 logicfactor: comparison .

    $default  reduce using rule 104 (logicfactor)


State 106

  106 comparison: operation . comp_operator $@24 operation
  107           | operation .

    MTH_DEQUA  shift, and go to state 124
    MTH_GT     shift, and go to state 125
    MTH_LT     shift, and go to state 126
    MTH_GTEQ   shift, and go to state 127
    MTH_LTEQ   shift, and go to state 128
    MTH_NOTEQ  shift, and go to state 129

    $default  reduce using rule 107 (comparison)

    comp_operator  go to state 130


State 107

  110 operation: factor . $@25 MTH_PLUS $@26 operation
  113          | factor . $@27 MTH_MINUS $@28 operation
  114          | factor .

    MTH_PLUS   reduce using rule 108 ($@25)
    MTH_MINUS  reduce using rule 111 ($@27)
    $default   reduce using rule 114 (operation)

    $@25  go to state 131
    $@27  go to state 132


State 108

  117 factor: hvalue . $@29 MTH_ASTRK $@30 factor
  120       | hvalue . $@31 MTH_DIVIS $@32 factor
  121       | hvalue .

    MTH_ASTRK  reduce using rule 115 ($@29)
    MTH_DIVIS  reduce using rule 118 ($@31)
    $default   reduce using rule 121 (factor)

    $@29  go to state 133
    $@31  go to state 134


State 109

  124 hvalue: value . $@33 MTH_POWER $@34 hvalue
  127       | value . $@35 MTH_ROOT $@36 hvalue
  128       | value .

    MTH_POWER  reduce using rule 122 ($@33)
    MTH_ROOT   reduce using rule 125 ($@35)
    $default   reduce using rule 128 (hvalue)

    $@33  go to state 135
    $@35  go to state 136


State 110

   80 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    arrHelper       go to state 137
    property        go to state 101
    expr            go to state 138
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 111

   38 generaldec: arrdec $@10 MTH_SEQUA arr .

    $default  reduce using rule 38 (generaldec)


State 112

   85 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 139


State 113

   40 generaldec: matdec $@11 MTH_SEQUA mat .

    $default  reduce using rule 40 (generaldec)


State 114

   89 element: SYM_OCURL expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 140


State 115

   91 vector: SYM_OPARE expr . SYM_COMMA expr SYM_CPARE

    SYM_COMMA  shift, and go to state 141


State 116

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 142


State 117

  134 value: SYM_OPARE $@37 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 143
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 118

  103 logicfactor: MTH_NOT $@23 . comparison

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    comparison    go to state 144
    operation     go to state 106
    factor        go to state 107
    hvalue        go to state 108
    value         go to state 109


State 119

   49 funcall: V_ID $@12 . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 145


State 120

   76 structaccess: V_ID $@15 . SYM_OBRAC expr SYM_CBRAC $@16 structIndex

    SYM_OBRAC  shift, and go to state 146


State 121

   93 property: V_ID $@18 . SYM_DOT V_ID

    SYM_DOT  shift, and go to state 147


State 122

   96 expr: logicoperation $@19 . MTH_OR $@20 expr

    MTH_OR  shift, and go to state 148


State 123

  100 logicoperation: logicfactor $@21 . MTH_AND $@22 logicoperation

    MTH_AND  shift, and go to state 149


State 124

  139 comp_operator: MTH_DEQUA .

    $default  reduce using rule 139 (comp_operator)


State 125

  135 comp_operator: MTH_GT .

    $default  reduce using rule 135 (comp_operator)


State 126

  137 comp_operator: MTH_LT .

    $default  reduce using rule 137 (comp_operator)


State 127

  136 comp_operator: MTH_GTEQ .

    $default  reduce using rule 136 (comp_operator)


State 128

  138 comp_operator: MTH_LTEQ .

    $default  reduce using rule 138 (comp_operator)


State 129

  140 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 140 (comp_operator)


State 130

  106 comparison: operation comp_operator . $@24 operation

    $default  reduce using rule 105 ($@24)

    $@24  go to state 150


State 131

  110 operation: factor $@25 . MTH_PLUS $@26 operation

    MTH_PLUS  shift, and go to state 151


State 132

  113 operation: factor $@27 . MTH_MINUS $@28 operation

    MTH_MINUS  shift, and go to state 152


State 133

  117 factor: hvalue $@29 . MTH_ASTRK $@30 factor

    MTH_ASTRK  shift, and go to state 153


State 134

  120 factor: hvalue $@31 . MTH_DIVIS $@32 factor

    MTH_DIVIS  shift, and go to state 154


State 135

  124 hvalue: value $@33 . MTH_POWER $@34 hvalue

    MTH_POWER  shift, and go to state 155


State 136

  127 hvalue: value $@35 . MTH_ROOT $@36 hvalue

    MTH_ROOT  shift, and go to state 156


State 137

   80 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 157


State 138

   82 arrHelper: expr . SYM_COMMA $@17 arrHelper
   83          | expr .

    SYM_COMMA  shift, and go to state 158

    $default  reduce using rule 83 (arrHelper)


State 139

   85 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 110

    arr        go to state 159
    matHelper  go to state 160


State 140

   89 element: SYM_OCURL expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 161
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 141

   91 vector: SYM_OPARE expr SYM_COMMA . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 162
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 142

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    V_VECTOR   shift, and go to state 55
    V_ELEM     shift, and go to state 56
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    $default  reduce using rule 24 (funbody)

    crlf            go to state 169
    funbody         go to state 170
    generaldec      go to state 171
    stmt            go to state 172
    funcall         go to state 97
    ret             go to state 173
    vardec          go to state 59
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    arrdec          go to state 60
    matdec          go to state 61
    elementdec      go to state 62
    vectordec       go to state 63
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181


State 143

  134 value: SYM_OPARE $@37 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 182


State 144

  103 logicfactor: MTH_NOT $@23 comparison .

    $default  reduce using rule 103 (logicfactor)


State 145

   49 funcall: V_ID $@12 SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 183
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    $default  reduce using rule 50 (funcallHelper)

    funcall         go to state 97
    funcallHelper   go to state 184
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    vector          go to state 185
    property        go to state 101
    expr            go to state 186
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 146

   76 structaccess: V_ID $@15 SYM_OBRAC . expr SYM_CBRAC $@16 structIndex

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 187
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 147

   93 property: V_ID $@18 SYM_DOT . V_ID

    V_ID  shift, and go to state 188


State 148

   96 expr: logicoperation $@19 MTH_OR . $@20 expr

    $default  reduce using rule 95 ($@20)

    $@20  go to state 189


State 149

  100 logicoperation: logicfactor $@21 MTH_AND . $@22 logicoperation

    $default  reduce using rule 99 ($@22)

    $@22  go to state 190


State 150

  106 comparison: operation comp_operator $@24 . operation

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    operation     go to state 191
    factor        go to state 107
    hvalue        go to state 108
    value         go to state 109


State 151

  110 operation: factor $@25 MTH_PLUS . $@26 operation

    $default  reduce using rule 109 ($@26)

    $@26  go to state 192


State 152

  113 operation: factor $@27 MTH_MINUS . $@28 operation

    $default  reduce using rule 112 ($@28)

    $@28  go to state 193


State 153

  117 factor: hvalue $@29 MTH_ASTRK . $@30 factor

    $default  reduce using rule 116 ($@30)

    $@30  go to state 194


State 154

  120 factor: hvalue $@31 MTH_DIVIS . $@32 factor

    $default  reduce using rule 119 ($@32)

    $@32  go to state 195


State 155

  124 hvalue: value $@33 MTH_POWER . $@34 hvalue

    $default  reduce using rule 123 ($@34)

    $@34  go to state 196


State 156

  127 hvalue: value $@35 MTH_ROOT . $@36 hvalue

    $default  reduce using rule 126 ($@36)

    $@36  go to state 197


State 157

   80 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 80 (arr)


State 158

   82 arrHelper: expr SYM_COMMA . $@17 arrHelper

    $default  reduce using rule 81 ($@17)

    $@17  go to state 198


State 159

   86 matHelper: arr . SYM_COMMA optlf matHelper
   87          | arr . optlf

    SYM_COMMA  shift, and go to state 199
    LF         shift, and go to state 2
    CR         shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 200


State 160

   85 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 201


State 161

   89 element: SYM_OCURL expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 202


State 162

   91 vector: SYM_OPARE expr SYM_COMMA expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 203


State 163

   49 funcall: V_ID . $@12 SYM_OPARE funcallHelper SYM_CPARE
   68 var_or_cte: V_ID .
   71 assign: V_ID . $@14 MTH_SEQUA expr
   76 structaccess: V_ID . $@15 SYM_OBRAC expr SYM_CBRAC $@16 structIndex
   93 property: V_ID . $@18 SYM_DOT V_ID

    SYM_OBRAC  reduce using rule 74 ($@15)
    SYM_OPARE  reduce using rule 48 ($@12)
    SYM_DOT    reduce using rule 92 ($@18)
    MTH_SEQUA  reduce using rule 70 ($@14)
    $default   reduce using rule 68 (var_or_cte)

    $@12  go to state 119
    $@14  go to state 204
    $@15  go to state 120
    $@18  go to state 121


State 164

  145 if: LOG_IF . $@38 ifHelper ifHelper3

    $default  reduce using rule 144 ($@38)

    $@38  go to state 205


State 165

  155 for: LOG_FOR . forHelper SYM_ARROW V_ID $@42 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 206
    V_ID       shift, and go to state 207

    forHelper  go to state 208
    stepfor    go to state 209


State 166

  161 while: LOG_WHILE . $@43 SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 159 ($@43)

    $@43  go to state 210


State 167

   46 stmt: RES_MEDIT .

    $default  reduce using rule 46 (stmt)


State 168

   56 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 211
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 169

   29 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    V_VECTOR   shift, and go to state 55
    V_ELEM     shift, and go to state 56
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    $default  reduce using rule 24 (funbody)

    crlf            go to state 169
    funbody         go to state 212
    generaldec      go to state 171
    stmt            go to state 172
    funcall         go to state 97
    ret             go to state 173
    vardec          go to state 59
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    arrdec          go to state 60
    matdec          go to state 61
    elementdec      go to state 62
    vectordec       go to state 63
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181


State 170

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 213


State 171

   28 funbody: generaldec . crlf $@8 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 214


State 172

   26 funbody: stmt . crlf $@7 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 215


State 173

   47 stmt: ret .

    $default  reduce using rule 47 (stmt)


State 174

   43 stmt: assign .

    $default  reduce using rule 43 (stmt)


State 175

   72 assign: structaccess . MTH_SEQUA expr
  131 value: structaccess .

    MTH_SEQUA  shift, and go to state 216

    $default  reduce using rule 131 (value)


State 176

   73 assign: property . MTH_SEQUA expr
  132 value: property .

    MTH_SEQUA  shift, and go to state 217

    $default  reduce using rule 132 (value)


State 177

   44 stmt: expr .

    $default  reduce using rule 44 (stmt)


State 178

   45 stmt: logicstruct .

    $default  reduce using rule 45 (stmt)


State 179

  141 logicstruct: if .

    $default  reduce using rule 141 (logicstruct)


State 180

  142 logicstruct: for .

    $default  reduce using rule 142 (logicstruct)


State 181

  143 logicstruct: while .

    $default  reduce using rule 143 (logicstruct)


State 182

  134 value: SYM_OPARE $@37 expr SYM_CPARE .

    $default  reduce using rule 134 (value)


State 183

   91 vector: SYM_OPARE . expr SYM_COMMA expr SYM_CPARE
  134 value: SYM_OPARE . $@37 expr SYM_CPARE

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    SYM_OPARE  [reduce using rule 133 ($@37)]
    MTH_NOT    [reduce using rule 133 ($@37)]
    V_ID       [reduce using rule 133 ($@37)]
    V_CHAR     [reduce using rule 133 ($@37)]
    V_STRING   [reduce using rule 133 ($@37)]
    V_INT      [reduce using rule 133 ($@37)]
    V_DOUBLE   [reduce using rule 133 ($@37)]
    V_BOOL     [reduce using rule 133 ($@37)]

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 115
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    $@37            go to state 117


State 184

   49 funcall: V_ID $@12 SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 218


State 185

   53 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 219

    $default  reduce using rule 54 (funcallHelper2)

    funcallHelper2  go to state 220


State 186

   52 funcallHelper: expr . $@13 funcallHelper2

    $default  reduce using rule 51 ($@13)

    $@13  go to state 221


State 187

   76 structaccess: V_ID $@15 SYM_OBRAC expr . SYM_CBRAC $@16 structIndex

    SYM_CBRAC  shift, and go to state 222


State 188

   93 property: V_ID $@18 SYM_DOT V_ID .

    $default  reduce using rule 93 (property)


State 189

   96 expr: logicoperation $@19 MTH_OR $@20 . expr

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 223
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 190

  100 logicoperation: logicfactor $@21 MTH_AND $@22 . logicoperation

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    logicoperation  go to state 224
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 191

  106 comparison: operation comp_operator $@24 operation .

    $default  reduce using rule 106 (comparison)


State 192

  110 operation: factor $@25 MTH_PLUS $@26 . operation

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    operation     go to state 225
    factor        go to state 107
    hvalue        go to state 108
    value         go to state 109


State 193

  113 operation: factor $@27 MTH_MINUS $@28 . operation

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    operation     go to state 226
    factor        go to state 107
    hvalue        go to state 108
    value         go to state 109


State 194

  117 factor: hvalue $@29 MTH_ASTRK $@30 . factor

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    factor        go to state 227
    hvalue        go to state 108
    value         go to state 109


State 195

  120 factor: hvalue $@31 MTH_DIVIS $@32 . factor

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    factor        go to state 228
    hvalue        go to state 108
    value         go to state 109


State 196

  124 hvalue: value $@33 MTH_POWER $@34 . hvalue

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    hvalue        go to state 229
    value         go to state 109


State 197

  127 hvalue: value $@35 MTH_ROOT $@36 . hvalue

    SYM_OPARE  shift, and go to state 89
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall       go to state 97
    basictypes    go to state 98
    var_or_cte    go to state 99
    structaccess  go to state 100
    property      go to state 101
    hvalue        go to state 230
    value         go to state 109


State 198

   82 arrHelper: expr SYM_COMMA $@17 . arrHelper

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    arrHelper       go to state 231
    property        go to state 101
    expr            go to state 138
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 199

   86 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 232


State 200

   87 matHelper: arr optlf .

    $default  reduce using rule 87 (matHelper)


State 201

   85 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 85 (mat)


State 202

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 233
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 203

   91 vector: SYM_OPARE expr SYM_COMMA expr SYM_CPARE .

    $default  reduce using rule 91 (vector)


State 204

   71 assign: V_ID $@14 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 234


State 205

  145 if: LOG_IF $@38 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 235

    ifHelper  go to state 236


State 206

  158 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 237
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 207

  156 forHelper: V_ID .

    $default  reduce using rule 156 (forHelper)


State 208

  155 for: LOG_FOR forHelper . SYM_ARROW V_ID $@42 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 238


State 209

  157 forHelper: stepfor .

    $default  reduce using rule 157 (forHelper)


State 210

  161 while: LOG_WHILE $@43 . SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 239


State 211

   56 ret: RES_RETRN expr .

    $default  reduce using rule 56 (ret)


State 212

   29 funbody: crlf funbody .

    $default  reduce using rule 29 (funbody)


State 213

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 19 (function)


State 214

   28 funbody: generaldec crlf . $@8 funbody

    $default  reduce using rule 27 ($@8)

    $@8  go to state 240


State 215

   26 funbody: stmt crlf . $@7 funbody

    $default  reduce using rule 25 ($@7)

    $@7  go to state 241


State 216

   72 assign: structaccess MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 242
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 217

   73 assign: property MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 243
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 218

   49 funcall: V_ID $@12 SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 49 (funcall)


State 219

   55 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 183
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    $default  reduce using rule 50 (funcallHelper)

    funcall         go to state 97
    funcallHelper   go to state 244
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    vector          go to state 185
    property        go to state 101
    expr            go to state 186
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 220

   53 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 53 (funcallHelper)


State 221

   52 funcallHelper: expr $@13 . funcallHelper2

    SYM_COMMA  shift, and go to state 219

    $default  reduce using rule 54 (funcallHelper2)

    funcallHelper2  go to state 245


State 222

   76 structaccess: V_ID $@15 SYM_OBRAC expr SYM_CBRAC . $@16 structIndex

    $default  reduce using rule 75 ($@16)

    $@16  go to state 246


State 223

   96 expr: logicoperation $@19 MTH_OR $@20 expr .

    $default  reduce using rule 96 (expr)


State 224

  100 logicoperation: logicfactor $@21 MTH_AND $@22 logicoperation .

    $default  reduce using rule 100 (logicoperation)


State 225

  110 operation: factor $@25 MTH_PLUS $@26 operation .

    $default  reduce using rule 110 (operation)


State 226

  113 operation: factor $@27 MTH_MINUS $@28 operation .

    $default  reduce using rule 113 (operation)


State 227

  117 factor: hvalue $@29 MTH_ASTRK $@30 factor .

    $default  reduce using rule 117 (factor)


State 228

  120 factor: hvalue $@31 MTH_DIVIS $@32 factor .

    $default  reduce using rule 120 (factor)


State 229

  124 hvalue: value $@33 MTH_POWER $@34 hvalue .

    $default  reduce using rule 124 (hvalue)


State 230

  127 hvalue: value $@35 MTH_ROOT $@36 hvalue .

    $default  reduce using rule 127 (hvalue)


State 231

   82 arrHelper: expr SYM_COMMA $@17 arrHelper .

    $default  reduce using rule 82 (arrHelper)


State 232

   86 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 110

    arr        go to state 159
    matHelper  go to state 247


State 233

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 248


State 234

   71 assign: V_ID $@14 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 249
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 235

  147 ifHelper: SYM_OPARE . expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 250
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 236

  145 if: LOG_IF $@38 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 251

    $default  reduce using rule 151 (ifHelper3)

    ifHelper3  go to state 252


State 237

  158 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 253


State 238

  155 for: LOG_FOR forHelper SYM_ARROW . V_ID $@42 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 254


State 239

  161 while: LOG_WHILE $@43 SYM_OPARE . expr SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 255
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 240

   28 funbody: generaldec crlf $@8 . funbody

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    V_VECTOR   shift, and go to state 55
    V_ELEM     shift, and go to state 56
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    $default  reduce using rule 24 (funbody)

    crlf            go to state 169
    funbody         go to state 256
    generaldec      go to state 171
    stmt            go to state 172
    funcall         go to state 97
    ret             go to state 173
    vardec          go to state 59
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    arrdec          go to state 60
    matdec          go to state 61
    elementdec      go to state 62
    vectordec       go to state 63
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181


State 241

   26 funbody: stmt crlf $@7 . funbody

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 6
    V_VECTOR   shift, and go to state 55
    V_ELEM     shift, and go to state 56
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    $default  reduce using rule 24 (funbody)

    crlf            go to state 169
    funbody         go to state 257
    generaldec      go to state 171
    stmt            go to state 172
    funcall         go to state 97
    ret             go to state 173
    vardec          go to state 59
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    arrdec          go to state 60
    matdec          go to state 61
    elementdec      go to state 62
    vectordec       go to state 63
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181


State 242

   72 assign: structaccess MTH_SEQUA expr .

    $default  reduce using rule 72 (assign)


State 243

   73 assign: property MTH_SEQUA expr .

    $default  reduce using rule 73 (assign)


State 244

   55 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 55 (funcallHelper2)


State 245

   52 funcallHelper: expr $@13 funcallHelper2 .

    $default  reduce using rule 52 (funcallHelper)


State 246

   76 structaccess: V_ID $@15 SYM_OBRAC expr SYM_CBRAC $@16 . structIndex

    SYM_OBRAC  shift, and go to state 258

    $default  reduce using rule 77 (structIndex)

    structIndex  go to state 259


State 247

   86 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 86 (matHelper)


State 248

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 260
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 249

   71 assign: V_ID $@14 MTH_SEQUA expr .

    $default  reduce using rule 71 (assign)


State 250

  147 ifHelper: SYM_OPARE expr . SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 261


State 251

  153 ifHelper3: LOG_ELSE . $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 152 ($@41)

    $@41  go to state 262


State 252

  145 if: LOG_IF $@38 ifHelper ifHelper3 .

    $default  reduce using rule 145 (if)


State 253

  158 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 263
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 254

  155 for: LOG_FOR forHelper SYM_ARROW V_ID . $@42 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 154 ($@42)

    $@42  go to state 264


State 255

  161 while: LOG_WHILE $@43 SYM_OPARE expr . SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 265


State 256

   28 funbody: generaldec crlf $@8 funbody .

    $default  reduce using rule 28 (funbody)


State 257

   26 funbody: stmt crlf $@7 funbody .

    $default  reduce using rule 26 (funbody)


State 258

   78 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 266
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 259

   76 structaccess: V_ID $@15 SYM_OBRAC expr SYM_CBRAC $@16 structIndex .

    $default  reduce using rule 76 (structaccess)


State 260

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 267


State 261

  147 ifHelper: SYM_OPARE expr SYM_CPARE . $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 146 ($@39)

    $@39  go to state 268


State 262

  153 ifHelper3: LOG_ELSE $@41 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 269


State 263

  158 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 270


State 264

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 271


State 265

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE . $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 160 ($@44)

    $@44  go to state 272


State 266

   78 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 273


State 267

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 274
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 268

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 275


State 269

  153 ifHelper3: LOG_ELSE $@41 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 276


State 270

  158 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 277
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 271

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 278


State 272

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 15 (optlf)

    crlf   go to state 86
    optlf  go to state 279


State 273

   78 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 78 (structIndex)


State 274

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 280


State 275

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 281


State 276

  153 ifHelper3: LOG_ELSE $@41 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 282


State 277

  158 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 283


State 278

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 284


State 279

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 285


State 280

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 286
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 281

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 287


State 282

  153 ifHelper3: LOG_ELSE $@41 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    stmt            go to state 288
    funcall         go to state 97
    ret             go to state 173
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181
    newlineCicle    go to state 289
    newline         go to state 290


State 283

  158 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 158 (stepfor)


State 284

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    stmt            go to state 288
    funcall         go to state 97
    ret             go to state 173
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181
    newlineCicle    go to state 291
    newline         go to state 290


State 285

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 292


State 286

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 293


State 287

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    stmt            go to state 288
    funcall         go to state 97
    ret             go to state 173
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181
    newlineCicle    go to state 294
    newline         go to state 290


State 288

  164 newline: stmt . crlf

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 295


State 289

  153 ifHelper3: LOG_ELSE $@41 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 296


State 290

  162 newlineCicle: newline .
  163             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    $default  reduce using rule 162 (newlineCicle)

    stmt            go to state 288
    funcall         go to state 97
    ret             go to state 173
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181
    newlineCicle    go to state 297
    newline         go to state 290


State 291

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 298


State 292

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 163
    LOG_IF     shift, and go to state 164
    LOG_FOR    shift, and go to state 165
    LOG_WHILE  shift, and go to state 166
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96
    RES_MEDIT  shift, and go to state 167
    RES_RETRN  shift, and go to state 168

    stmt            go to state 288
    funcall         go to state 97
    ret             go to state 173
    basictypes      go to state 98
    var_or_cte      go to state 99
    assign          go to state 174
    structaccess    go to state 175
    property        go to state 176
    expr            go to state 177
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109
    logicstruct     go to state 178
    if              go to state 179
    for             go to state 180
    while           go to state 181
    newlineCicle    go to state 299
    newline         go to state 290


State 293

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 89
    MTH_NOT    shift, and go to state 90
    V_ID       shift, and go to state 91
    V_CHAR     shift, and go to state 92
    V_STRING   shift, and go to state 93
    V_INT      shift, and go to state 94
    V_DOUBLE   shift, and go to state 95
    V_BOOL     shift, and go to state 96

    funcall         go to state 97
    basictypes      go to state 98
    var_or_cte      go to state 99
    structaccess    go to state 100
    property        go to state 101
    expr            go to state 300
    logicoperation  go to state 103
    logicfactor     go to state 104
    comparison      go to state 105
    operation       go to state 106
    factor          go to state 107
    hvalue          go to state 108
    value           go to state 109


State 294

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 301


State 295

  164 newline: stmt crlf .

    $default  reduce using rule 164 (newline)


State 296

  153 ifHelper3: LOG_ELSE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 153 (ifHelper3)


State 297

  163 newlineCicle: newline newlineCicle .

    $default  reduce using rule 163 (newlineCicle)


State 298

  155 for: LOG_FOR forHelper SYM_ARROW V_ID $@42 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 155 (for)


State 299

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 302


State 300

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 303


State 301

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 304

    $default  reduce using rule 148 (ifHelper2)

    ifHelper2  go to state 305


State 302

  161 while: LOG_WHILE $@43 SYM_OPARE expr SYM_CPARE $@44 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 161 (while)


State 303

   89 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 89 (element)


State 304

  150 ifHelper2: LOG_ELIF . $@40 ifHelper

    $default  reduce using rule 149 ($@40)

    $@40  go to state 306


State 305

  147 ifHelper: SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 147 (ifHelper)


State 306

  150 ifHelper2: LOG_ELIF $@40 . ifHelper

    SYM_OPARE  shift, and go to state 235

    ifHelper  go to state 307


State 307

  150 ifHelper2: LOG_ELIF $@40 ifHelper .

    $default  reduce using rule 150 (ifHelper2)
