Terminals unused in grammar

   F_ID
   M_ID


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty
    4       | assign crlf script
    5       | expr crlf script
    6       | function crlf script
    7       | generaldec crlf script
    8       | crlf script

    9 crlf: CR LF
   10     | LF

   11 optlf: %empty
   12      | crlf

   13 $@1: %empty

   14 $@2: %empty

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

   16 funparams: generaldec morefunparams
   17          | %empty

   18 morefunparams: SYM_COMMA generaldec morefunparams
   19              | %empty

   20 funbody: stmt crlf funbody
   21        | generaldec crlf funbody
   22        | crlf funbody
   23        | %empty

   24 generaldec: vardec
   25           | arrdec
   26           | matdec
   27           | vectordec
   28           | elementdec

   29 $@3: %empty

   30 generaldec: vardec MTH_SEQUA $@3 expr

   31 $@4: %empty

   32 generaldec: arrdec MTH_SEQUA $@4 arr

   33 $@5: %empty

   34 generaldec: matdec MTH_SEQUA $@5 mat

   35 $@6: %empty

   36 generaldec: vectordec MTH_SEQUA $@6 vector

   37 $@7: %empty

   38 generaldec: elementdec MTH_SEQUA $@7 funcall

   39 stmt: assign
   40     | expr
   41     | logicstruct
   42     | RES_MEDIT
   43     | ret

   44 funcall: V_ID SYM_OPARE funcallHelper SYM_CPARE

   45 funcallHelper: %empty
   46              | expr funcallHelper2
   47              | vector funcallHelper2

   48 funcallHelper2: %empty
   49               | SYM_COMMA funcallHelper

   50 ret: RES_RETRN expr

   51 vardec: V_VAR V_ID SYM_COLON vartypes

   52 basictypes: V_CHAR
   53           | V_STRING
   54           | V_FLOAT
   55           | V_DOUBLE
   56           | V_INT
   57           | V_BOOL

   58 vartypes: T_INT
   59         | T_FLOAT
   60         | T_DOUBLE
   61         | T_CHAR
   62         | T_STRING
   63         | T_BOOL

   64 var_or_cte: V_ID
   65           | basictypes

   66 $@8: %empty

   67 $@9: %empty

   68 assign: V_ID $@8 MTH_SEQUA $@9 expr

   69 $@10: %empty

   70 assign: structaccess MTH_SEQUA $@10 expr

   71 $@11: %empty

   72 assign: property MTH_SEQUA $@11 expr

   73 $@12: %empty

   74 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@12 structIndex

   75 structIndex: %empty
   76            | SYM_OBRAC expr SYM_CBRAC

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   78 arr: SYM_OBRAC arrHelper SYM_CBRAC

   79 $@13: %empty

   80 arrHelper: expr SYM_COMMA $@13 arrHelper
   81          | expr

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   83 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   84 matHelper: arr SYM_COMMA optlf matHelper
   85          | arr optlf

   86 elementdec: V_ELEM V_ID

   87 vectordec: V_VECTOR V_ID

   88 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL

   89 property: V_ID SYM_DOT V_ID

   90 $@14: %empty

   91 $@15: %empty

   92 expr: logicoperation $@14 MTH_OR $@15 expr
   93     | logicoperation

   94 $@16: %empty

   95 $@17: %empty

   96 logicoperation: logicfactor $@16 MTH_AND $@17 logicoperation
   97               | logicfactor

   98 $@18: %empty

   99 logicfactor: MTH_NOT $@18 comparison
  100            | comparison

  101 $@19: %empty

  102 comparison: operation comp_operator $@19 operation
  103           | operation

  104 $@20: %empty

  105 $@21: %empty

  106 operation: factor $@20 MTH_PLUS $@21 operation

  107 $@22: %empty

  108 $@23: %empty

  109 operation: factor $@22 MTH_MINUS $@23 operation
  110          | factor

  111 $@24: %empty

  112 $@25: %empty

  113 factor: hvalue $@24 MTH_ASTRK $@25 factor

  114 $@26: %empty

  115 $@27: %empty

  116 factor: hvalue $@26 MTH_DIVIS $@27 factor
  117       | hvalue

  118 $@28: %empty

  119 $@29: %empty

  120 hvalue: value $@28 MTH_POWER $@29 hvalue

  121 $@30: %empty

  122 $@31: %empty

  123 hvalue: value $@30 MTH_ROOT $@31 hvalue
  124       | value

  125 value: var_or_cte
  126      | funcall
  127      | structaccess
  128      | property

  129 $@32: %empty

  130 value: SYM_OPARE $@32 expr SYM_CPARE

  131 comp_operator: MTH_GT
  132              | MTH_GTEQ
  133              | MTH_LT
  134              | MTH_LTEQ
  135              | MTH_DEQUA
  136              | MTH_NOTEQ

  137 logicstruct: if
  138            | for
  139            | while

  140 $@33: %empty

  141 if: LOG_IF $@33 ifHelper ifHelper3

  142 $@34: %empty

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  144 ifHelper2: %empty

  145 $@35: %empty

  146 ifHelper2: LOG_ELIF $@35 ifHelper

  147 ifHelper3: %empty

  148 $@36: %empty

  149 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  150 $@37: %empty

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  152 forHelper: V_ID
  153          | stepfor

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  155 $@38: %empty

  156 $@39: %empty

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  158 newlineCicle: newline
  159             | newline newlineCicle

  160 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 74 76 77 78 82 83 154
SYM_CBRAC (259) 74 76 77 78 82 83 154
SYM_OPARE (260) 15 44 130 143 157
SYM_CPARE (261) 15 44 130 143 157
SYM_OCURL (262) 15 88 143 149 151 157
SYM_CCURL (263) 15 88 143 149 151 157
SYM_COMMA (264) 18 49 80 84 88 154
SYM_ARROW (265) 151
SYM_COLON (266) 15 51 77 82
SYM_DOT (267) 89
MTH_SEQUA (268) 30 32 34 36 38 68 70 72
MTH_DEQUA (269) 135
MTH_GT (270) 131
MTH_LT (271) 133
MTH_GTEQ (272) 132
MTH_LTEQ (273) 134
MTH_NOT (274) 99
MTH_NOTEQ (275) 136
MTH_PLUS (276) 106
MTH_MINUS (277) 109
MTH_ASTRK (278) 113
MTH_DIVIS (279) 116
MTH_POWER (280) 120
MTH_ROOT (281) 123
MTH_AND (282) 96
MTH_OR (283) 92
LF (284) 9 10
CR (285) 9
V_ID (286) 15 44 51 64 68 74 77 82 86 87 89 151 152
F_ID (287)
M_ID (288)
LOG_IF (289) 141
LOG_ELIF (290) 146
LOG_ELSE (291) 149
LOG_FOR (292) 151
LOG_WHILE (293) 157
V_VAR (294) 51
V_CHAR (295) 52
V_STRING (296) 53
V_FLOAT (297) 54
V_INT (298) 56 77 82
V_DOUBLE (299) 55
V_BOOL (300) 57
V_ARR (301) 77
V_MAT (302) 82
V_VECTOR (303) 87
V_ELEM (304) 86
T_BOOL (305) 63
T_INT (306) 58
T_FLOAT (307) 59
T_DOUBLE (308) 60
T_CHAR (309) 61
T_STRING (310) 62
RES_ORDER (311) 15
RES_MEDIT (312) 42
RES_RETRN (313) 50


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
prog (60)
    on left: 1 2, on right: 0
script (61)
    on left: 3 4 5 6 7 8, on right: 1 4 5 6 7 8
crlf (62)
    on left: 9 10, on right: 4 5 6 7 8 12 15 20 21 22 143 149 151 157
    160
optlf (63)
    on left: 11 12, on right: 15 83 84 85 143 149 151 157
function (64)
    on left: 15, on right: 6
$@1 (65)
    on left: 13, on right: 15
$@2 (66)
    on left: 14, on right: 15
funparams (67)
    on left: 16 17, on right: 15
morefunparams (68)
    on left: 18 19, on right: 16 18
funbody (69)
    on left: 20 21 22 23, on right: 15 20 21 22
generaldec (70)
    on left: 24 25 26 27 28 30 32 34 36 38, on right: 7 16 18 21
$@3 (71)
    on left: 29, on right: 30
$@4 (72)
    on left: 31, on right: 32
$@5 (73)
    on left: 33, on right: 34
$@6 (74)
    on left: 35, on right: 36
$@7 (75)
    on left: 37, on right: 38
stmt (76)
    on left: 39 40 41 42 43, on right: 20 160
funcall (77)
    on left: 44, on right: 38 126
funcallHelper (78)
    on left: 45 46 47, on right: 44 49
funcallHelper2 (79)
    on left: 48 49, on right: 46 47
ret (80)
    on left: 50, on right: 43
vardec (81)
    on left: 51, on right: 24 30
basictypes (82)
    on left: 52 53 54 55 56 57, on right: 65
vartypes (83)
    on left: 58 59 60 61 62 63, on right: 15 51 77 82
var_or_cte (84)
    on left: 64 65, on right: 125
assign (85)
    on left: 68 70 72, on right: 4 39
$@8 (86)
    on left: 66, on right: 68
$@9 (87)
    on left: 67, on right: 68
$@10 (88)
    on left: 69, on right: 70
$@11 (89)
    on left: 71, on right: 72
structaccess (90)
    on left: 74, on right: 70 127
$@12 (91)
    on left: 73, on right: 74
structIndex (92)
    on left: 75 76, on right: 74
arrdec (93)
    on left: 77, on right: 25 32
arr (94)
    on left: 78, on right: 32 84 85
arrHelper (95)
    on left: 80 81, on right: 78 80
$@13 (96)
    on left: 79, on right: 80
matdec (97)
    on left: 82, on right: 26 34
mat (98)
    on left: 83, on right: 34
matHelper (99)
    on left: 84 85, on right: 83 84
elementdec (100)
    on left: 86, on right: 28 38
vectordec (101)
    on left: 87, on right: 27 36
vector (102)
    on left: 88, on right: 36 47
property (103)
    on left: 89, on right: 72 128
expr (104)
    on left: 92 93, on right: 5 30 40 46 50 68 70 72 74 76 80 81 88
    92 130 143 154 157
$@14 (105)
    on left: 90, on right: 92
$@15 (106)
    on left: 91, on right: 92
logicoperation (107)
    on left: 96 97, on right: 92 93 96
$@16 (108)
    on left: 94, on right: 96
$@17 (109)
    on left: 95, on right: 96
logicfactor (110)
    on left: 99 100, on right: 96 97
$@18 (111)
    on left: 98, on right: 99
comparison (112)
    on left: 102 103, on right: 99 100
$@19 (113)
    on left: 101, on right: 102
operation (114)
    on left: 106 109 110, on right: 102 103 106 109
$@20 (115)
    on left: 104, on right: 106
$@21 (116)
    on left: 105, on right: 106
$@22 (117)
    on left: 107, on right: 109
$@23 (118)
    on left: 108, on right: 109
factor (119)
    on left: 113 116 117, on right: 106 109 110 113 116
$@24 (120)
    on left: 111, on right: 113
$@25 (121)
    on left: 112, on right: 113
$@26 (122)
    on left: 114, on right: 116
$@27 (123)
    on left: 115, on right: 116
hvalue (124)
    on left: 120 123 124, on right: 113 116 117 120 123
$@28 (125)
    on left: 118, on right: 120
$@29 (126)
    on left: 119, on right: 120
$@30 (127)
    on left: 121, on right: 123
$@31 (128)
    on left: 122, on right: 123
value (129)
    on left: 125 126 127 128 130, on right: 120 123 124
$@32 (130)
    on left: 129, on right: 130
comp_operator (131)
    on left: 131 132 133 134 135 136, on right: 102
logicstruct (132)
    on left: 137 138 139, on right: 41
if (133)
    on left: 141, on right: 137
$@33 (134)
    on left: 140, on right: 141
ifHelper (135)
    on left: 143, on right: 141 146
$@34 (136)
    on left: 142, on right: 143
ifHelper2 (137)
    on left: 144 146, on right: 143
$@35 (138)
    on left: 145, on right: 146
ifHelper3 (139)
    on left: 147 149, on right: 141
$@36 (140)
    on left: 148, on right: 149
for (141)
    on left: 151, on right: 138
$@37 (142)
    on left: 150, on right: 151
forHelper (143)
    on left: 152 153, on right: 151
stepfor (144)
    on left: 154, on right: 153
while (145)
    on left: 157, on right: 139
$@38 (146)
    on left: 155, on right: 157
$@39 (147)
    on left: 156, on right: 157
newlineCicle (148)
    on left: 158 159, on right: 143 149 151 157 159
newline (149)
    on left: 160, on right: 158 159


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $end  reduce using rule 3 (script)

    prog            go to state 19
    script          go to state 20
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

  130 value: SYM_OPARE . $@32 expr SYM_CPARE

    $default  reduce using rule 129 ($@32)

    $@32  go to state 43


State 3

   99 logicfactor: MTH_NOT . $@18 comparison

    $default  reduce using rule 98 ($@18)

    $@18  go to state 44


State 4

   10 crlf: LF .

    $default  reduce using rule 10 (crlf)


State 5

    9 crlf: CR . LF

    LF  shift, and go to state 45


State 6

   44 funcall: V_ID . SYM_OPARE funcallHelper SYM_CPARE
   64 var_or_cte: V_ID .
   68 assign: V_ID . $@8 MTH_SEQUA $@9 expr
   74 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@12 structIndex
   89 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 46
    SYM_OPARE  shift, and go to state 47
    SYM_DOT    shift, and go to state 48

    MTH_SEQUA  reduce using rule 66 ($@8)
    $default   reduce using rule 64 (var_or_cte)

    $@8  go to state 49


State 7

   51 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 50


State 8

   52 basictypes: V_CHAR .

    $default  reduce using rule 52 (basictypes)


State 9

   53 basictypes: V_STRING .

    $default  reduce using rule 53 (basictypes)


State 10

   54 basictypes: V_FLOAT .

    $default  reduce using rule 54 (basictypes)


State 11

   56 basictypes: V_INT .

    $default  reduce using rule 56 (basictypes)


State 12

   55 basictypes: V_DOUBLE .

    $default  reduce using rule 55 (basictypes)


State 13

   57 basictypes: V_BOOL .

    $default  reduce using rule 57 (basictypes)


State 14

   77 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 51


State 15

   82 matdec: V_MAT . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 52


State 16

   87 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 53


State 17

   86 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 54


State 18

   15 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 55


State 19

    0 $accept: prog . $end

    $end  shift, and go to state 56


State 20

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 21

    8 script: crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 57
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 22

    6 script: function . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 58


State 23

    7 script: generaldec . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 59


State 24

  126 value: funcall .

    $default  reduce using rule 126 (value)


State 25

   24 generaldec: vardec .
   30           | vardec . MTH_SEQUA $@3 expr

    MTH_SEQUA  shift, and go to state 60

    $default  reduce using rule 24 (generaldec)


State 26

   65 var_or_cte: basictypes .

    $default  reduce using rule 65 (var_or_cte)


State 27

  125 value: var_or_cte .

    $default  reduce using rule 125 (value)


State 28

    4 script: assign . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 61


State 29

   70 assign: structaccess . MTH_SEQUA $@10 expr
  127 value: structaccess .

    MTH_SEQUA  shift, and go to state 62

    $default  reduce using rule 127 (value)


State 30

   25 generaldec: arrdec .
   32           | arrdec . MTH_SEQUA $@4 arr

    MTH_SEQUA  shift, and go to state 63

    $default  reduce using rule 25 (generaldec)


State 31

   26 generaldec: matdec .
   34           | matdec . MTH_SEQUA $@5 mat

    MTH_SEQUA  shift, and go to state 64

    $default  reduce using rule 26 (generaldec)


State 32

   28 generaldec: elementdec .
   38           | elementdec . MTH_SEQUA $@7 funcall

    MTH_SEQUA  shift, and go to state 65

    $default  reduce using rule 28 (generaldec)


State 33

   27 generaldec: vectordec .
   36           | vectordec . MTH_SEQUA $@6 vector

    MTH_SEQUA  shift, and go to state 66

    $default  reduce using rule 27 (generaldec)


State 34

   72 assign: property . MTH_SEQUA $@11 expr
  128 value: property .

    MTH_SEQUA  shift, and go to state 67

    $default  reduce using rule 128 (value)


State 35

    5 script: expr . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 68


State 36

   92 expr: logicoperation . $@14 MTH_OR $@15 expr
   93     | logicoperation .

    MTH_OR    reduce using rule 90 ($@14)
    $default  reduce using rule 93 (expr)

    $@14  go to state 69


State 37

   96 logicoperation: logicfactor . $@16 MTH_AND $@17 logicoperation
   97               | logicfactor .

    MTH_AND   reduce using rule 94 ($@16)
    $default  reduce using rule 97 (logicoperation)

    $@16  go to state 70


State 38

  100 logicfactor: comparison .

    $default  reduce using rule 100 (logicfactor)


State 39

  102 comparison: operation . comp_operator $@19 operation
  103           | operation .

    MTH_DEQUA  shift, and go to state 71
    MTH_GT     shift, and go to state 72
    MTH_LT     shift, and go to state 73
    MTH_GTEQ   shift, and go to state 74
    MTH_LTEQ   shift, and go to state 75
    MTH_NOTEQ  shift, and go to state 76

    $default  reduce using rule 103 (comparison)

    comp_operator  go to state 77


State 40

  106 operation: factor . $@20 MTH_PLUS $@21 operation
  109          | factor . $@22 MTH_MINUS $@23 operation
  110          | factor .

    MTH_PLUS   reduce using rule 104 ($@20)
    MTH_MINUS  reduce using rule 107 ($@22)
    $default   reduce using rule 110 (operation)

    $@20  go to state 78
    $@22  go to state 79


State 41

  113 factor: hvalue . $@24 MTH_ASTRK $@25 factor
  116       | hvalue . $@26 MTH_DIVIS $@27 factor
  117       | hvalue .

    MTH_ASTRK  reduce using rule 111 ($@24)
    MTH_DIVIS  reduce using rule 114 ($@26)
    $default   reduce using rule 117 (factor)

    $@24  go to state 80
    $@26  go to state 81


State 42

  120 hvalue: value . $@28 MTH_POWER $@29 hvalue
  123       | value . $@30 MTH_ROOT $@31 hvalue
  124       | value .

    MTH_POWER  reduce using rule 118 ($@28)
    MTH_ROOT   reduce using rule 121 ($@30)
    $default   reduce using rule 124 (hvalue)

    $@28  go to state 82
    $@30  go to state 83


State 43

  130 value: SYM_OPARE $@32 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 87
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 44

   99 logicfactor: MTH_NOT $@18 . comparison

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    comparison    go to state 88
    operation     go to state 39
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 45

    9 crlf: CR LF .

    $default  reduce using rule 9 (crlf)


State 46

   74 structaccess: V_ID SYM_OBRAC . expr SYM_CBRAC $@12 structIndex

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 89
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 47

   44 funcall: V_ID SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 90
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    $default  reduce using rule 45 (funcallHelper)

    funcall         go to state 24
    funcallHelper   go to state 91
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    vector          go to state 92
    property        go to state 86
    expr            go to state 93
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 48

   89 property: V_ID SYM_DOT . V_ID

    V_ID  shift, and go to state 94


State 49

   68 assign: V_ID $@8 . MTH_SEQUA $@9 expr

    MTH_SEQUA  shift, and go to state 95


State 50

   51 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 96


State 51

   77 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 97


State 52

   82 matdec: V_MAT V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 98


State 53

   87 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 87 (vectordec)


State 54

   86 elementdec: V_ELEM V_ID .

    $default  reduce using rule 86 (elementdec)


State 55

   15 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 99


State 56

    0 $accept: prog $end .

    $default  accept


State 57

    8 script: crlf script .

    $default  reduce using rule 8 (script)


State 58

    6 script: function crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 100
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 59

    7 script: generaldec crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 101
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 60

   30 generaldec: vardec MTH_SEQUA . $@3 expr

    $default  reduce using rule 29 ($@3)

    $@3  go to state 102


State 61

    4 script: assign crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 103
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 62

   70 assign: structaccess MTH_SEQUA . $@10 expr

    $default  reduce using rule 69 ($@10)

    $@10  go to state 104


State 63

   32 generaldec: arrdec MTH_SEQUA . $@4 arr

    $default  reduce using rule 31 ($@4)

    $@4  go to state 105


State 64

   34 generaldec: matdec MTH_SEQUA . $@5 mat

    $default  reduce using rule 33 ($@5)

    $@5  go to state 106


State 65

   38 generaldec: elementdec MTH_SEQUA . $@7 funcall

    $default  reduce using rule 37 ($@7)

    $@7  go to state 107


State 66

   36 generaldec: vectordec MTH_SEQUA . $@6 vector

    $default  reduce using rule 35 ($@6)

    $@6  go to state 108


State 67

   72 assign: property MTH_SEQUA . $@11 expr

    $default  reduce using rule 71 ($@11)

    $@11  go to state 109


State 68

    5 script: expr crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_ORDER  shift, and go to state 18

    $default  reduce using rule 3 (script)

    script          go to state 110
    crlf            go to state 21
    function        go to state 22
    generaldec      go to state 23
    funcall         go to state 24
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 28
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 35
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 69

   92 expr: logicoperation $@14 . MTH_OR $@15 expr

    MTH_OR  shift, and go to state 111


State 70

   96 logicoperation: logicfactor $@16 . MTH_AND $@17 logicoperation

    MTH_AND  shift, and go to state 112


State 71

  135 comp_operator: MTH_DEQUA .

    $default  reduce using rule 135 (comp_operator)


State 72

  131 comp_operator: MTH_GT .

    $default  reduce using rule 131 (comp_operator)


State 73

  133 comp_operator: MTH_LT .

    $default  reduce using rule 133 (comp_operator)


State 74

  132 comp_operator: MTH_GTEQ .

    $default  reduce using rule 132 (comp_operator)


State 75

  134 comp_operator: MTH_LTEQ .

    $default  reduce using rule 134 (comp_operator)


State 76

  136 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 136 (comp_operator)


State 77

  102 comparison: operation comp_operator . $@19 operation

    $default  reduce using rule 101 ($@19)

    $@19  go to state 113


State 78

  106 operation: factor $@20 . MTH_PLUS $@21 operation

    MTH_PLUS  shift, and go to state 114


State 79

  109 operation: factor $@22 . MTH_MINUS $@23 operation

    MTH_MINUS  shift, and go to state 115


State 80

  113 factor: hvalue $@24 . MTH_ASTRK $@25 factor

    MTH_ASTRK  shift, and go to state 116


State 81

  116 factor: hvalue $@26 . MTH_DIVIS $@27 factor

    MTH_DIVIS  shift, and go to state 117


State 82

  120 hvalue: value $@28 . MTH_POWER $@29 hvalue

    MTH_POWER  shift, and go to state 118


State 83

  123 hvalue: value $@30 . MTH_ROOT $@31 hvalue

    MTH_ROOT  shift, and go to state 119


State 84

   44 funcall: V_ID . SYM_OPARE funcallHelper SYM_CPARE
   64 var_or_cte: V_ID .
   74 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@12 structIndex
   89 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 46
    SYM_OPARE  shift, and go to state 47
    SYM_DOT    shift, and go to state 48

    $default  reduce using rule 64 (var_or_cte)


State 85

  127 value: structaccess .

    $default  reduce using rule 127 (value)


State 86

  128 value: property .

    $default  reduce using rule 128 (value)


State 87

  130 value: SYM_OPARE $@32 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 120


State 88

   99 logicfactor: MTH_NOT $@18 comparison .

    $default  reduce using rule 99 (logicfactor)


State 89

   74 structaccess: V_ID SYM_OBRAC expr . SYM_CBRAC $@12 structIndex

    SYM_CBRAC  shift, and go to state 121


State 90

   88 vector: SYM_OCURL . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 122
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 91

   44 funcall: V_ID SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 123


State 92

   47 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 124

    $default  reduce using rule 48 (funcallHelper2)

    funcallHelper2  go to state 125


State 93

   46 funcallHelper: expr . funcallHelper2

    SYM_COMMA  shift, and go to state 124

    $default  reduce using rule 48 (funcallHelper2)

    funcallHelper2  go to state 126


State 94

   89 property: V_ID SYM_DOT V_ID .

    $default  reduce using rule 89 (property)


State 95

   68 assign: V_ID $@8 MTH_SEQUA . $@9 expr

    $default  reduce using rule 67 ($@9)

    $@9  go to state 127


State 96

   51 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 134


State 97

   77 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 135


State 98

   82 matdec: V_MAT V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 136


State 99

   15 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 128
    T_INT     shift, and go to state 129
    T_FLOAT   shift, and go to state 130
    T_DOUBLE  shift, and go to state 131
    T_CHAR    shift, and go to state 132
    T_STRING  shift, and go to state 133

    vartypes  go to state 137


State 100

    6 script: function crlf script .

    $default  reduce using rule 6 (script)


State 101

    7 script: generaldec crlf script .

    $default  reduce using rule 7 (script)


State 102

   30 generaldec: vardec MTH_SEQUA $@3 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 138
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 103

    4 script: assign crlf script .

    $default  reduce using rule 4 (script)


State 104

   70 assign: structaccess MTH_SEQUA $@10 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 139
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 105

   32 generaldec: arrdec MTH_SEQUA $@4 . arr

    SYM_OBRAC  shift, and go to state 140

    arr  go to state 141


State 106

   34 generaldec: matdec MTH_SEQUA $@5 . mat

    SYM_OBRAC  shift, and go to state 142

    mat  go to state 143


State 107

   38 generaldec: elementdec MTH_SEQUA $@7 . funcall

    V_ID  shift, and go to state 144

    funcall  go to state 145


State 108

   36 generaldec: vectordec MTH_SEQUA $@6 . vector

    SYM_OCURL  shift, and go to state 90

    vector  go to state 146


State 109

   72 assign: property MTH_SEQUA $@11 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 147
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 110

    5 script: expr crlf script .

    $default  reduce using rule 5 (script)


State 111

   92 expr: logicoperation $@14 MTH_OR . $@15 expr

    $default  reduce using rule 91 ($@15)

    $@15  go to state 148


State 112

   96 logicoperation: logicfactor $@16 MTH_AND . $@17 logicoperation

    $default  reduce using rule 95 ($@17)

    $@17  go to state 149


State 113

  102 comparison: operation comp_operator $@19 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 150
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 114

  106 operation: factor $@20 MTH_PLUS . $@21 operation

    $default  reduce using rule 105 ($@21)

    $@21  go to state 151


State 115

  109 operation: factor $@22 MTH_MINUS . $@23 operation

    $default  reduce using rule 108 ($@23)

    $@23  go to state 152


State 116

  113 factor: hvalue $@24 MTH_ASTRK . $@25 factor

    $default  reduce using rule 112 ($@25)

    $@25  go to state 153


State 117

  116 factor: hvalue $@26 MTH_DIVIS . $@27 factor

    $default  reduce using rule 115 ($@27)

    $@27  go to state 154


State 118

  120 hvalue: value $@28 MTH_POWER . $@29 hvalue

    $default  reduce using rule 119 ($@29)

    $@29  go to state 155


State 119

  123 hvalue: value $@30 MTH_ROOT . $@31 hvalue

    $default  reduce using rule 122 ($@31)

    $@31  go to state 156


State 120

  130 value: SYM_OPARE $@32 expr SYM_CPARE .

    $default  reduce using rule 130 (value)


State 121

   74 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC . $@12 structIndex

    $default  reduce using rule 73 ($@12)

    $@12  go to state 157


State 122

   88 vector: SYM_OCURL expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 158


State 123

   44 funcall: V_ID SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 44 (funcall)


State 124

   49 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 90
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    $default  reduce using rule 45 (funcallHelper)

    funcall         go to state 24
    funcallHelper   go to state 159
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    vector          go to state 92
    property        go to state 86
    expr            go to state 93
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 125

   47 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 47 (funcallHelper)


State 126

   46 funcallHelper: expr funcallHelper2 .

    $default  reduce using rule 46 (funcallHelper)


State 127

   68 assign: V_ID $@8 MTH_SEQUA $@9 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 160
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 128

   63 vartypes: T_BOOL .

    $default  reduce using rule 63 (vartypes)


State 129

   58 vartypes: T_INT .

    $default  reduce using rule 58 (vartypes)


State 130

   59 vartypes: T_FLOAT .

    $default  reduce using rule 59 (vartypes)


State 131

   60 vartypes: T_DOUBLE .

    $default  reduce using rule 60 (vartypes)


State 132

   61 vartypes: T_CHAR .

    $default  reduce using rule 61 (vartypes)


State 133

   62 vartypes: T_STRING .

    $default  reduce using rule 62 (vartypes)


State 134

   51 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 51 (vardec)


State 135

   77 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 161


State 136

   82 matdec: V_MAT V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 162


State 137

   15 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 163


State 138

   30 generaldec: vardec MTH_SEQUA $@3 expr .

    $default  reduce using rule 30 (generaldec)


State 139

   70 assign: structaccess MTH_SEQUA $@10 expr .

    $default  reduce using rule 70 (assign)


State 140

   78 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    arrHelper       go to state 164
    property        go to state 86
    expr            go to state 165
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 141

   32 generaldec: arrdec MTH_SEQUA $@4 arr .

    $default  reduce using rule 32 (generaldec)


State 142

   83 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 167


State 143

   34 generaldec: matdec MTH_SEQUA $@5 mat .

    $default  reduce using rule 34 (generaldec)


State 144

   44 funcall: V_ID . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 47


State 145

   38 generaldec: elementdec MTH_SEQUA $@7 funcall .

    $default  reduce using rule 38 (generaldec)


State 146

   36 generaldec: vectordec MTH_SEQUA $@6 vector .

    $default  reduce using rule 36 (generaldec)


State 147

   72 assign: property MTH_SEQUA $@11 expr .

    $default  reduce using rule 72 (assign)


State 148

   92 expr: logicoperation $@14 MTH_OR $@15 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 168
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 149

   96 logicoperation: logicfactor $@16 MTH_AND $@17 . logicoperation

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    logicoperation  go to state 169
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 150

  102 comparison: operation comp_operator $@19 operation .

    $default  reduce using rule 102 (comparison)


State 151

  106 operation: factor $@20 MTH_PLUS $@21 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 170
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 152

  109 operation: factor $@22 MTH_MINUS $@23 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 171
    factor        go to state 40
    hvalue        go to state 41
    value         go to state 42


State 153

  113 factor: hvalue $@24 MTH_ASTRK $@25 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 172
    hvalue        go to state 41
    value         go to state 42


State 154

  116 factor: hvalue $@26 MTH_DIVIS $@27 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 173
    hvalue        go to state 41
    value         go to state 42


State 155

  120 hvalue: value $@28 MTH_POWER $@29 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 174
    value         go to state 42


State 156

  123 hvalue: value $@30 MTH_ROOT $@31 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall       go to state 24
    basictypes    go to state 26
    var_or_cte    go to state 27
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 175
    value         go to state 42


State 157

   74 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@12 . structIndex

    SYM_OBRAC  shift, and go to state 176

    $default  reduce using rule 75 (structIndex)

    structIndex  go to state 177


State 158

   88 vector: SYM_OCURL expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 178
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 159

   49 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 49 (funcallHelper2)


State 160

   68 assign: V_ID $@8 MTH_SEQUA $@9 expr .

    $default  reduce using rule 68 (assign)


State 161

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 179


State 162

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 180


State 163

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 13 ($@1)

    $@1  go to state 181


State 164

   78 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 182


State 165

   80 arrHelper: expr . SYM_COMMA $@13 arrHelper
   81          | expr .

    SYM_COMMA  shift, and go to state 183

    $default  reduce using rule 81 (arrHelper)


State 166

   12 optlf: crlf .

    $default  reduce using rule 12 (optlf)


State 167

   83 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 140

    arr        go to state 184
    matHelper  go to state 185


State 168

   92 expr: logicoperation $@14 MTH_OR $@15 expr .

    $default  reduce using rule 92 (expr)


State 169

   96 logicoperation: logicfactor $@16 MTH_AND $@17 logicoperation .

    $default  reduce using rule 96 (logicoperation)


State 170

  106 operation: factor $@20 MTH_PLUS $@21 operation .

    $default  reduce using rule 106 (operation)


State 171

  109 operation: factor $@22 MTH_MINUS $@23 operation .

    $default  reduce using rule 109 (operation)


State 172

  113 factor: hvalue $@24 MTH_ASTRK $@25 factor .

    $default  reduce using rule 113 (factor)


State 173

  116 factor: hvalue $@26 MTH_DIVIS $@27 factor .

    $default  reduce using rule 116 (factor)


State 174

  120 hvalue: value $@28 MTH_POWER $@29 hvalue .

    $default  reduce using rule 120 (hvalue)


State 175

  123 hvalue: value $@30 MTH_ROOT $@31 hvalue .

    $default  reduce using rule 123 (hvalue)


State 176

   76 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 186
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 177

   74 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@12 structIndex .

    $default  reduce using rule 74 (structaccess)


State 178

   88 vector: SYM_OCURL expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 187


State 179

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 188


State 180

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 189


State 181

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 . funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 14
    V_MAT     shift, and go to state 15
    V_VECTOR  shift, and go to state 16
    V_ELEM    shift, and go to state 17

    $default  reduce using rule 17 (funparams)

    funparams   go to state 190
    generaldec  go to state 191
    vardec      go to state 25
    arrdec      go to state 30
    matdec      go to state 31
    elementdec  go to state 32
    vectordec   go to state 33


State 182

   78 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 78 (arr)


State 183

   80 arrHelper: expr SYM_COMMA . $@13 arrHelper

    $default  reduce using rule 79 ($@13)

    $@13  go to state 192


State 184

   84 matHelper: arr . SYM_COMMA optlf matHelper
   85          | arr . optlf

    SYM_COMMA  shift, and go to state 193
    LF         shift, and go to state 4
    CR         shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 194


State 185

   83 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 195


State 186

   76 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 196


State 187

   88 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 88 (vector)


State 188

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 77 (arrdec)


State 189

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 197


State 190

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams . SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 198


State 191

   16 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 199

    $default  reduce using rule 19 (morefunparams)

    morefunparams  go to state 200


State 192

   80 arrHelper: expr SYM_COMMA $@13 . arrHelper

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    arrHelper       go to state 201
    property        go to state 86
    expr            go to state 165
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 193

   84 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 202


State 194

   85 matHelper: arr optlf .

    $default  reduce using rule 85 (matHelper)


State 195

   83 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 83 (mat)


State 196

   76 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 76 (structIndex)


State 197

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 203


State 198

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE . $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 14 ($@2)

    $@2  go to state 204


State 199

   18 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 14
    V_MAT     shift, and go to state 15
    V_VECTOR  shift, and go to state 16
    V_ELEM    shift, and go to state 17

    generaldec  go to state 205
    vardec      go to state 25
    arrdec      go to state 30
    matdec      go to state 31
    elementdec  go to state 32
    vectordec   go to state 33


State 200

   16 funparams: generaldec morefunparams .

    $default  reduce using rule 16 (funparams)


State 201

   80 arrHelper: expr SYM_COMMA $@13 arrHelper .

    $default  reduce using rule 80 (arrHelper)


State 202

   84 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 140

    arr        go to state 184
    matHelper  go to state 206


State 203

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 207


State 204

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 208


State 205

   18 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 199

    $default  reduce using rule 19 (morefunparams)

    morefunparams  go to state 209


State 206

   84 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 84 (matHelper)


State 207

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 82 (matdec)


State 208

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 210


State 209

   18 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 18 (morefunparams)


State 210

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 211


State 211

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 23 (funbody)

    crlf            go to state 217
    funbody         go to state 218
    generaldec      go to state 219
    stmt            go to state 220
    funcall         go to state 24
    ret             go to state 221
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227


State 212

  141 if: LOG_IF . $@33 ifHelper ifHelper3

    $default  reduce using rule 140 ($@33)

    $@33  go to state 228


State 213

  151 for: LOG_FOR . forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 229
    V_ID       shift, and go to state 230

    forHelper  go to state 231
    stepfor    go to state 232


State 214

  157 while: LOG_WHILE . $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 155 ($@38)

    $@38  go to state 233


State 215

   42 stmt: RES_MEDIT .

    $default  reduce using rule 42 (stmt)


State 216

   50 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 234
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 217

   22 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 23 (funbody)

    crlf            go to state 217
    funbody         go to state 235
    generaldec      go to state 219
    stmt            go to state 220
    funcall         go to state 24
    ret             go to state 221
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227


State 218

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 236


State 219

   21 funbody: generaldec . crlf funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 237


State 220

   20 funbody: stmt . crlf funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 238


State 221

   43 stmt: ret .

    $default  reduce using rule 43 (stmt)


State 222

   39 stmt: assign .

    $default  reduce using rule 39 (stmt)


State 223

   40 stmt: expr .

    $default  reduce using rule 40 (stmt)


State 224

   41 stmt: logicstruct .

    $default  reduce using rule 41 (stmt)


State 225

  137 logicstruct: if .

    $default  reduce using rule 137 (logicstruct)


State 226

  138 logicstruct: for .

    $default  reduce using rule 138 (logicstruct)


State 227

  139 logicstruct: while .

    $default  reduce using rule 139 (logicstruct)


State 228

  141 if: LOG_IF $@33 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 239

    ifHelper  go to state 240


State 229

  154 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 241
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 230

  152 forHelper: V_ID .

    $default  reduce using rule 152 (forHelper)


State 231

  151 for: LOG_FOR forHelper . SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 242


State 232

  153 forHelper: stepfor .

    $default  reduce using rule 153 (forHelper)


State 233

  157 while: LOG_WHILE $@38 . SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 243


State 234

   50 ret: RES_RETRN expr .

    $default  reduce using rule 50 (ret)


State 235

   22 funbody: crlf funbody .

    $default  reduce using rule 22 (funbody)


State 236

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 15 (function)


State 237

   21 funbody: generaldec crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 23 (funbody)

    crlf            go to state 217
    funbody         go to state 244
    generaldec      go to state 219
    stmt            go to state 220
    funcall         go to state 24
    ret             go to state 221
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227


State 238

   20 funbody: stmt crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    V_ARR      shift, and go to state 14
    V_MAT      shift, and go to state 15
    V_VECTOR   shift, and go to state 16
    V_ELEM     shift, and go to state 17
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 23 (funbody)

    crlf            go to state 217
    funbody         go to state 245
    generaldec      go to state 219
    stmt            go to state 220
    funcall         go to state 24
    ret             go to state 221
    vardec          go to state 25
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    arrdec          go to state 30
    matdec          go to state 31
    elementdec      go to state 32
    vectordec       go to state 33
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227


State 239

  143 ifHelper: SYM_OPARE . expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 246
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 240

  141 if: LOG_IF $@33 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 247

    $default  reduce using rule 147 (ifHelper3)

    ifHelper3  go to state 248


State 241

  154 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 249


State 242

  151 for: LOG_FOR forHelper SYM_ARROW . V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 250


State 243

  157 while: LOG_WHILE $@38 SYM_OPARE . expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 251
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 244

   21 funbody: generaldec crlf funbody .

    $default  reduce using rule 21 (funbody)


State 245

   20 funbody: stmt crlf funbody .

    $default  reduce using rule 20 (funbody)


State 246

  143 ifHelper: SYM_OPARE expr . SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 252


State 247

  149 ifHelper3: LOG_ELSE . $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 148 ($@36)

    $@36  go to state 253


State 248

  141 if: LOG_IF $@33 ifHelper ifHelper3 .

    $default  reduce using rule 141 (if)


State 249

  154 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 254
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 250

  151 for: LOG_FOR forHelper SYM_ARROW V_ID . $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 150 ($@37)

    $@37  go to state 255


State 251

  157 while: LOG_WHILE $@38 SYM_OPARE expr . SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 256


State 252

  143 ifHelper: SYM_OPARE expr SYM_CPARE . $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 142 ($@34)

    $@34  go to state 257


State 253

  149 ifHelper3: LOG_ELSE $@36 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 258


State 254

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 259


State 255

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 260


State 256

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE . $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 156 ($@39)

    $@39  go to state 261


State 257

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 262


State 258

  149 ifHelper3: LOG_ELSE $@36 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 263


State 259

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 84
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13

    funcall         go to state 24
    basictypes      go to state 26
    var_or_cte      go to state 27
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 264
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42


State 260

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 265


State 261

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 166
    optlf  go to state 266


State 262

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 267


State 263

  149 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 268


State 264

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 269


State 265

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 270


State 266

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 271


State 267

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 272


State 268

  149 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 273
    funcall         go to state 24
    ret             go to state 221
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227
    newlineCicle    go to state 274
    newline         go to state 275


State 269

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 154 (stepfor)


State 270

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 273
    funcall         go to state 24
    ret             go to state 221
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227
    newlineCicle    go to state 276
    newline         go to state 275


State 271

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 277


State 272

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 273
    funcall         go to state 24
    ret             go to state 221
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227
    newlineCicle    go to state 278
    newline         go to state 275


State 273

  160 newline: stmt . crlf

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 279


State 274

  149 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 280


State 275

  158 newlineCicle: newline .
  159             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    $default  reduce using rule 158 (newlineCicle)

    stmt            go to state 273
    funcall         go to state 24
    ret             go to state 221
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227
    newlineCicle    go to state 281
    newline         go to state 275


State 276

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 282


State 277

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 212
    LOG_FOR    shift, and go to state 213
    LOG_WHILE  shift, and go to state 214
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_FLOAT    shift, and go to state 10
    V_INT      shift, and go to state 11
    V_DOUBLE   shift, and go to state 12
    V_BOOL     shift, and go to state 13
    RES_MEDIT  shift, and go to state 215
    RES_RETRN  shift, and go to state 216

    stmt            go to state 273
    funcall         go to state 24
    ret             go to state 221
    basictypes      go to state 26
    var_or_cte      go to state 27
    assign          go to state 222
    structaccess    go to state 29
    property        go to state 34
    expr            go to state 223
    logicoperation  go to state 36
    logicfactor     go to state 37
    comparison      go to state 38
    operation       go to state 39
    factor          go to state 40
    hvalue          go to state 41
    value           go to state 42
    logicstruct     go to state 224
    if              go to state 225
    for             go to state 226
    while           go to state 227
    newlineCicle    go to state 283
    newline         go to state 275


State 278

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 284


State 279

  160 newline: stmt crlf .

    $default  reduce using rule 160 (newline)


State 280

  149 ifHelper3: LOG_ELSE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 149 (ifHelper3)


State 281

  159 newlineCicle: newline newlineCicle .

    $default  reduce using rule 159 (newlineCicle)


State 282

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 151 (for)


State 283

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 285


State 284

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 286

    $default  reduce using rule 144 (ifHelper2)

    ifHelper2  go to state 287


State 285

  157 while: LOG_WHILE $@38 SYM_OPARE expr SYM_CPARE $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 157 (while)


State 286

  146 ifHelper2: LOG_ELIF . $@35 ifHelper

    $default  reduce using rule 145 ($@35)

    $@35  go to state 288


State 287

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@34 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 143 (ifHelper)


State 288

  146 ifHelper2: LOG_ELIF $@35 . ifHelper

    SYM_OPARE  shift, and go to state 239

    ifHelper  go to state 289


State 289

  146 ifHelper2: LOG_ELIF $@35 ifHelper .

    $default  reduce using rule 146 (ifHelper2)
