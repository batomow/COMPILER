Terminals unused in grammar

   F_ID
   M_ID
   T_FLOAT


State 215 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty
    4       | assign crlf script
    5       | expr crlf script
    6       | function crlf script
    7       | generaldec crlf script
    8       | crlf script

    9 crlf: CR LF
   10     | LF

   11 optlf: %empty
   12      | crlf

   13 $@1: %empty

   14 $@2: %empty

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

   16 funparams: generaldec morefunparams
   17          | %empty

   18 morefunparams: SYM_COMMA generaldec morefunparams
   19              | %empty

   20 funbody: stmt crlf funbody
   21        | generaldec crlf funbody
   22        | funcall crlf funbody
   23        | crlf funbody
   24        | %empty

   25 generaldec: vardec
   26           | arrdec
   27           | matdec
   28           | vectordec
   29           | elementdec

   30 $@3: %empty

   31 generaldec: vardec $@3 MTH_SEQUA expr
   32           | arrdec MTH_SEQUA arr
   33           | matdec MTH_SEQUA mat
   34           | vectordec MTH_SEQUA vector
   35           | elementdec MTH_SEQUA funcall

   36 stmt: assign
   37     | expr
   38     | logicstruct
   39     | RES_MEDIT
   40     | ret

   41 $@4: %empty

   42 funcall: V_ID $@4 SYM_OPARE funcallHelper SYM_CPARE

   43 funcallHelper: %empty

   44 $@5: %empty

   45 funcallHelper: expr $@5 funcallHelper2
   46              | vector funcallHelper2

   47 funcallHelper2: %empty
   48               | SYM_COMMA funcallHelper

   49 ret: RES_RETRN expr

   50 vardec: V_VAR V_ID SYM_COLON vartypes

   51 basictypes: V_CHAR
   52           | V_STRING
   53           | V_DOUBLE
   54           | V_INT
   55           | V_BOOL

   56 vartypes: T_INT
   57         | T_DOUBLE
   58         | T_CHAR
   59         | T_STRING
   60         | T_BOOL

   61 var_or_cte: V_ID
   62           | basictypes

   63 $@6: %empty

   64 assign: V_ID $@6 MTH_SEQUA expr
   65       | structaccess MTH_SEQUA expr
   66       | property MTH_SEQUA expr

   67 $@7: %empty

   68 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@7 structIndex

   69 structIndex: %empty
   70            | SYM_OBRAC expr SYM_CBRAC

   71 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   72 arr: SYM_OBRAC arrHelper SYM_CBRAC

   73 $@8: %empty

   74 arrHelper: expr SYM_COMMA $@8 arrHelper
   75          | expr

   76 $@9: %empty

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   78 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   79 matHelper: arr SYM_COMMA optlf matHelper
   80          | arr optlf

   81 elementdec: V_ELEM V_ID

   82 vectordec: V_VECTOR V_ID

   83 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL

   84 property: V_ID SYM_DOT V_ID

   85 $@10: %empty

   86 $@11: %empty

   87 expr: logicoperation $@10 MTH_OR $@11 expr
   88     | logicoperation

   89 $@12: %empty

   90 $@13: %empty

   91 logicoperation: logicfactor $@12 MTH_AND $@13 logicoperation
   92               | logicfactor

   93 $@14: %empty

   94 logicfactor: MTH_NOT $@14 comparison
   95            | comparison

   96 $@15: %empty

   97 comparison: operation comp_operator $@15 operation
   98           | operation

   99 $@16: %empty

  100 $@17: %empty

  101 operation: factor $@16 MTH_PLUS $@17 operation

  102 $@18: %empty

  103 $@19: %empty

  104 operation: factor $@18 MTH_MINUS $@19 operation
  105          | factor

  106 $@20: %empty

  107 $@21: %empty

  108 factor: hvalue $@20 MTH_ASTRK $@21 factor

  109 $@22: %empty

  110 $@23: %empty

  111 factor: hvalue $@22 MTH_DIVIS $@23 factor
  112       | hvalue

  113 $@24: %empty

  114 $@25: %empty

  115 hvalue: value $@24 MTH_POWER $@25 hvalue

  116 $@26: %empty

  117 $@27: %empty

  118 hvalue: value $@26 MTH_ROOT $@27 hvalue
  119       | value

  120 value: var_or_cte
  121      | funcall
  122      | structaccess
  123      | property

  124 $@28: %empty

  125 value: SYM_OPARE $@28 expr SYM_CPARE

  126 comp_operator: MTH_GT
  127              | MTH_GTEQ
  128              | MTH_LT
  129              | MTH_LTEQ
  130              | MTH_DEQUA
  131              | MTH_NOTEQ

  132 logicstruct: if
  133            | for
  134            | while

  135 $@29: %empty

  136 if: LOG_IF $@29 ifHelper ifHelper3

  137 $@30: %empty

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  139 ifHelper2: %empty

  140 $@31: %empty

  141 ifHelper2: LOG_ELIF $@31 ifHelper

  142 ifHelper3: %empty

  143 $@32: %empty

  144 ifHelper3: LOG_ELSE $@32 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  145 $@33: %empty

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  147 forHelper: V_ID
  148          | stepfor

  149 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  150 $@34: %empty

  151 $@35: %empty

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  153 newlineCicle: newline
  154             | newline newlineCicle

  155 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 68 70 71 72 77 78 149
SYM_CBRAC (259) 68 70 71 72 77 78 149
SYM_OPARE (260) 15 42 125 138 152
SYM_CPARE (261) 15 42 125 138 152
SYM_OCURL (262) 15 83 138 144 146 152
SYM_CCURL (263) 15 83 138 144 146 152
SYM_COMMA (264) 18 48 74 79 83 149
SYM_ARROW (265) 146
SYM_COLON (266) 15 50 71 77
SYM_DOT (267) 84
MTH_SEQUA (268) 31 32 33 34 35 64 65 66
MTH_DEQUA (269) 130
MTH_GT (270) 126
MTH_LT (271) 128
MTH_GTEQ (272) 127
MTH_LTEQ (273) 129
MTH_NOT (274) 94
MTH_NOTEQ (275) 131
MTH_PLUS (276) 101
MTH_MINUS (277) 104
MTH_ASTRK (278) 108
MTH_DIVIS (279) 111
MTH_POWER (280) 115
MTH_ROOT (281) 118
MTH_AND (282) 91
MTH_OR (283) 87
LF (284) 9 10
CR (285) 9
V_ID (286) 15 42 50 61 64 68 71 77 81 82 84 146 147
F_ID (287)
M_ID (288)
LOG_IF (289) 136
LOG_ELIF (290) 141
LOG_ELSE (291) 144
LOG_FOR (292) 146
LOG_WHILE (293) 152
V_VAR (294) 50
V_CHAR (295) 51
V_STRING (296) 52
V_INT (297) 54 71 77
V_DOUBLE (298) 53
V_BOOL (299) 55
V_ARR (300) 71
V_MAT (301) 77
V_VECTOR (302) 82
V_ELEM (303) 81
T_BOOL (304) 60
T_INT (305) 56
T_FLOAT (306)
T_DOUBLE (307) 57
T_CHAR (308) 58
T_STRING (309) 59
RES_ORDER (310) 15
RES_MEDIT (311) 39
RES_RETRN (312) 49


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
prog (59)
    on left: 1 2, on right: 0
script (60)
    on left: 3 4 5 6 7 8, on right: 1 4 5 6 7 8
crlf (61)
    on left: 9 10, on right: 4 5 6 7 8 12 15 20 21 22 23 138 144 146
    152 155
optlf (62)
    on left: 11 12, on right: 15 78 79 80 138 144 146 152
function (63)
    on left: 15, on right: 6
$@1 (64)
    on left: 13, on right: 15
$@2 (65)
    on left: 14, on right: 15
funparams (66)
    on left: 16 17, on right: 15
morefunparams (67)
    on left: 18 19, on right: 16 18
funbody (68)
    on left: 20 21 22 23 24, on right: 15 20 21 22 23
generaldec (69)
    on left: 25 26 27 28 29 31 32 33 34 35, on right: 7 16 18 21
$@3 (70)
    on left: 30, on right: 31
stmt (71)
    on left: 36 37 38 39 40, on right: 20 155
funcall (72)
    on left: 42, on right: 22 35 121
$@4 (73)
    on left: 41, on right: 42
funcallHelper (74)
    on left: 43 45 46, on right: 42 48
$@5 (75)
    on left: 44, on right: 45
funcallHelper2 (76)
    on left: 47 48, on right: 45 46
ret (77)
    on left: 49, on right: 40
vardec (78)
    on left: 50, on right: 25 31
basictypes (79)
    on left: 51 52 53 54 55, on right: 62
vartypes (80)
    on left: 56 57 58 59 60, on right: 15 50 71 77
var_or_cte (81)
    on left: 61 62, on right: 120
assign (82)
    on left: 64 65 66, on right: 4 36
$@6 (83)
    on left: 63, on right: 64
structaccess (84)
    on left: 68, on right: 65 122
$@7 (85)
    on left: 67, on right: 68
structIndex (86)
    on left: 69 70, on right: 68
arrdec (87)
    on left: 71, on right: 26 32
arr (88)
    on left: 72, on right: 32 79 80
arrHelper (89)
    on left: 74 75, on right: 72 74
$@8 (90)
    on left: 73, on right: 74
matdec (91)
    on left: 77, on right: 27 33
$@9 (92)
    on left: 76, on right: 77
mat (93)
    on left: 78, on right: 33
matHelper (94)
    on left: 79 80, on right: 78 79
elementdec (95)
    on left: 81, on right: 29 35
vectordec (96)
    on left: 82, on right: 28 34
vector (97)
    on left: 83, on right: 34 46
property (98)
    on left: 84, on right: 66 123
expr (99)
    on left: 87 88, on right: 5 31 37 45 49 64 65 66 68 70 74 75 83
    87 125 138 149 152
$@10 (100)
    on left: 85, on right: 87
$@11 (101)
    on left: 86, on right: 87
logicoperation (102)
    on left: 91 92, on right: 87 88 91
$@12 (103)
    on left: 89, on right: 91
$@13 (104)
    on left: 90, on right: 91
logicfactor (105)
    on left: 94 95, on right: 91 92
$@14 (106)
    on left: 93, on right: 94
comparison (107)
    on left: 97 98, on right: 94 95
$@15 (108)
    on left: 96, on right: 97
operation (109)
    on left: 101 104 105, on right: 97 98 101 104
$@16 (110)
    on left: 99, on right: 101
$@17 (111)
    on left: 100, on right: 101
$@18 (112)
    on left: 102, on right: 104
$@19 (113)
    on left: 103, on right: 104
factor (114)
    on left: 108 111 112, on right: 101 104 105 108 111
$@20 (115)
    on left: 106, on right: 108
$@21 (116)
    on left: 107, on right: 108
$@22 (117)
    on left: 109, on right: 111
$@23 (118)
    on left: 110, on right: 111
hvalue (119)
    on left: 115 118 119, on right: 108 111 112 115 118
$@24 (120)
    on left: 113, on right: 115
$@25 (121)
    on left: 114, on right: 115
$@26 (122)
    on left: 116, on right: 118
$@27 (123)
    on left: 117, on right: 118
value (124)
    on left: 120 121 122 123 125, on right: 115 118 119
$@28 (125)
    on left: 124, on right: 125
comp_operator (126)
    on left: 126 127 128 129 130 131, on right: 97
logicstruct (127)
    on left: 132 133 134, on right: 38
if (128)
    on left: 136, on right: 132
$@29 (129)
    on left: 135, on right: 136
ifHelper (130)
    on left: 138, on right: 136 141
$@30 (131)
    on left: 137, on right: 138
ifHelper2 (132)
    on left: 139 141, on right: 138
$@31 (133)
    on left: 140, on right: 141
ifHelper3 (134)
    on left: 142 144, on right: 136
$@32 (135)
    on left: 143, on right: 144
for (136)
    on left: 146, on right: 133
$@33 (137)
    on left: 145, on right: 146
forHelper (138)
    on left: 147 148, on right: 146
stepfor (139)
    on left: 149, on right: 148
while (140)
    on left: 152, on right: 134
$@34 (141)
    on left: 150, on right: 152
$@35 (142)
    on left: 151, on right: 152
newlineCicle (143)
    on left: 153 154, on right: 138 144 146 152 154
newline (144)
    on left: 155, on right: 153 154


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $end  reduce using rule 3 (script)

    prog            go to state 18
    script          go to state 19
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

  125 value: SYM_OPARE . $@28 expr SYM_CPARE

    $default  reduce using rule 124 ($@28)

    $@28  go to state 42


State 3

   94 logicfactor: MTH_NOT . $@14 comparison

    $default  reduce using rule 93 ($@14)

    $@14  go to state 43


State 4

   10 crlf: LF .

    $default  reduce using rule 10 (crlf)


State 5

    9 crlf: CR . LF

    LF  shift, and go to state 44


State 6

   42 funcall: V_ID . $@4 SYM_OPARE funcallHelper SYM_CPARE
   61 var_or_cte: V_ID .
   64 assign: V_ID . $@6 MTH_SEQUA expr
   68 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@7 structIndex
   84 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 45
    SYM_DOT    shift, and go to state 46

    SYM_OPARE  reduce using rule 41 ($@4)
    MTH_SEQUA  reduce using rule 63 ($@6)
    $default   reduce using rule 61 (var_or_cte)

    $@4  go to state 47
    $@6  go to state 48


State 7

   50 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 49


State 8

   51 basictypes: V_CHAR .

    $default  reduce using rule 51 (basictypes)


State 9

   52 basictypes: V_STRING .

    $default  reduce using rule 52 (basictypes)


State 10

   54 basictypes: V_INT .

    $default  reduce using rule 54 (basictypes)


State 11

   53 basictypes: V_DOUBLE .

    $default  reduce using rule 53 (basictypes)


State 12

   55 basictypes: V_BOOL .

    $default  reduce using rule 55 (basictypes)


State 13

   71 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 50


State 14

   77 matdec: V_MAT . V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 51


State 15

   82 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 52


State 16

   81 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 53


State 17

   15 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 54


State 18

    0 $accept: prog . $end

    $end  shift, and go to state 55


State 19

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 20

    8 script: crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 56
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 21

    6 script: function . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 57


State 22

    7 script: generaldec . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 58


State 23

  121 value: funcall .

    $default  reduce using rule 121 (value)


State 24

   25 generaldec: vardec .
   31           | vardec . $@3 MTH_SEQUA expr

    MTH_SEQUA  reduce using rule 30 ($@3)
    $default   reduce using rule 25 (generaldec)

    $@3  go to state 59


State 25

   62 var_or_cte: basictypes .

    $default  reduce using rule 62 (var_or_cte)


State 26

  120 value: var_or_cte .

    $default  reduce using rule 120 (value)


State 27

    4 script: assign . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 60


State 28

   65 assign: structaccess . MTH_SEQUA expr
  122 value: structaccess .

    MTH_SEQUA  shift, and go to state 61

    $default  reduce using rule 122 (value)


State 29

   26 generaldec: arrdec .
   32           | arrdec . MTH_SEQUA arr

    MTH_SEQUA  shift, and go to state 62

    $default  reduce using rule 26 (generaldec)


State 30

   27 generaldec: matdec .
   33           | matdec . MTH_SEQUA mat

    MTH_SEQUA  shift, and go to state 63

    $default  reduce using rule 27 (generaldec)


State 31

   29 generaldec: elementdec .
   35           | elementdec . MTH_SEQUA funcall

    MTH_SEQUA  shift, and go to state 64

    $default  reduce using rule 29 (generaldec)


State 32

   28 generaldec: vectordec .
   34           | vectordec . MTH_SEQUA vector

    MTH_SEQUA  shift, and go to state 65

    $default  reduce using rule 28 (generaldec)


State 33

   66 assign: property . MTH_SEQUA expr
  123 value: property .

    MTH_SEQUA  shift, and go to state 66

    $default  reduce using rule 123 (value)


State 34

    5 script: expr . crlf script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 67


State 35

   87 expr: logicoperation . $@10 MTH_OR $@11 expr
   88     | logicoperation .

    MTH_OR    reduce using rule 85 ($@10)
    $default  reduce using rule 88 (expr)

    $@10  go to state 68


State 36

   91 logicoperation: logicfactor . $@12 MTH_AND $@13 logicoperation
   92               | logicfactor .

    MTH_AND   reduce using rule 89 ($@12)
    $default  reduce using rule 92 (logicoperation)

    $@12  go to state 69


State 37

   95 logicfactor: comparison .

    $default  reduce using rule 95 (logicfactor)


State 38

   97 comparison: operation . comp_operator $@15 operation
   98           | operation .

    MTH_DEQUA  shift, and go to state 70
    MTH_GT     shift, and go to state 71
    MTH_LT     shift, and go to state 72
    MTH_GTEQ   shift, and go to state 73
    MTH_LTEQ   shift, and go to state 74
    MTH_NOTEQ  shift, and go to state 75

    $default  reduce using rule 98 (comparison)

    comp_operator  go to state 76


State 39

  101 operation: factor . $@16 MTH_PLUS $@17 operation
  104          | factor . $@18 MTH_MINUS $@19 operation
  105          | factor .

    MTH_PLUS   reduce using rule 99 ($@16)
    MTH_MINUS  reduce using rule 102 ($@18)
    $default   reduce using rule 105 (operation)

    $@16  go to state 77
    $@18  go to state 78


State 40

  108 factor: hvalue . $@20 MTH_ASTRK $@21 factor
  111       | hvalue . $@22 MTH_DIVIS $@23 factor
  112       | hvalue .

    MTH_ASTRK  reduce using rule 106 ($@20)
    MTH_DIVIS  reduce using rule 109 ($@22)
    $default   reduce using rule 112 (factor)

    $@20  go to state 79
    $@22  go to state 80


State 41

  115 hvalue: value . $@24 MTH_POWER $@25 hvalue
  118       | value . $@26 MTH_ROOT $@27 hvalue
  119       | value .

    MTH_POWER  reduce using rule 113 ($@24)
    MTH_ROOT   reduce using rule 116 ($@26)
    $default   reduce using rule 119 (hvalue)

    $@24  go to state 81
    $@26  go to state 82


State 42

  125 value: SYM_OPARE $@28 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 86
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 43

   94 logicfactor: MTH_NOT $@14 . comparison

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    comparison    go to state 87
    operation     go to state 38
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 44

    9 crlf: CR LF .

    $default  reduce using rule 9 (crlf)


State 45

   68 structaccess: V_ID SYM_OBRAC . expr SYM_CBRAC $@7 structIndex

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 88
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 46

   84 property: V_ID SYM_DOT . V_ID

    V_ID  shift, and go to state 89


State 47

   42 funcall: V_ID $@4 . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 90


State 48

   64 assign: V_ID $@6 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 91


State 49

   50 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 92


State 50

   71 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 93


State 51

   77 matdec: V_MAT V_ID . $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    $default  reduce using rule 76 ($@9)

    $@9  go to state 94


State 52

   82 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 82 (vectordec)


State 53

   81 elementdec: V_ELEM V_ID .

    $default  reduce using rule 81 (elementdec)


State 54

   15 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 95


State 55

    0 $accept: prog $end .

    $default  accept


State 56

    8 script: crlf script .

    $default  reduce using rule 8 (script)


State 57

    6 script: function crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 96
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 58

    7 script: generaldec crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 97
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 59

   31 generaldec: vardec $@3 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 98


State 60

    4 script: assign crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 99
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 61

   65 assign: structaccess MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 100
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 62

   32 generaldec: arrdec MTH_SEQUA . arr

    SYM_OBRAC  shift, and go to state 101

    arr  go to state 102


State 63

   33 generaldec: matdec MTH_SEQUA . mat

    SYM_OBRAC  shift, and go to state 103

    mat  go to state 104


State 64

   35 generaldec: elementdec MTH_SEQUA . funcall

    V_ID  shift, and go to state 105

    funcall  go to state 106


State 65

   34 generaldec: vectordec MTH_SEQUA . vector

    SYM_OCURL  shift, and go to state 107

    vector  go to state 108


State 66

   66 assign: property MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 109
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 67

    5 script: expr crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 110
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 68

   87 expr: logicoperation $@10 . MTH_OR $@11 expr

    MTH_OR  shift, and go to state 111


State 69

   91 logicoperation: logicfactor $@12 . MTH_AND $@13 logicoperation

    MTH_AND  shift, and go to state 112


State 70

  130 comp_operator: MTH_DEQUA .

    $default  reduce using rule 130 (comp_operator)


State 71

  126 comp_operator: MTH_GT .

    $default  reduce using rule 126 (comp_operator)


State 72

  128 comp_operator: MTH_LT .

    $default  reduce using rule 128 (comp_operator)


State 73

  127 comp_operator: MTH_GTEQ .

    $default  reduce using rule 127 (comp_operator)


State 74

  129 comp_operator: MTH_LTEQ .

    $default  reduce using rule 129 (comp_operator)


State 75

  131 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 131 (comp_operator)


State 76

   97 comparison: operation comp_operator . $@15 operation

    $default  reduce using rule 96 ($@15)

    $@15  go to state 113


State 77

  101 operation: factor $@16 . MTH_PLUS $@17 operation

    MTH_PLUS  shift, and go to state 114


State 78

  104 operation: factor $@18 . MTH_MINUS $@19 operation

    MTH_MINUS  shift, and go to state 115


State 79

  108 factor: hvalue $@20 . MTH_ASTRK $@21 factor

    MTH_ASTRK  shift, and go to state 116


State 80

  111 factor: hvalue $@22 . MTH_DIVIS $@23 factor

    MTH_DIVIS  shift, and go to state 117


State 81

  115 hvalue: value $@24 . MTH_POWER $@25 hvalue

    MTH_POWER  shift, and go to state 118


State 82

  118 hvalue: value $@26 . MTH_ROOT $@27 hvalue

    MTH_ROOT  shift, and go to state 119


State 83

   42 funcall: V_ID . $@4 SYM_OPARE funcallHelper SYM_CPARE
   61 var_or_cte: V_ID .
   68 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@7 structIndex
   84 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 45
    SYM_DOT    shift, and go to state 46

    SYM_OPARE  reduce using rule 41 ($@4)
    $default   reduce using rule 61 (var_or_cte)

    $@4  go to state 47


State 84

  122 value: structaccess .

    $default  reduce using rule 122 (value)


State 85

  123 value: property .

    $default  reduce using rule 123 (value)


State 86

  125 value: SYM_OPARE $@28 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 120


State 87

   94 logicfactor: MTH_NOT $@14 comparison .

    $default  reduce using rule 94 (logicfactor)


State 88

   68 structaccess: V_ID SYM_OBRAC expr . SYM_CBRAC $@7 structIndex

    SYM_CBRAC  shift, and go to state 121


State 89

   84 property: V_ID SYM_DOT V_ID .

    $default  reduce using rule 84 (property)


State 90

   42 funcall: V_ID $@4 SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 107
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    $default  reduce using rule 43 (funcallHelper)

    funcall         go to state 23
    funcallHelper   go to state 122
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    vector          go to state 123
    property        go to state 85
    expr            go to state 124
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 91

   64 assign: V_ID $@6 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 125
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 92

   50 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 131


State 93

   71 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 132


State 94

   77 matdec: V_MAT V_ID $@9 . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 133


State 95

   15 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 134


State 96

    6 script: function crlf script .

    $default  reduce using rule 6 (script)


State 97

    7 script: generaldec crlf script .

    $default  reduce using rule 7 (script)


State 98

   31 generaldec: vardec $@3 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 135
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 99

    4 script: assign crlf script .

    $default  reduce using rule 4 (script)


State 100

   65 assign: structaccess MTH_SEQUA expr .

    $default  reduce using rule 65 (assign)


State 101

   72 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    arrHelper       go to state 136
    property        go to state 85
    expr            go to state 137
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 102

   32 generaldec: arrdec MTH_SEQUA arr .

    $default  reduce using rule 32 (generaldec)


State 103

   78 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 139


State 104

   33 generaldec: matdec MTH_SEQUA mat .

    $default  reduce using rule 33 (generaldec)


State 105

   42 funcall: V_ID . $@4 SYM_OPARE funcallHelper SYM_CPARE

    $default  reduce using rule 41 ($@4)

    $@4  go to state 47


State 106

   35 generaldec: elementdec MTH_SEQUA funcall .

    $default  reduce using rule 35 (generaldec)


State 107

   83 vector: SYM_OCURL . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 140
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 108

   34 generaldec: vectordec MTH_SEQUA vector .

    $default  reduce using rule 34 (generaldec)


State 109

   66 assign: property MTH_SEQUA expr .

    $default  reduce using rule 66 (assign)


State 110

    5 script: expr crlf script .

    $default  reduce using rule 5 (script)


State 111

   87 expr: logicoperation $@10 MTH_OR . $@11 expr

    $default  reduce using rule 86 ($@11)

    $@11  go to state 141


State 112

   91 logicoperation: logicfactor $@12 MTH_AND . $@13 logicoperation

    $default  reduce using rule 90 ($@13)

    $@13  go to state 142


State 113

   97 comparison: operation comp_operator $@15 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    operation     go to state 143
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 114

  101 operation: factor $@16 MTH_PLUS . $@17 operation

    $default  reduce using rule 100 ($@17)

    $@17  go to state 144


State 115

  104 operation: factor $@18 MTH_MINUS . $@19 operation

    $default  reduce using rule 103 ($@19)

    $@19  go to state 145


State 116

  108 factor: hvalue $@20 MTH_ASTRK . $@21 factor

    $default  reduce using rule 107 ($@21)

    $@21  go to state 146


State 117

  111 factor: hvalue $@22 MTH_DIVIS . $@23 factor

    $default  reduce using rule 110 ($@23)

    $@23  go to state 147


State 118

  115 hvalue: value $@24 MTH_POWER . $@25 hvalue

    $default  reduce using rule 114 ($@25)

    $@25  go to state 148


State 119

  118 hvalue: value $@26 MTH_ROOT . $@27 hvalue

    $default  reduce using rule 117 ($@27)

    $@27  go to state 149


State 120

  125 value: SYM_OPARE $@28 expr SYM_CPARE .

    $default  reduce using rule 125 (value)


State 121

   68 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC . $@7 structIndex

    $default  reduce using rule 67 ($@7)

    $@7  go to state 150


State 122

   42 funcall: V_ID $@4 SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 151


State 123

   46 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 152

    $default  reduce using rule 47 (funcallHelper2)

    funcallHelper2  go to state 153


State 124

   45 funcallHelper: expr . $@5 funcallHelper2

    $default  reduce using rule 44 ($@5)

    $@5  go to state 154


State 125

   64 assign: V_ID $@6 MTH_SEQUA expr .

    $default  reduce using rule 64 (assign)


State 126

   60 vartypes: T_BOOL .

    $default  reduce using rule 60 (vartypes)


State 127

   56 vartypes: T_INT .

    $default  reduce using rule 56 (vartypes)


State 128

   57 vartypes: T_DOUBLE .

    $default  reduce using rule 57 (vartypes)


State 129

   58 vartypes: T_CHAR .

    $default  reduce using rule 58 (vartypes)


State 130

   59 vartypes: T_STRING .

    $default  reduce using rule 59 (vartypes)


State 131

   50 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 50 (vardec)


State 132

   71 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 155


State 133

   77 matdec: V_MAT V_ID $@9 SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 156


State 134

   15 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 157


State 135

   31 generaldec: vardec $@3 MTH_SEQUA expr .

    $default  reduce using rule 31 (generaldec)


State 136

   72 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 158


State 137

   74 arrHelper: expr . SYM_COMMA $@8 arrHelper
   75          | expr .

    SYM_COMMA  shift, and go to state 159

    $default  reduce using rule 75 (arrHelper)


State 138

   12 optlf: crlf .

    $default  reduce using rule 12 (optlf)


State 139

   78 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 101

    arr        go to state 160
    matHelper  go to state 161


State 140

   83 vector: SYM_OCURL expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 162


State 141

   87 expr: logicoperation $@10 MTH_OR $@11 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 163
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 142

   91 logicoperation: logicfactor $@12 MTH_AND $@13 . logicoperation

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    logicoperation  go to state 164
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 143

   97 comparison: operation comp_operator $@15 operation .

    $default  reduce using rule 97 (comparison)


State 144

  101 operation: factor $@16 MTH_PLUS $@17 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    operation     go to state 165
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 145

  104 operation: factor $@18 MTH_MINUS $@19 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    operation     go to state 166
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 146

  108 factor: hvalue $@20 MTH_ASTRK $@21 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    factor        go to state 167
    hvalue        go to state 40
    value         go to state 41


State 147

  111 factor: hvalue $@22 MTH_DIVIS $@23 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    factor        go to state 168
    hvalue        go to state 40
    value         go to state 41


State 148

  115 hvalue: value $@24 MTH_POWER $@25 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    hvalue        go to state 169
    value         go to state 41


State 149

  118 hvalue: value $@26 MTH_ROOT $@27 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    hvalue        go to state 170
    value         go to state 41


State 150

   68 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@7 . structIndex

    SYM_OBRAC  shift, and go to state 171

    $default  reduce using rule 69 (structIndex)

    structIndex  go to state 172


State 151

   42 funcall: V_ID $@4 SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 42 (funcall)


State 152

   48 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 107
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    $default  reduce using rule 43 (funcallHelper)

    funcall         go to state 23
    funcallHelper   go to state 173
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    vector          go to state 123
    property        go to state 85
    expr            go to state 124
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 153

   46 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 46 (funcallHelper)


State 154

   45 funcallHelper: expr $@5 . funcallHelper2

    SYM_COMMA  shift, and go to state 152

    $default  reduce using rule 47 (funcallHelper2)

    funcallHelper2  go to state 174


State 155

   71 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 175


State 156

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 176


State 157

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 13 ($@1)

    $@1  go to state 177


State 158

   72 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 72 (arr)


State 159

   74 arrHelper: expr SYM_COMMA . $@8 arrHelper

    $default  reduce using rule 73 ($@8)

    $@8  go to state 178


State 160

   79 matHelper: arr . SYM_COMMA optlf matHelper
   80          | arr . optlf

    SYM_COMMA  shift, and go to state 179
    LF         shift, and go to state 4
    CR         shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 180


State 161

   78 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 181


State 162

   83 vector: SYM_OCURL expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 182
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 163

   87 expr: logicoperation $@10 MTH_OR $@11 expr .

    $default  reduce using rule 87 (expr)


State 164

   91 logicoperation: logicfactor $@12 MTH_AND $@13 logicoperation .

    $default  reduce using rule 91 (logicoperation)


State 165

  101 operation: factor $@16 MTH_PLUS $@17 operation .

    $default  reduce using rule 101 (operation)


State 166

  104 operation: factor $@18 MTH_MINUS $@19 operation .

    $default  reduce using rule 104 (operation)


State 167

  108 factor: hvalue $@20 MTH_ASTRK $@21 factor .

    $default  reduce using rule 108 (factor)


State 168

  111 factor: hvalue $@22 MTH_DIVIS $@23 factor .

    $default  reduce using rule 111 (factor)


State 169

  115 hvalue: value $@24 MTH_POWER $@25 hvalue .

    $default  reduce using rule 115 (hvalue)


State 170

  118 hvalue: value $@26 MTH_ROOT $@27 hvalue .

    $default  reduce using rule 118 (hvalue)


State 171

   70 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 183
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 172

   68 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@7 structIndex .

    $default  reduce using rule 68 (structaccess)


State 173

   48 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 48 (funcallHelper2)


State 174

   45 funcallHelper: expr $@5 funcallHelper2 .

    $default  reduce using rule 45 (funcallHelper)


State 175

   71 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 184


State 176

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 185


State 177

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 . funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 13
    V_MAT     shift, and go to state 14
    V_VECTOR  shift, and go to state 15
    V_ELEM    shift, and go to state 16

    $default  reduce using rule 17 (funparams)

    funparams   go to state 186
    generaldec  go to state 187
    vardec      go to state 24
    arrdec      go to state 29
    matdec      go to state 30
    elementdec  go to state 31
    vectordec   go to state 32


State 178

   74 arrHelper: expr SYM_COMMA $@8 . arrHelper

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    arrHelper       go to state 188
    property        go to state 85
    expr            go to state 137
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 179

   79 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 189


State 180

   80 matHelper: arr optlf .

    $default  reduce using rule 80 (matHelper)


State 181

   78 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 78 (mat)


State 182

   83 vector: SYM_OCURL expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 190


State 183

   70 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 191


State 184

   71 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 71 (arrdec)


State 185

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 192


State 186

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams . SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 193


State 187

   16 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 194

    $default  reduce using rule 19 (morefunparams)

    morefunparams  go to state 195


State 188

   74 arrHelper: expr SYM_COMMA $@8 arrHelper .

    $default  reduce using rule 74 (arrHelper)


State 189

   79 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 101

    arr        go to state 160
    matHelper  go to state 196


State 190

   83 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 83 (vector)


State 191

   70 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 70 (structIndex)


State 192

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 197


State 193

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE . $@2 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 14 ($@2)

    $@2  go to state 198


State 194

   18 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 13
    V_MAT     shift, and go to state 14
    V_VECTOR  shift, and go to state 15
    V_ELEM    shift, and go to state 16

    generaldec  go to state 199
    vardec      go to state 24
    arrdec      go to state 29
    matdec      go to state 30
    elementdec  go to state 31
    vectordec   go to state 32


State 195

   16 funparams: generaldec morefunparams .

    $default  reduce using rule 16 (funparams)


State 196

   79 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 79 (matHelper)


State 197

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 200


State 198

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 201


State 199

   18 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 194

    $default  reduce using rule 19 (morefunparams)

    morefunparams  go to state 202


State 200

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 203


State 201

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 204


State 202

   18 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 18 (morefunparams)


State 203

   77 matdec: V_MAT V_ID $@9 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 77 (matdec)


State 204

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 205


State 205

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    $default  reduce using rule 24 (funbody)

    crlf            go to state 211
    funbody         go to state 212
    generaldec      go to state 213
    stmt            go to state 214
    funcall         go to state 215
    ret             go to state 216
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222


State 206

  136 if: LOG_IF . $@29 ifHelper ifHelper3

    $default  reduce using rule 135 ($@29)

    $@29  go to state 223


State 207

  146 for: LOG_FOR . forHelper SYM_ARROW V_ID $@33 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 224
    V_ID       shift, and go to state 225

    forHelper  go to state 226
    stepfor    go to state 227


State 208

  152 while: LOG_WHILE . $@34 SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 150 ($@34)

    $@34  go to state 228


State 209

   39 stmt: RES_MEDIT .

    $default  reduce using rule 39 (stmt)


State 210

   49 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 229
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 211

   23 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    $default  reduce using rule 24 (funbody)

    crlf            go to state 211
    funbody         go to state 230
    generaldec      go to state 213
    stmt            go to state 214
    funcall         go to state 215
    ret             go to state 216
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222


State 212

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 231


State 213

   21 funbody: generaldec . crlf funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 232


State 214

   20 funbody: stmt . crlf funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 233


State 215

   22 funbody: funcall . crlf funbody
  121 value: funcall .

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    LF        [reduce using rule 121 (value)]
    CR        [reduce using rule 121 (value)]
    $default  reduce using rule 121 (value)

    crlf  go to state 234


State 216

   40 stmt: ret .

    $default  reduce using rule 40 (stmt)


State 217

   36 stmt: assign .

    $default  reduce using rule 36 (stmt)


State 218

   37 stmt: expr .

    $default  reduce using rule 37 (stmt)


State 219

   38 stmt: logicstruct .

    $default  reduce using rule 38 (stmt)


State 220

  132 logicstruct: if .

    $default  reduce using rule 132 (logicstruct)


State 221

  133 logicstruct: for .

    $default  reduce using rule 133 (logicstruct)


State 222

  134 logicstruct: while .

    $default  reduce using rule 134 (logicstruct)


State 223

  136 if: LOG_IF $@29 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 235

    ifHelper  go to state 236


State 224

  149 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 237
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 225

  147 forHelper: V_ID .

    $default  reduce using rule 147 (forHelper)


State 226

  146 for: LOG_FOR forHelper . SYM_ARROW V_ID $@33 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 238


State 227

  148 forHelper: stepfor .

    $default  reduce using rule 148 (forHelper)


State 228

  152 while: LOG_WHILE $@34 . SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 239


State 229

   49 ret: RES_RETRN expr .

    $default  reduce using rule 49 (ret)


State 230

   23 funbody: crlf funbody .

    $default  reduce using rule 23 (funbody)


State 231

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@1 funparams SYM_CPARE $@2 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 15 (function)


State 232

   21 funbody: generaldec crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    $default  reduce using rule 24 (funbody)

    crlf            go to state 211
    funbody         go to state 240
    generaldec      go to state 213
    stmt            go to state 214
    funcall         go to state 215
    ret             go to state 216
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222


State 233

   20 funbody: stmt crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    $default  reduce using rule 24 (funbody)

    crlf            go to state 211
    funbody         go to state 241
    generaldec      go to state 213
    stmt            go to state 214
    funcall         go to state 215
    ret             go to state 216
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222


State 234

   22 funbody: funcall crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    $default  reduce using rule 24 (funbody)

    crlf            go to state 211
    funbody         go to state 242
    generaldec      go to state 213
    stmt            go to state 214
    funcall         go to state 215
    ret             go to state 216
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222


State 235

  138 ifHelper: SYM_OPARE . expr SYM_CPARE $@30 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 243
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 236

  136 if: LOG_IF $@29 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 244

    $default  reduce using rule 142 (ifHelper3)

    ifHelper3  go to state 245


State 237

  149 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 246


State 238

  146 for: LOG_FOR forHelper SYM_ARROW . V_ID $@33 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 247


State 239

  152 while: LOG_WHILE $@34 SYM_OPARE . expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 248
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 240

   21 funbody: generaldec crlf funbody .

    $default  reduce using rule 21 (funbody)


State 241

   20 funbody: stmt crlf funbody .

    $default  reduce using rule 20 (funbody)


State 242

   22 funbody: funcall crlf funbody .

    $default  reduce using rule 22 (funbody)


State 243

  138 ifHelper: SYM_OPARE expr . SYM_CPARE $@30 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 249


State 244

  144 ifHelper3: LOG_ELSE . $@32 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 143 ($@32)

    $@32  go to state 250


State 245

  136 if: LOG_IF $@29 ifHelper ifHelper3 .

    $default  reduce using rule 136 (if)


State 246

  149 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 251
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 247

  146 for: LOG_FOR forHelper SYM_ARROW V_ID . $@33 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 145 ($@33)

    $@33  go to state 252


State 248

  152 while: LOG_WHILE $@34 SYM_OPARE expr . SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 253


State 249

  138 ifHelper: SYM_OPARE expr SYM_CPARE . $@30 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 137 ($@30)

    $@30  go to state 254


State 250

  144 ifHelper3: LOG_ELSE $@32 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 255


State 251

  149 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 256


State 252

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 257


State 253

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE . $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 151 ($@35)

    $@35  go to state 258


State 254

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 259


State 255

  144 ifHelper3: LOG_ELSE $@32 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 260


State 256

  149 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 261
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 257

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 262


State 258

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 11 (optlf)

    crlf   go to state 138
    optlf  go to state 263


State 259

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 264


State 260

  144 ifHelper3: LOG_ELSE $@32 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 265


State 261

  149 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 266


State 262

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 267


State 263

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 268


State 264

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 269


State 265

  144 ifHelper3: LOG_ELSE $@32 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    stmt            go to state 270
    funcall         go to state 23
    ret             go to state 216
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222
    newlineCicle    go to state 271
    newline         go to state 272


State 266

  149 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 149 (stepfor)


State 267

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    stmt            go to state 270
    funcall         go to state 23
    ret             go to state 216
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222
    newlineCicle    go to state 273
    newline         go to state 272


State 268

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 274


State 269

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    stmt            go to state 270
    funcall         go to state 23
    ret             go to state 216
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222
    newlineCicle    go to state 275
    newline         go to state 272


State 270

  155 newline: stmt . crlf

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 276


State 271

  144 ifHelper3: LOG_ELSE $@32 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 277


State 272

  153 newlineCicle: newline .
  154             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    $default  reduce using rule 153 (newlineCicle)

    stmt            go to state 270
    funcall         go to state 23
    ret             go to state 216
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222
    newlineCicle    go to state 278
    newline         go to state 272


State 273

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 279


State 274

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 206
    LOG_FOR    shift, and go to state 207
    LOG_WHILE  shift, and go to state 208
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 209
    RES_RETRN  shift, and go to state 210

    stmt            go to state 270
    funcall         go to state 23
    ret             go to state 216
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 217
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 218
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 219
    if              go to state 220
    for             go to state 221
    while           go to state 222
    newlineCicle    go to state 280
    newline         go to state 272


State 275

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 281


State 276

  155 newline: stmt crlf .

    $default  reduce using rule 155 (newline)


State 277

  144 ifHelper3: LOG_ELSE $@32 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 144 (ifHelper3)


State 278

  154 newlineCicle: newline newlineCicle .

    $default  reduce using rule 154 (newlineCicle)


State 279

  146 for: LOG_FOR forHelper SYM_ARROW V_ID $@33 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 146 (for)


State 280

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 282


State 281

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 283

    $default  reduce using rule 139 (ifHelper2)

    ifHelper2  go to state 284


State 282

  152 while: LOG_WHILE $@34 SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 152 (while)


State 283

  141 ifHelper2: LOG_ELIF . $@31 ifHelper

    $default  reduce using rule 140 ($@31)

    $@31  go to state 285


State 284

  138 ifHelper: SYM_OPARE expr SYM_CPARE $@30 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 138 (ifHelper)


State 285

  141 ifHelper2: LOG_ELIF $@31 . ifHelper

    SYM_OPARE  shift, and go to state 235

    ifHelper  go to state 286


State 286

  141 ifHelper2: LOG_ELIF $@31 ifHelper .

    $default  reduce using rule 141 (ifHelper2)
