Terminals unused in grammar

   F_ID
   M_ID
   T_FLOAT


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty

    4 $@1: %empty

    5 script: assign crlf $@1 script

    6 $@2: %empty

    7 script: expr crlf $@2 script

    8 $@3: %empty

    9 script: function crlf $@3 script

   10 $@4: %empty

   11 script: generaldec crlf $@4 script
   12       | crlf script

   13 crlf: CR LF
   14     | LF

   15 optlf: %empty
   16      | crlf

   17 $@5: %empty

   18 $@6: %empty

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

   20 funparams: %empty
   21          | generaldec morefunparams

   22 morefunparams: %empty
   23              | SYM_COMMA generaldec morefunparams

   24 funbody: %empty

   25 $@7: %empty

   26 funbody: stmt crlf $@7 funbody

   27 $@8: %empty

   28 funbody: generaldec crlf $@8 funbody
   29        | crlf funbody

   30 generaldec: vardec
   31           | arrdec
   32           | matdec
   33           | vectordec
   34           | elementdec

   35 $@9: %empty

   36 generaldec: vardec $@9 MTH_SEQUA expr
   37           | arrdec MTH_SEQUA arr
   38           | matdec MTH_SEQUA mat
   39           | vectordec MTH_SEQUA vector
   40           | elementdec MTH_SEQUA funcall

   41 stmt: assign
   42     | expr
   43     | logicstruct
   44     | RES_MEDIT
   45     | ret

   46 $@10: %empty

   47 funcall: V_ID $@10 SYM_OPARE funcallHelper SYM_CPARE

   48 funcallHelper: %empty

   49 $@11: %empty

   50 funcallHelper: expr $@11 funcallHelper2
   51              | vector funcallHelper2

   52 funcallHelper2: %empty
   53               | SYM_COMMA funcallHelper

   54 ret: RES_RETRN expr

   55 vardec: V_VAR V_ID SYM_COLON vartypes

   56 basictypes: V_CHAR
   57           | V_STRING
   58           | V_DOUBLE
   59           | V_INT
   60           | V_BOOL

   61 vartypes: T_INT
   62         | T_DOUBLE
   63         | T_CHAR
   64         | T_STRING
   65         | T_BOOL

   66 var_or_cte: V_ID
   67           | basictypes

   68 $@12: %empty

   69 assign: V_ID $@12 MTH_SEQUA expr
   70       | structaccess MTH_SEQUA expr
   71       | property MTH_SEQUA expr

   72 $@13: %empty

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@13 structIndex

   74 structIndex: %empty
   75            | SYM_OBRAC expr SYM_CBRAC

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   77 arr: SYM_OBRAC arrHelper SYM_CBRAC

   78 $@14: %empty

   79 arrHelper: expr SYM_COMMA $@14 arrHelper
   80          | expr

   81 $@15: %empty

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   83 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   84 matHelper: arr SYM_COMMA optlf matHelper
   85          | arr optlf

   86 elementdec: V_ELEM V_ID

   87 vectordec: V_VECTOR V_ID

   88 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL

   89 property: V_ID SYM_DOT V_ID

   90 $@16: %empty

   91 $@17: %empty

   92 expr: logicoperation $@16 MTH_OR $@17 expr
   93     | logicoperation

   94 $@18: %empty

   95 $@19: %empty

   96 logicoperation: logicfactor $@18 MTH_AND $@19 logicoperation
   97               | logicfactor

   98 $@20: %empty

   99 logicfactor: MTH_NOT $@20 comparison
  100            | comparison

  101 $@21: %empty

  102 comparison: operation comp_operator $@21 operation
  103           | operation

  104 $@22: %empty

  105 $@23: %empty

  106 operation: factor $@22 MTH_PLUS $@23 operation

  107 $@24: %empty

  108 $@25: %empty

  109 operation: factor $@24 MTH_MINUS $@25 operation
  110          | factor

  111 $@26: %empty

  112 $@27: %empty

  113 factor: hvalue $@26 MTH_ASTRK $@27 factor

  114 $@28: %empty

  115 $@29: %empty

  116 factor: hvalue $@28 MTH_DIVIS $@29 factor
  117       | hvalue

  118 $@30: %empty

  119 $@31: %empty

  120 hvalue: value $@30 MTH_POWER $@31 hvalue

  121 $@32: %empty

  122 $@33: %empty

  123 hvalue: value $@32 MTH_ROOT $@33 hvalue
  124       | value

  125 value: var_or_cte
  126      | funcall
  127      | structaccess
  128      | property

  129 $@34: %empty

  130 value: SYM_OPARE $@34 expr SYM_CPARE

  131 comp_operator: MTH_GT
  132              | MTH_GTEQ
  133              | MTH_LT
  134              | MTH_LTEQ
  135              | MTH_DEQUA
  136              | MTH_NOTEQ

  137 logicstruct: if
  138            | for
  139            | while

  140 $@35: %empty

  141 if: LOG_IF $@35 ifHelper ifHelper3

  142 $@36: %empty

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  144 ifHelper2: %empty

  145 $@37: %empty

  146 ifHelper2: LOG_ELIF $@37 ifHelper

  147 ifHelper3: %empty

  148 $@38: %empty

  149 ifHelper3: LOG_ELSE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  150 $@39: %empty

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  152 forHelper: V_ID
  153          | stepfor

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  155 $@40: %empty

  156 $@41: %empty

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  158 newlineCicle: newline
  159             | newline newlineCicle

  160 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 73 75 76 77 82 83 154
SYM_CBRAC (259) 73 75 76 77 82 83 154
SYM_OPARE (260) 19 47 130 143 157
SYM_CPARE (261) 19 47 130 143 157
SYM_OCURL (262) 19 88 143 149 151 157
SYM_CCURL (263) 19 88 143 149 151 157
SYM_COMMA (264) 23 53 79 84 88 154
SYM_ARROW (265) 151
SYM_COLON (266) 19 55 76 82
SYM_DOT (267) 89
MTH_SEQUA (268) 36 37 38 39 40 69 70 71
MTH_DEQUA (269) 135
MTH_GT (270) 131
MTH_LT (271) 133
MTH_GTEQ (272) 132
MTH_LTEQ (273) 134
MTH_NOT (274) 99
MTH_NOTEQ (275) 136
MTH_PLUS (276) 106
MTH_MINUS (277) 109
MTH_ASTRK (278) 113
MTH_DIVIS (279) 116
MTH_POWER (280) 120
MTH_ROOT (281) 123
MTH_AND (282) 96
MTH_OR (283) 92
LF (284) 13 14
CR (285) 13
V_ID (286) 19 47 55 66 69 73 76 82 86 87 89 151 152
F_ID (287)
M_ID (288)
LOG_IF (289) 141
LOG_ELIF (290) 146
LOG_ELSE (291) 149
LOG_FOR (292) 151
LOG_WHILE (293) 157
V_VAR (294) 55
V_CHAR (295) 56
V_STRING (296) 57
V_INT (297) 59 76 82
V_DOUBLE (298) 58
V_BOOL (299) 60
V_ARR (300) 76
V_MAT (301) 82
V_VECTOR (302) 87
V_ELEM (303) 86
T_BOOL (304) 65
T_INT (305) 61
T_FLOAT (306)
T_DOUBLE (307) 62
T_CHAR (308) 63
T_STRING (309) 64
RES_ORDER (310) 19
RES_MEDIT (311) 44
RES_RETRN (312) 54


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
prog (59)
    on left: 1 2, on right: 0
script (60)
    on left: 3 5 7 9 11 12, on right: 1 5 7 9 11 12
$@1 (61)
    on left: 4, on right: 5
$@2 (62)
    on left: 6, on right: 7
$@3 (63)
    on left: 8, on right: 9
$@4 (64)
    on left: 10, on right: 11
crlf (65)
    on left: 13 14, on right: 5 7 9 11 12 16 19 26 28 29 143 149 151
    157 160
optlf (66)
    on left: 15 16, on right: 19 83 84 85 143 149 151 157
function (67)
    on left: 19, on right: 9
$@5 (68)
    on left: 17, on right: 19
$@6 (69)
    on left: 18, on right: 19
funparams (70)
    on left: 20 21, on right: 19
morefunparams (71)
    on left: 22 23, on right: 21 23
funbody (72)
    on left: 24 26 28 29, on right: 19 26 28 29
$@7 (73)
    on left: 25, on right: 26
$@8 (74)
    on left: 27, on right: 28
generaldec (75)
    on left: 30 31 32 33 34 36 37 38 39 40, on right: 11 21 23 28
$@9 (76)
    on left: 35, on right: 36
stmt (77)
    on left: 41 42 43 44 45, on right: 26 160
funcall (78)
    on left: 47, on right: 40 126
$@10 (79)
    on left: 46, on right: 47
funcallHelper (80)
    on left: 48 50 51, on right: 47 53
$@11 (81)
    on left: 49, on right: 50
funcallHelper2 (82)
    on left: 52 53, on right: 50 51
ret (83)
    on left: 54, on right: 45
vardec (84)
    on left: 55, on right: 30 36
basictypes (85)
    on left: 56 57 58 59 60, on right: 67
vartypes (86)
    on left: 61 62 63 64 65, on right: 19 55 76 82
var_or_cte (87)
    on left: 66 67, on right: 125
assign (88)
    on left: 69 70 71, on right: 5 41
$@12 (89)
    on left: 68, on right: 69
structaccess (90)
    on left: 73, on right: 70 127
$@13 (91)
    on left: 72, on right: 73
structIndex (92)
    on left: 74 75, on right: 73
arrdec (93)
    on left: 76, on right: 31 37
arr (94)
    on left: 77, on right: 37 84 85
arrHelper (95)
    on left: 79 80, on right: 77 79
$@14 (96)
    on left: 78, on right: 79
matdec (97)
    on left: 82, on right: 32 38
$@15 (98)
    on left: 81, on right: 82
mat (99)
    on left: 83, on right: 38
matHelper (100)
    on left: 84 85, on right: 83 84
elementdec (101)
    on left: 86, on right: 34 40
vectordec (102)
    on left: 87, on right: 33 39
vector (103)
    on left: 88, on right: 39 51
property (104)
    on left: 89, on right: 71 128
expr (105)
    on left: 92 93, on right: 7 36 42 50 54 69 70 71 73 75 79 80 88
    92 130 143 154 157
$@16 (106)
    on left: 90, on right: 92
$@17 (107)
    on left: 91, on right: 92
logicoperation (108)
    on left: 96 97, on right: 92 93 96
$@18 (109)
    on left: 94, on right: 96
$@19 (110)
    on left: 95, on right: 96
logicfactor (111)
    on left: 99 100, on right: 96 97
$@20 (112)
    on left: 98, on right: 99
comparison (113)
    on left: 102 103, on right: 99 100
$@21 (114)
    on left: 101, on right: 102
operation (115)
    on left: 106 109 110, on right: 102 103 106 109
$@22 (116)
    on left: 104, on right: 106
$@23 (117)
    on left: 105, on right: 106
$@24 (118)
    on left: 107, on right: 109
$@25 (119)
    on left: 108, on right: 109
factor (120)
    on left: 113 116 117, on right: 106 109 110 113 116
$@26 (121)
    on left: 111, on right: 113
$@27 (122)
    on left: 112, on right: 113
$@28 (123)
    on left: 114, on right: 116
$@29 (124)
    on left: 115, on right: 116
hvalue (125)
    on left: 120 123 124, on right: 113 116 117 120 123
$@30 (126)
    on left: 118, on right: 120
$@31 (127)
    on left: 119, on right: 120
$@32 (128)
    on left: 121, on right: 123
$@33 (129)
    on left: 122, on right: 123
value (130)
    on left: 125 126 127 128 130, on right: 120 123 124
$@34 (131)
    on left: 129, on right: 130
comp_operator (132)
    on left: 131 132 133 134 135 136, on right: 102
logicstruct (133)
    on left: 137 138 139, on right: 43
if (134)
    on left: 141, on right: 137
$@35 (135)
    on left: 140, on right: 141
ifHelper (136)
    on left: 143, on right: 141 146
$@36 (137)
    on left: 142, on right: 143
ifHelper2 (138)
    on left: 144 146, on right: 143
$@37 (139)
    on left: 145, on right: 146
ifHelper3 (140)
    on left: 147 149, on right: 141
$@38 (141)
    on left: 148, on right: 149
for (142)
    on left: 151, on right: 138
$@39 (143)
    on left: 150, on right: 151
forHelper (144)
    on left: 152 153, on right: 151
stepfor (145)
    on left: 154, on right: 153
while (146)
    on left: 157, on right: 139
$@40 (147)
    on left: 155, on right: 157
$@41 (148)
    on left: 156, on right: 157
newlineCicle (149)
    on left: 158 159, on right: 143 149 151 157 159
newline (150)
    on left: 160, on right: 158 159


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $end  reduce using rule 3 (script)

    prog            go to state 18
    script          go to state 19
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

  130 value: SYM_OPARE . $@34 expr SYM_CPARE

    $default  reduce using rule 129 ($@34)

    $@34  go to state 42


State 3

   99 logicfactor: MTH_NOT . $@20 comparison

    $default  reduce using rule 98 ($@20)

    $@20  go to state 43


State 4

   14 crlf: LF .

    $default  reduce using rule 14 (crlf)


State 5

   13 crlf: CR . LF

    LF  shift, and go to state 44


State 6

   47 funcall: V_ID . $@10 SYM_OPARE funcallHelper SYM_CPARE
   66 var_or_cte: V_ID .
   69 assign: V_ID . $@12 MTH_SEQUA expr
   73 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@13 structIndex
   89 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 45
    SYM_DOT    shift, and go to state 46

    SYM_OPARE  reduce using rule 46 ($@10)
    MTH_SEQUA  reduce using rule 68 ($@12)
    $default   reduce using rule 66 (var_or_cte)

    $@10  go to state 47
    $@12  go to state 48


State 7

   55 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 49


State 8

   56 basictypes: V_CHAR .

    $default  reduce using rule 56 (basictypes)


State 9

   57 basictypes: V_STRING .

    $default  reduce using rule 57 (basictypes)


State 10

   59 basictypes: V_INT .

    $default  reduce using rule 59 (basictypes)


State 11

   58 basictypes: V_DOUBLE .

    $default  reduce using rule 58 (basictypes)


State 12

   60 basictypes: V_BOOL .

    $default  reduce using rule 60 (basictypes)


State 13

   76 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 50


State 14

   82 matdec: V_MAT . V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 51


State 15

   87 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 52


State 16

   86 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 53


State 17

   19 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 54


State 18

    0 $accept: prog . $end

    $end  shift, and go to state 55


State 19

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 20

   12 script: crlf . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 56
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 21

    9 script: function . crlf $@3 script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 57


State 22

   11 script: generaldec . crlf $@4 script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 58


State 23

  126 value: funcall .

    $default  reduce using rule 126 (value)


State 24

   30 generaldec: vardec .
   36           | vardec . $@9 MTH_SEQUA expr

    MTH_SEQUA  reduce using rule 35 ($@9)
    $default   reduce using rule 30 (generaldec)

    $@9  go to state 59


State 25

   67 var_or_cte: basictypes .

    $default  reduce using rule 67 (var_or_cte)


State 26

  125 value: var_or_cte .

    $default  reduce using rule 125 (value)


State 27

    5 script: assign . crlf $@1 script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 60


State 28

   70 assign: structaccess . MTH_SEQUA expr
  127 value: structaccess .

    MTH_SEQUA  shift, and go to state 61

    $default  reduce using rule 127 (value)


State 29

   31 generaldec: arrdec .
   37           | arrdec . MTH_SEQUA arr

    MTH_SEQUA  shift, and go to state 62

    $default  reduce using rule 31 (generaldec)


State 30

   32 generaldec: matdec .
   38           | matdec . MTH_SEQUA mat

    MTH_SEQUA  shift, and go to state 63

    $default  reduce using rule 32 (generaldec)


State 31

   34 generaldec: elementdec .
   40           | elementdec . MTH_SEQUA funcall

    MTH_SEQUA  shift, and go to state 64

    $default  reduce using rule 34 (generaldec)


State 32

   33 generaldec: vectordec .
   39           | vectordec . MTH_SEQUA vector

    MTH_SEQUA  shift, and go to state 65

    $default  reduce using rule 33 (generaldec)


State 33

   71 assign: property . MTH_SEQUA expr
  128 value: property .

    MTH_SEQUA  shift, and go to state 66

    $default  reduce using rule 128 (value)


State 34

    7 script: expr . crlf $@2 script

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 67


State 35

   92 expr: logicoperation . $@16 MTH_OR $@17 expr
   93     | logicoperation .

    MTH_OR    reduce using rule 90 ($@16)
    $default  reduce using rule 93 (expr)

    $@16  go to state 68


State 36

   96 logicoperation: logicfactor . $@18 MTH_AND $@19 logicoperation
   97               | logicfactor .

    MTH_AND   reduce using rule 94 ($@18)
    $default  reduce using rule 97 (logicoperation)

    $@18  go to state 69


State 37

  100 logicfactor: comparison .

    $default  reduce using rule 100 (logicfactor)


State 38

  102 comparison: operation . comp_operator $@21 operation
  103           | operation .

    MTH_DEQUA  shift, and go to state 70
    MTH_GT     shift, and go to state 71
    MTH_LT     shift, and go to state 72
    MTH_GTEQ   shift, and go to state 73
    MTH_LTEQ   shift, and go to state 74
    MTH_NOTEQ  shift, and go to state 75

    $default  reduce using rule 103 (comparison)

    comp_operator  go to state 76


State 39

  106 operation: factor . $@22 MTH_PLUS $@23 operation
  109          | factor . $@24 MTH_MINUS $@25 operation
  110          | factor .

    MTH_PLUS   reduce using rule 104 ($@22)
    MTH_MINUS  reduce using rule 107 ($@24)
    $default   reduce using rule 110 (operation)

    $@22  go to state 77
    $@24  go to state 78


State 40

  113 factor: hvalue . $@26 MTH_ASTRK $@27 factor
  116       | hvalue . $@28 MTH_DIVIS $@29 factor
  117       | hvalue .

    MTH_ASTRK  reduce using rule 111 ($@26)
    MTH_DIVIS  reduce using rule 114 ($@28)
    $default   reduce using rule 117 (factor)

    $@26  go to state 79
    $@28  go to state 80


State 41

  120 hvalue: value . $@30 MTH_POWER $@31 hvalue
  123       | value . $@32 MTH_ROOT $@33 hvalue
  124       | value .

    MTH_POWER  reduce using rule 118 ($@30)
    MTH_ROOT   reduce using rule 121 ($@32)
    $default   reduce using rule 124 (hvalue)

    $@30  go to state 81
    $@32  go to state 82


State 42

  130 value: SYM_OPARE $@34 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 86
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 43

   99 logicfactor: MTH_NOT $@20 . comparison

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    comparison    go to state 87
    operation     go to state 38
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 44

   13 crlf: CR LF .

    $default  reduce using rule 13 (crlf)


State 45

   73 structaccess: V_ID SYM_OBRAC . expr SYM_CBRAC $@13 structIndex

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 88
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 46

   89 property: V_ID SYM_DOT . V_ID

    V_ID  shift, and go to state 89


State 47

   47 funcall: V_ID $@10 . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 90


State 48

   69 assign: V_ID $@12 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 91


State 49

   55 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 92


State 50

   76 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 93


State 51

   82 matdec: V_MAT V_ID . $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    $default  reduce using rule 81 ($@15)

    $@15  go to state 94


State 52

   87 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 87 (vectordec)


State 53

   86 elementdec: V_ELEM V_ID .

    $default  reduce using rule 86 (elementdec)


State 54

   19 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 95


State 55

    0 $accept: prog $end .

    $default  accept


State 56

   12 script: crlf script .

    $default  reduce using rule 12 (script)


State 57

    9 script: function crlf . $@3 script

    $default  reduce using rule 8 ($@3)

    $@3  go to state 96


State 58

   11 script: generaldec crlf . $@4 script

    $default  reduce using rule 10 ($@4)

    $@4  go to state 97


State 59

   36 generaldec: vardec $@9 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 98


State 60

    5 script: assign crlf . $@1 script

    $default  reduce using rule 4 ($@1)

    $@1  go to state 99


State 61

   70 assign: structaccess MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 100
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 62

   37 generaldec: arrdec MTH_SEQUA . arr

    SYM_OBRAC  shift, and go to state 101

    arr  go to state 102


State 63

   38 generaldec: matdec MTH_SEQUA . mat

    SYM_OBRAC  shift, and go to state 103

    mat  go to state 104


State 64

   40 generaldec: elementdec MTH_SEQUA . funcall

    V_ID  shift, and go to state 105

    funcall  go to state 106


State 65

   39 generaldec: vectordec MTH_SEQUA . vector

    SYM_OCURL  shift, and go to state 107

    vector  go to state 108


State 66

   71 assign: property MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 109
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 67

    7 script: expr crlf . $@2 script

    $default  reduce using rule 6 ($@2)

    $@2  go to state 110


State 68

   92 expr: logicoperation $@16 . MTH_OR $@17 expr

    MTH_OR  shift, and go to state 111


State 69

   96 logicoperation: logicfactor $@18 . MTH_AND $@19 logicoperation

    MTH_AND  shift, and go to state 112


State 70

  135 comp_operator: MTH_DEQUA .

    $default  reduce using rule 135 (comp_operator)


State 71

  131 comp_operator: MTH_GT .

    $default  reduce using rule 131 (comp_operator)


State 72

  133 comp_operator: MTH_LT .

    $default  reduce using rule 133 (comp_operator)


State 73

  132 comp_operator: MTH_GTEQ .

    $default  reduce using rule 132 (comp_operator)


State 74

  134 comp_operator: MTH_LTEQ .

    $default  reduce using rule 134 (comp_operator)


State 75

  136 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 136 (comp_operator)


State 76

  102 comparison: operation comp_operator . $@21 operation

    $default  reduce using rule 101 ($@21)

    $@21  go to state 113


State 77

  106 operation: factor $@22 . MTH_PLUS $@23 operation

    MTH_PLUS  shift, and go to state 114


State 78

  109 operation: factor $@24 . MTH_MINUS $@25 operation

    MTH_MINUS  shift, and go to state 115


State 79

  113 factor: hvalue $@26 . MTH_ASTRK $@27 factor

    MTH_ASTRK  shift, and go to state 116


State 80

  116 factor: hvalue $@28 . MTH_DIVIS $@29 factor

    MTH_DIVIS  shift, and go to state 117


State 81

  120 hvalue: value $@30 . MTH_POWER $@31 hvalue

    MTH_POWER  shift, and go to state 118


State 82

  123 hvalue: value $@32 . MTH_ROOT $@33 hvalue

    MTH_ROOT  shift, and go to state 119


State 83

   47 funcall: V_ID . $@10 SYM_OPARE funcallHelper SYM_CPARE
   66 var_or_cte: V_ID .
   73 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@13 structIndex
   89 property: V_ID . SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 45
    SYM_DOT    shift, and go to state 46

    SYM_OPARE  reduce using rule 46 ($@10)
    $default   reduce using rule 66 (var_or_cte)

    $@10  go to state 47


State 84

  127 value: structaccess .

    $default  reduce using rule 127 (value)


State 85

  128 value: property .

    $default  reduce using rule 128 (value)


State 86

  130 value: SYM_OPARE $@34 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 120


State 87

   99 logicfactor: MTH_NOT $@20 comparison .

    $default  reduce using rule 99 (logicfactor)


State 88

   73 structaccess: V_ID SYM_OBRAC expr . SYM_CBRAC $@13 structIndex

    SYM_CBRAC  shift, and go to state 121


State 89

   89 property: V_ID SYM_DOT V_ID .

    $default  reduce using rule 89 (property)


State 90

   47 funcall: V_ID $@10 SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 107
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    $default  reduce using rule 48 (funcallHelper)

    funcall         go to state 23
    funcallHelper   go to state 122
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    vector          go to state 123
    property        go to state 85
    expr            go to state 124
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 91

   69 assign: V_ID $@12 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 125
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 92

   55 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 131


State 93

   76 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 132


State 94

   82 matdec: V_MAT V_ID $@15 . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 133


State 95

   19 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 134


State 96

    9 script: function crlf $@3 . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 135
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 97

   11 script: generaldec crlf $@4 . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 136
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 98

   36 generaldec: vardec $@9 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 137
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 99

    5 script: assign crlf $@1 . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 138
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 100

   70 assign: structaccess MTH_SEQUA expr .

    $default  reduce using rule 70 (assign)


State 101

   77 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    arrHelper       go to state 139
    property        go to state 85
    expr            go to state 140
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 102

   37 generaldec: arrdec MTH_SEQUA arr .

    $default  reduce using rule 37 (generaldec)


State 103

   83 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 142


State 104

   38 generaldec: matdec MTH_SEQUA mat .

    $default  reduce using rule 38 (generaldec)


State 105

   47 funcall: V_ID . $@10 SYM_OPARE funcallHelper SYM_CPARE

    $default  reduce using rule 46 ($@10)

    $@10  go to state 47


State 106

   40 generaldec: elementdec MTH_SEQUA funcall .

    $default  reduce using rule 40 (generaldec)


State 107

   88 vector: SYM_OCURL . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 143
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 108

   39 generaldec: vectordec MTH_SEQUA vector .

    $default  reduce using rule 39 (generaldec)


State 109

   71 assign: property MTH_SEQUA expr .

    $default  reduce using rule 71 (assign)


State 110

    7 script: expr crlf $@2 . script

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_ORDER  shift, and go to state 17

    $default  reduce using rule 3 (script)

    script          go to state 144
    crlf            go to state 20
    function        go to state 21
    generaldec      go to state 22
    funcall         go to state 23
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 27
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 34
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 111

   92 expr: logicoperation $@16 MTH_OR . $@17 expr

    $default  reduce using rule 91 ($@17)

    $@17  go to state 145


State 112

   96 logicoperation: logicfactor $@18 MTH_AND . $@19 logicoperation

    $default  reduce using rule 95 ($@19)

    $@19  go to state 146


State 113

  102 comparison: operation comp_operator $@21 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    operation     go to state 147
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 114

  106 operation: factor $@22 MTH_PLUS . $@23 operation

    $default  reduce using rule 105 ($@23)

    $@23  go to state 148


State 115

  109 operation: factor $@24 MTH_MINUS . $@25 operation

    $default  reduce using rule 108 ($@25)

    $@25  go to state 149


State 116

  113 factor: hvalue $@26 MTH_ASTRK . $@27 factor

    $default  reduce using rule 112 ($@27)

    $@27  go to state 150


State 117

  116 factor: hvalue $@28 MTH_DIVIS . $@29 factor

    $default  reduce using rule 115 ($@29)

    $@29  go to state 151


State 118

  120 hvalue: value $@30 MTH_POWER . $@31 hvalue

    $default  reduce using rule 119 ($@31)

    $@31  go to state 152


State 119

  123 hvalue: value $@32 MTH_ROOT . $@33 hvalue

    $default  reduce using rule 122 ($@33)

    $@33  go to state 153


State 120

  130 value: SYM_OPARE $@34 expr SYM_CPARE .

    $default  reduce using rule 130 (value)


State 121

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC . $@13 structIndex

    $default  reduce using rule 72 ($@13)

    $@13  go to state 154


State 122

   47 funcall: V_ID $@10 SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 155


State 123

   51 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 156

    $default  reduce using rule 52 (funcallHelper2)

    funcallHelper2  go to state 157


State 124

   50 funcallHelper: expr . $@11 funcallHelper2

    $default  reduce using rule 49 ($@11)

    $@11  go to state 158


State 125

   69 assign: V_ID $@12 MTH_SEQUA expr .

    $default  reduce using rule 69 (assign)


State 126

   65 vartypes: T_BOOL .

    $default  reduce using rule 65 (vartypes)


State 127

   61 vartypes: T_INT .

    $default  reduce using rule 61 (vartypes)


State 128

   62 vartypes: T_DOUBLE .

    $default  reduce using rule 62 (vartypes)


State 129

   63 vartypes: T_CHAR .

    $default  reduce using rule 63 (vartypes)


State 130

   64 vartypes: T_STRING .

    $default  reduce using rule 64 (vartypes)


State 131

   55 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 55 (vardec)


State 132

   76 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 159


State 133

   82 matdec: V_MAT V_ID $@15 SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 126
    T_INT     shift, and go to state 127
    T_DOUBLE  shift, and go to state 128
    T_CHAR    shift, and go to state 129
    T_STRING  shift, and go to state 130

    vartypes  go to state 160


State 134

   19 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 161


State 135

    9 script: function crlf $@3 script .

    $default  reduce using rule 9 (script)


State 136

   11 script: generaldec crlf $@4 script .

    $default  reduce using rule 11 (script)


State 137

   36 generaldec: vardec $@9 MTH_SEQUA expr .

    $default  reduce using rule 36 (generaldec)


State 138

    5 script: assign crlf $@1 script .

    $default  reduce using rule 5 (script)


State 139

   77 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 162


State 140

   79 arrHelper: expr . SYM_COMMA $@14 arrHelper
   80          | expr .

    SYM_COMMA  shift, and go to state 163

    $default  reduce using rule 80 (arrHelper)


State 141

   16 optlf: crlf .

    $default  reduce using rule 16 (optlf)


State 142

   83 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 101

    arr        go to state 164
    matHelper  go to state 165


State 143

   88 vector: SYM_OCURL expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 166


State 144

    7 script: expr crlf $@2 script .

    $default  reduce using rule 7 (script)


State 145

   92 expr: logicoperation $@16 MTH_OR $@17 . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 167
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 146

   96 logicoperation: logicfactor $@18 MTH_AND $@19 . logicoperation

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    logicoperation  go to state 168
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 147

  102 comparison: operation comp_operator $@21 operation .

    $default  reduce using rule 102 (comparison)


State 148

  106 operation: factor $@22 MTH_PLUS $@23 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    operation     go to state 169
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 149

  109 operation: factor $@24 MTH_MINUS $@25 . operation

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    operation     go to state 170
    factor        go to state 39
    hvalue        go to state 40
    value         go to state 41


State 150

  113 factor: hvalue $@26 MTH_ASTRK $@27 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    factor        go to state 171
    hvalue        go to state 40
    value         go to state 41


State 151

  116 factor: hvalue $@28 MTH_DIVIS $@29 . factor

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    factor        go to state 172
    hvalue        go to state 40
    value         go to state 41


State 152

  120 hvalue: value $@30 MTH_POWER $@31 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    hvalue        go to state 173
    value         go to state 41


State 153

  123 hvalue: value $@32 MTH_ROOT $@33 . hvalue

    SYM_OPARE  shift, and go to state 2
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall       go to state 23
    basictypes    go to state 25
    var_or_cte    go to state 26
    structaccess  go to state 84
    property      go to state 85
    hvalue        go to state 174
    value         go to state 41


State 154

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@13 . structIndex

    SYM_OBRAC  shift, and go to state 175

    $default  reduce using rule 74 (structIndex)

    structIndex  go to state 176


State 155

   47 funcall: V_ID $@10 SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 47 (funcall)


State 156

   53 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 2
    SYM_OCURL  shift, and go to state 107
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    $default  reduce using rule 48 (funcallHelper)

    funcall         go to state 23
    funcallHelper   go to state 177
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    vector          go to state 123
    property        go to state 85
    expr            go to state 124
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 157

   51 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 51 (funcallHelper)


State 158

   50 funcallHelper: expr $@11 . funcallHelper2

    SYM_COMMA  shift, and go to state 156

    $default  reduce using rule 52 (funcallHelper2)

    funcallHelper2  go to state 178


State 159

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 179


State 160

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 180


State 161

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 17 ($@5)

    $@5  go to state 181


State 162

   77 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 77 (arr)


State 163

   79 arrHelper: expr SYM_COMMA . $@14 arrHelper

    $default  reduce using rule 78 ($@14)

    $@14  go to state 182


State 164

   84 matHelper: arr . SYM_COMMA optlf matHelper
   85          | arr . optlf

    SYM_COMMA  shift, and go to state 183
    LF         shift, and go to state 4
    CR         shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 184


State 165

   83 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 185


State 166

   88 vector: SYM_OCURL expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 186
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 167

   92 expr: logicoperation $@16 MTH_OR $@17 expr .

    $default  reduce using rule 92 (expr)


State 168

   96 logicoperation: logicfactor $@18 MTH_AND $@19 logicoperation .

    $default  reduce using rule 96 (logicoperation)


State 169

  106 operation: factor $@22 MTH_PLUS $@23 operation .

    $default  reduce using rule 106 (operation)


State 170

  109 operation: factor $@24 MTH_MINUS $@25 operation .

    $default  reduce using rule 109 (operation)


State 171

  113 factor: hvalue $@26 MTH_ASTRK $@27 factor .

    $default  reduce using rule 113 (factor)


State 172

  116 factor: hvalue $@28 MTH_DIVIS $@29 factor .

    $default  reduce using rule 116 (factor)


State 173

  120 hvalue: value $@30 MTH_POWER $@31 hvalue .

    $default  reduce using rule 120 (hvalue)


State 174

  123 hvalue: value $@32 MTH_ROOT $@33 hvalue .

    $default  reduce using rule 123 (hvalue)


State 175

   75 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 187
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 176

   73 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@13 structIndex .

    $default  reduce using rule 73 (structaccess)


State 177

   53 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 53 (funcallHelper2)


State 178

   50 funcallHelper: expr $@11 funcallHelper2 .

    $default  reduce using rule 50 (funcallHelper)


State 179

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 188


State 180

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 189


State 181

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 . funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 13
    V_MAT     shift, and go to state 14
    V_VECTOR  shift, and go to state 15
    V_ELEM    shift, and go to state 16

    $default  reduce using rule 20 (funparams)

    funparams   go to state 190
    generaldec  go to state 191
    vardec      go to state 24
    arrdec      go to state 29
    matdec      go to state 30
    elementdec  go to state 31
    vectordec   go to state 32


State 182

   79 arrHelper: expr SYM_COMMA $@14 . arrHelper

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    arrHelper       go to state 192
    property        go to state 85
    expr            go to state 140
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 183

   84 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 193


State 184

   85 matHelper: arr optlf .

    $default  reduce using rule 85 (matHelper)


State 185

   83 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 83 (mat)


State 186

   88 vector: SYM_OCURL expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 194


State 187

   75 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 195


State 188

   76 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 76 (arrdec)


State 189

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 196


State 190

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams . SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 197


State 191

   21 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 198

    $default  reduce using rule 22 (morefunparams)

    morefunparams  go to state 199


State 192

   79 arrHelper: expr SYM_COMMA $@14 arrHelper .

    $default  reduce using rule 79 (arrHelper)


State 193

   84 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 101

    arr        go to state 164
    matHelper  go to state 200


State 194

   88 vector: SYM_OCURL expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 88 (vector)


State 195

   75 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 75 (structIndex)


State 196

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 201


State 197

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE . $@6 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 18 ($@6)

    $@6  go to state 202


State 198

   23 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 7
    V_ARR     shift, and go to state 13
    V_MAT     shift, and go to state 14
    V_VECTOR  shift, and go to state 15
    V_ELEM    shift, and go to state 16

    generaldec  go to state 203
    vardec      go to state 24
    arrdec      go to state 29
    matdec      go to state 30
    elementdec  go to state 31
    vectordec   go to state 32


State 199

   21 funparams: generaldec morefunparams .

    $default  reduce using rule 21 (funparams)


State 200

   84 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 84 (matHelper)


State 201

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 204


State 202

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 205


State 203

   23 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 198

    $default  reduce using rule 22 (morefunparams)

    morefunparams  go to state 206


State 204

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 207


State 205

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 208


State 206

   23 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 23 (morefunparams)


State 207

   82 matdec: V_MAT V_ID $@15 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 82 (matdec)


State 208

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 209


State 209

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    $default  reduce using rule 24 (funbody)

    crlf            go to state 215
    funbody         go to state 216
    generaldec      go to state 217
    stmt            go to state 218
    funcall         go to state 23
    ret             go to state 219
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225


State 210

  141 if: LOG_IF . $@35 ifHelper ifHelper3

    $default  reduce using rule 140 ($@35)

    $@35  go to state 226


State 211

  151 for: LOG_FOR . forHelper SYM_ARROW V_ID $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 227
    V_ID       shift, and go to state 228

    forHelper  go to state 229
    stepfor    go to state 230


State 212

  157 while: LOG_WHILE . $@40 SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 155 ($@40)

    $@40  go to state 231


State 213

   44 stmt: RES_MEDIT .

    $default  reduce using rule 44 (stmt)


State 214

   54 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 232
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 215

   29 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    $default  reduce using rule 24 (funbody)

    crlf            go to state 215
    funbody         go to state 233
    generaldec      go to state 217
    stmt            go to state 218
    funcall         go to state 23
    ret             go to state 219
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225


State 216

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 234


State 217

   28 funbody: generaldec . crlf $@8 funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 235


State 218

   26 funbody: stmt . crlf $@7 funbody

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 236


State 219

   45 stmt: ret .

    $default  reduce using rule 45 (stmt)


State 220

   41 stmt: assign .

    $default  reduce using rule 41 (stmt)


State 221

   42 stmt: expr .

    $default  reduce using rule 42 (stmt)


State 222

   43 stmt: logicstruct .

    $default  reduce using rule 43 (stmt)


State 223

  137 logicstruct: if .

    $default  reduce using rule 137 (logicstruct)


State 224

  138 logicstruct: for .

    $default  reduce using rule 138 (logicstruct)


State 225

  139 logicstruct: while .

    $default  reduce using rule 139 (logicstruct)


State 226

  141 if: LOG_IF $@35 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 237

    ifHelper  go to state 238


State 227

  154 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 239
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 228

  152 forHelper: V_ID .

    $default  reduce using rule 152 (forHelper)


State 229

  151 for: LOG_FOR forHelper . SYM_ARROW V_ID $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 240


State 230

  153 forHelper: stepfor .

    $default  reduce using rule 153 (forHelper)


State 231

  157 while: LOG_WHILE $@40 . SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 241


State 232

   54 ret: RES_RETRN expr .

    $default  reduce using rule 54 (ret)


State 233

   29 funbody: crlf funbody .

    $default  reduce using rule 29 (funbody)


State 234

   19 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@5 funparams SYM_CPARE $@6 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 19 (function)


State 235

   28 funbody: generaldec crlf . $@8 funbody

    $default  reduce using rule 27 ($@8)

    $@8  go to state 242


State 236

   26 funbody: stmt crlf . $@7 funbody

    $default  reduce using rule 25 ($@7)

    $@7  go to state 243


State 237

  143 ifHelper: SYM_OPARE . expr SYM_CPARE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 244
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 238

  141 if: LOG_IF $@35 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 245

    $default  reduce using rule 147 (ifHelper3)

    ifHelper3  go to state 246


State 239

  154 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 247


State 240

  151 for: LOG_FOR forHelper SYM_ARROW . V_ID $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 248


State 241

  157 while: LOG_WHILE $@40 SYM_OPARE . expr SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 249
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 242

   28 funbody: generaldec crlf $@8 . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    $default  reduce using rule 24 (funbody)

    crlf            go to state 215
    funbody         go to state 250
    generaldec      go to state 217
    stmt            go to state 218
    funcall         go to state 23
    ret             go to state 219
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225


State 243

   26 funbody: stmt crlf $@7 . funbody

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    LF         shift, and go to state 4
    CR         shift, and go to state 5
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_VAR      shift, and go to state 7
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    V_ARR      shift, and go to state 13
    V_MAT      shift, and go to state 14
    V_VECTOR   shift, and go to state 15
    V_ELEM     shift, and go to state 16
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    $default  reduce using rule 24 (funbody)

    crlf            go to state 215
    funbody         go to state 251
    generaldec      go to state 217
    stmt            go to state 218
    funcall         go to state 23
    ret             go to state 219
    vardec          go to state 24
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    arrdec          go to state 29
    matdec          go to state 30
    elementdec      go to state 31
    vectordec       go to state 32
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225


State 244

  143 ifHelper: SYM_OPARE expr . SYM_CPARE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 252


State 245

  149 ifHelper3: LOG_ELSE . $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 148 ($@38)

    $@38  go to state 253


State 246

  141 if: LOG_IF $@35 ifHelper ifHelper3 .

    $default  reduce using rule 141 (if)


State 247

  154 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 254
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 248

  151 for: LOG_FOR forHelper SYM_ARROW V_ID . $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 150 ($@39)

    $@39  go to state 255


State 249

  157 while: LOG_WHILE $@40 SYM_OPARE expr . SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 256


State 250

   28 funbody: generaldec crlf $@8 funbody .

    $default  reduce using rule 28 (funbody)


State 251

   26 funbody: stmt crlf $@7 funbody .

    $default  reduce using rule 26 (funbody)


State 252

  143 ifHelper: SYM_OPARE expr SYM_CPARE . $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 142 ($@36)

    $@36  go to state 257


State 253

  149 ifHelper3: LOG_ELSE $@38 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 258


State 254

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 259


State 255

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 260


State 256

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE . $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 156 ($@41)

    $@41  go to state 261


State 257

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 262


State 258

  149 ifHelper3: LOG_ELSE $@38 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 263


State 259

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 83
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12

    funcall         go to state 23
    basictypes      go to state 25
    var_or_cte      go to state 26
    structaccess    go to state 84
    property        go to state 85
    expr            go to state 264
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41


State 260

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 265


State 261

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    $default  reduce using rule 15 (optlf)

    crlf   go to state 141
    optlf  go to state 266


State 262

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 267


State 263

  149 ifHelper3: LOG_ELSE $@38 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 268


State 264

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 269


State 265

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 270


State 266

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 271


State 267

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 272


State 268

  149 ifHelper3: LOG_ELSE $@38 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    stmt            go to state 273
    funcall         go to state 23
    ret             go to state 219
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225
    newlineCicle    go to state 274
    newline         go to state 275


State 269

  154 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 154 (stepfor)


State 270

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    stmt            go to state 273
    funcall         go to state 23
    ret             go to state 219
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225
    newlineCicle    go to state 276
    newline         go to state 275


State 271

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 277


State 272

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    stmt            go to state 273
    funcall         go to state 23
    ret             go to state 219
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225
    newlineCicle    go to state 278
    newline         go to state 275


State 273

  160 newline: stmt . crlf

    LF  shift, and go to state 4
    CR  shift, and go to state 5

    crlf  go to state 279


State 274

  149 ifHelper3: LOG_ELSE $@38 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 280


State 275

  158 newlineCicle: newline .
  159             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    $default  reduce using rule 158 (newlineCicle)

    stmt            go to state 273
    funcall         go to state 23
    ret             go to state 219
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225
    newlineCicle    go to state 281
    newline         go to state 275


State 276

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 282


State 277

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 2
    MTH_NOT    shift, and go to state 3
    V_ID       shift, and go to state 6
    LOG_IF     shift, and go to state 210
    LOG_FOR    shift, and go to state 211
    LOG_WHILE  shift, and go to state 212
    V_CHAR     shift, and go to state 8
    V_STRING   shift, and go to state 9
    V_INT      shift, and go to state 10
    V_DOUBLE   shift, and go to state 11
    V_BOOL     shift, and go to state 12
    RES_MEDIT  shift, and go to state 213
    RES_RETRN  shift, and go to state 214

    stmt            go to state 273
    funcall         go to state 23
    ret             go to state 219
    basictypes      go to state 25
    var_or_cte      go to state 26
    assign          go to state 220
    structaccess    go to state 28
    property        go to state 33
    expr            go to state 221
    logicoperation  go to state 35
    logicfactor     go to state 36
    comparison      go to state 37
    operation       go to state 38
    factor          go to state 39
    hvalue          go to state 40
    value           go to state 41
    logicstruct     go to state 222
    if              go to state 223
    for             go to state 224
    while           go to state 225
    newlineCicle    go to state 283
    newline         go to state 275


State 278

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 284


State 279

  160 newline: stmt crlf .

    $default  reduce using rule 160 (newline)


State 280

  149 ifHelper3: LOG_ELSE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 149 (ifHelper3)


State 281

  159 newlineCicle: newline newlineCicle .

    $default  reduce using rule 159 (newlineCicle)


State 282

  151 for: LOG_FOR forHelper SYM_ARROW V_ID $@39 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 151 (for)


State 283

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 285


State 284

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 286

    $default  reduce using rule 144 (ifHelper2)

    ifHelper2  go to state 287


State 285

  157 while: LOG_WHILE $@40 SYM_OPARE expr SYM_CPARE $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 157 (while)


State 286

  146 ifHelper2: LOG_ELIF . $@37 ifHelper

    $default  reduce using rule 145 ($@37)

    $@37  go to state 288


State 287

  143 ifHelper: SYM_OPARE expr SYM_CPARE $@36 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 143 (ifHelper)


State 288

  146 ifHelper2: LOG_ELIF $@37 . ifHelper

    SYM_OPARE  shift, and go to state 237

    ifHelper  go to state 289


State 289

  146 ifHelper2: LOG_ELIF $@37 ifHelper .

    $default  reduce using rule 146 (ifHelper2)
