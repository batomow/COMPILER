Terminals unused in grammar

   F_ID
   M_ID
   T_FLOAT


State 175 conflicts: 8 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty

    4 $@1: %empty

    5 script: function crlf $@1 script

    6 $@2: %empty

    7 script: vardec crlf $@2 script
    8       | crlf script

    9 crlf: CR LF
   10     | LF

   11 optlf: %empty
   12      | crlf

   13 $@3: %empty

   14 $@4: %empty

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

   16 funparams: %empty
   17          | generaldec morefunparams

   18 morefunparams: %empty
   19              | SYM_COMMA generaldec morefunparams

   20 funbody: %empty

   21 $@5: %empty

   22 funbody: stmt crlf $@5 funbody

   23 $@6: %empty

   24 funbody: generaldec crlf $@6 funbody
   25        | crlf funbody

   26 generaldec: vardec
   27           | arrdec
   28           | matdec
   29           | vectordec
   30           | elementdec

   31 $@7: %empty

   32 generaldec: vardec $@7 MTH_SEQUA expr
   33           | arrdec MTH_SEQUA arr
   34           | matdec MTH_SEQUA mat
   35           | vectordec MTH_SEQUA vector
   36           | elementdec MTH_SEQUA element

   37 stmt: assign
   38     | expr
   39     | logicstruct
   40     | RES_MEDIT
   41     | ret

   42 $@8: %empty

   43 funcall: V_ID $@8 SYM_OPARE funcallHelper SYM_CPARE

   44 funcallHelper: %empty

   45 $@9: %empty

   46 funcallHelper: expr $@9 funcallHelper2
   47              | vector funcallHelper2

   48 funcallHelper2: %empty
   49               | SYM_COMMA funcallHelper

   50 ret: RES_RETRN expr

   51 vardec: V_VAR V_ID SYM_COLON vartypes

   52 basictypes: V_CHAR
   53           | V_STRING
   54           | V_DOUBLE
   55           | V_INT
   56           | V_BOOL

   57 vartypes: T_INT
   58         | T_DOUBLE
   59         | T_CHAR
   60         | T_STRING
   61         | T_BOOL

   62 var_or_cte: V_ID
   63           | basictypes

   64 $@10: %empty

   65 assign: V_ID $@10 MTH_SEQUA expr
   66       | structaccess MTH_SEQUA expr
   67       | property MTH_SEQUA expr

   68 $@11: %empty

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@11 structIndex

   70 structIndex: %empty
   71            | SYM_OBRAC expr SYM_CBRAC

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   73 arr: SYM_OBRAC arrHelper SYM_CBRAC

   74 $@12: %empty

   75 arrHelper: expr SYM_COMMA $@12 arrHelper
   76          | expr

   77 $@13: %empty

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   79 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   80 matHelper: arr SYM_COMMA optlf matHelper
   81          | arr optlf

   82 elementdec: V_ELEM V_ID

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

   84 vectordec: V_VECTOR V_ID

   85 vector: SYM_OPARE expr SYM_COMMA expr SYM_CPARE

   86 $@14: %empty

   87 property: V_ID $@14 SYM_DOT V_ID

   88 $@15: %empty

   89 $@16: %empty

   90 expr: logicoperation $@15 MTH_OR $@16 expr
   91     | logicoperation

   92 $@17: %empty

   93 $@18: %empty

   94 logicoperation: logicfactor $@17 MTH_AND $@18 logicoperation
   95               | logicfactor

   96 $@19: %empty

   97 logicfactor: MTH_NOT $@19 comparison
   98            | comparison

   99 $@20: %empty

  100 comparison: operation comp_operator $@20 operation
  101           | operation

  102 $@21: %empty

  103 $@22: %empty

  104 operation: factor $@21 MTH_PLUS $@22 operation

  105 $@23: %empty

  106 $@24: %empty

  107 operation: factor $@23 MTH_MINUS $@24 operation
  108          | factor

  109 $@25: %empty

  110 $@26: %empty

  111 factor: hvalue $@25 MTH_ASTRK $@26 factor

  112 $@27: %empty

  113 $@28: %empty

  114 factor: hvalue $@27 MTH_DIVIS $@28 factor
  115       | hvalue

  116 $@29: %empty

  117 $@30: %empty

  118 hvalue: value $@29 MTH_POWER $@30 hvalue

  119 $@31: %empty

  120 $@32: %empty

  121 hvalue: value $@31 MTH_ROOT $@32 hvalue
  122       | value

  123 value: var_or_cte
  124      | funcall
  125      | structaccess
  126      | property

  127 $@33: %empty

  128 value: SYM_OPARE $@33 expr SYM_CPARE

  129 comp_operator: MTH_GT
  130              | MTH_GTEQ
  131              | MTH_LT
  132              | MTH_LTEQ
  133              | MTH_DEQUA
  134              | MTH_NOTEQ

  135 logicstruct: if
  136            | for
  137            | while

  138 $@34: %empty

  139 if: LOG_IF $@34 ifHelper ifHelper3

  140 $@35: %empty

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  142 ifHelper2: %empty

  143 $@36: %empty

  144 ifHelper2: LOG_ELIF $@36 ifHelper

  145 ifHelper3: %empty

  146 $@37: %empty

  147 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  148 $@38: %empty

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  150 forHelper: V_ID
  151          | stepfor

  152 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  153 $@39: %empty

  154 $@40: %empty

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  156 newlineCicle: newline
  157             | newline newlineCicle

  158 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 69 71 72 73 78 79 152
SYM_CBRAC (259) 69 71 72 73 78 79 152
SYM_OPARE (260) 15 43 85 128 141 155
SYM_CPARE (261) 15 43 85 128 141 155
SYM_OCURL (262) 15 83 141 147 149 155
SYM_CCURL (263) 15 83 141 147 149 155
SYM_COMMA (264) 19 49 75 80 83 85 152
SYM_ARROW (265) 149
SYM_COLON (266) 15 51 72 78
SYM_DOT (267) 87
MTH_SEQUA (268) 32 33 34 35 36 65 66 67
MTH_DEQUA (269) 133
MTH_GT (270) 129
MTH_LT (271) 131
MTH_GTEQ (272) 130
MTH_LTEQ (273) 132
MTH_NOT (274) 97
MTH_NOTEQ (275) 134
MTH_PLUS (276) 104
MTH_MINUS (277) 107
MTH_ASTRK (278) 111
MTH_DIVIS (279) 114
MTH_POWER (280) 118
MTH_ROOT (281) 121
MTH_AND (282) 94
MTH_OR (283) 90
LF (284) 9 10
CR (285) 9
V_ID (286) 15 43 51 62 65 69 72 78 82 84 87 149 150
F_ID (287)
M_ID (288)
LOG_IF (289) 139
LOG_ELIF (290) 144
LOG_ELSE (291) 147
LOG_FOR (292) 149
LOG_WHILE (293) 155
V_VAR (294) 51
V_CHAR (295) 52
V_STRING (296) 53
V_INT (297) 55 72 78
V_DOUBLE (298) 54
V_BOOL (299) 56
V_ARR (300) 72
V_MAT (301) 78
V_VECTOR (302) 84
V_ELEM (303) 82
T_BOOL (304) 61
T_INT (305) 57
T_FLOAT (306)
T_DOUBLE (307) 58
T_CHAR (308) 59
T_STRING (309) 60
RES_ORDER (310) 15
RES_MEDIT (311) 40
RES_RETRN (312) 50


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
prog (59)
    on left: 1 2, on right: 0
script (60)
    on left: 3 5 7 8, on right: 1 5 7 8
$@1 (61)
    on left: 4, on right: 5
$@2 (62)
    on left: 6, on right: 7
crlf (63)
    on left: 9 10, on right: 5 7 8 12 15 22 24 25 141 147 149 155 158
optlf (64)
    on left: 11 12, on right: 15 79 80 81 141 147 149 155
function (65)
    on left: 15, on right: 5
$@3 (66)
    on left: 13, on right: 15
$@4 (67)
    on left: 14, on right: 15
funparams (68)
    on left: 16 17, on right: 15
morefunparams (69)
    on left: 18 19, on right: 17 19
funbody (70)
    on left: 20 22 24 25, on right: 15 22 24 25
$@5 (71)
    on left: 21, on right: 22
$@6 (72)
    on left: 23, on right: 24
generaldec (73)
    on left: 26 27 28 29 30 32 33 34 35 36, on right: 17 19 24
$@7 (74)
    on left: 31, on right: 32
stmt (75)
    on left: 37 38 39 40 41, on right: 22 158
funcall (76)
    on left: 43, on right: 124
$@8 (77)
    on left: 42, on right: 43
funcallHelper (78)
    on left: 44 46 47, on right: 43 49
$@9 (79)
    on left: 45, on right: 46
funcallHelper2 (80)
    on left: 48 49, on right: 46 47
ret (81)
    on left: 50, on right: 41
vardec (82)
    on left: 51, on right: 7 26 32
basictypes (83)
    on left: 52 53 54 55 56, on right: 63
vartypes (84)
    on left: 57 58 59 60 61, on right: 15 51 72 78
var_or_cte (85)
    on left: 62 63, on right: 123
assign (86)
    on left: 65 66 67, on right: 37
$@10 (87)
    on left: 64, on right: 65
structaccess (88)
    on left: 69, on right: 66 125
$@11 (89)
    on left: 68, on right: 69
structIndex (90)
    on left: 70 71, on right: 69
arrdec (91)
    on left: 72, on right: 27 33
arr (92)
    on left: 73, on right: 33 80 81
arrHelper (93)
    on left: 75 76, on right: 73 75
$@12 (94)
    on left: 74, on right: 75
matdec (95)
    on left: 78, on right: 28 34
$@13 (96)
    on left: 77, on right: 78
mat (97)
    on left: 79, on right: 34
matHelper (98)
    on left: 80 81, on right: 79 80
elementdec (99)
    on left: 82, on right: 30 36
element (100)
    on left: 83, on right: 36
vectordec (101)
    on left: 84, on right: 29 35
vector (102)
    on left: 85, on right: 35 47
property (103)
    on left: 87, on right: 67 126
$@14 (104)
    on left: 86, on right: 87
expr (105)
    on left: 90 91, on right: 32 38 46 50 65 66 67 69 71 75 76 83 85
    90 128 141 152 155
$@15 (106)
    on left: 88, on right: 90
$@16 (107)
    on left: 89, on right: 90
logicoperation (108)
    on left: 94 95, on right: 90 91 94
$@17 (109)
    on left: 92, on right: 94
$@18 (110)
    on left: 93, on right: 94
logicfactor (111)
    on left: 97 98, on right: 94 95
$@19 (112)
    on left: 96, on right: 97
comparison (113)
    on left: 100 101, on right: 97 98
$@20 (114)
    on left: 99, on right: 100
operation (115)
    on left: 104 107 108, on right: 100 101 104 107
$@21 (116)
    on left: 102, on right: 104
$@22 (117)
    on left: 103, on right: 104
$@23 (118)
    on left: 105, on right: 107
$@24 (119)
    on left: 106, on right: 107
factor (120)
    on left: 111 114 115, on right: 104 107 108 111 114
$@25 (121)
    on left: 109, on right: 111
$@26 (122)
    on left: 110, on right: 111
$@27 (123)
    on left: 112, on right: 114
$@28 (124)
    on left: 113, on right: 114
hvalue (125)
    on left: 118 121 122, on right: 111 114 115 118 121
$@29 (126)
    on left: 116, on right: 118
$@30 (127)
    on left: 117, on right: 118
$@31 (128)
    on left: 119, on right: 121
$@32 (129)
    on left: 120, on right: 121
value (130)
    on left: 123 124 125 126 128, on right: 118 121 122
$@33 (131)
    on left: 127, on right: 128
comp_operator (132)
    on left: 129 130 131 132 133 134, on right: 100
logicstruct (133)
    on left: 135 136 137, on right: 39
if (134)
    on left: 139, on right: 135
$@34 (135)
    on left: 138, on right: 139
ifHelper (136)
    on left: 141, on right: 139 144
$@35 (137)
    on left: 140, on right: 141
ifHelper2 (138)
    on left: 142 144, on right: 141
$@36 (139)
    on left: 143, on right: 144
ifHelper3 (140)
    on left: 145 147, on right: 139
$@37 (141)
    on left: 146, on right: 147
for (142)
    on left: 149, on right: 136
$@38 (143)
    on left: 148, on right: 149
forHelper (144)
    on left: 150 151, on right: 149
stepfor (145)
    on left: 152, on right: 151
while (146)
    on left: 155, on right: 137
$@39 (147)
    on left: 153, on right: 155
$@40 (148)
    on left: 154, on right: 155
newlineCicle (149)
    on left: 156 157, on right: 141 147 149 155 157
newline (150)
    on left: 158, on right: 156 157


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $end  reduce using rule 3 (script)

    prog      go to state 6
    script    go to state 7
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

   10 crlf: LF .

    $default  reduce using rule 10 (crlf)


State 3

    9 crlf: CR . LF

    LF  shift, and go to state 11


State 4

   51 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 12


State 5

   15 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 13


State 6

    0 $accept: prog . $end

    $end  shift, and go to state 14


State 7

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 8

    8 script: crlf . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $default  reduce using rule 3 (script)

    script    go to state 15
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 9

    5 script: function . crlf $@1 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 16


State 10

    7 script: vardec . crlf $@2 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 17


State 11

    9 crlf: CR LF .

    $default  reduce using rule 9 (crlf)


State 12

   51 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 18


State 13

   15 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 19


State 14

    0 $accept: prog $end .

    $default  accept


State 15

    8 script: crlf script .

    $default  reduce using rule 8 (script)


State 16

    5 script: function crlf . $@1 script

    $default  reduce using rule 4 ($@1)

    $@1  go to state 20


State 17

    7 script: vardec crlf . $@2 script

    $default  reduce using rule 6 ($@2)

    $@2  go to state 21


State 18

   51 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 27


State 19

   15 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 28


State 20

    5 script: function crlf $@1 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $default  reduce using rule 3 (script)

    script    go to state 29
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 21

    7 script: vardec crlf $@2 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    RES_ORDER  shift, and go to state 5

    $default  reduce using rule 3 (script)

    script    go to state 30
    crlf      go to state 8
    function  go to state 9
    vardec    go to state 10


State 22

   61 vartypes: T_BOOL .

    $default  reduce using rule 61 (vartypes)


State 23

   57 vartypes: T_INT .

    $default  reduce using rule 57 (vartypes)


State 24

   58 vartypes: T_DOUBLE .

    $default  reduce using rule 58 (vartypes)


State 25

   59 vartypes: T_CHAR .

    $default  reduce using rule 59 (vartypes)


State 26

   60 vartypes: T_STRING .

    $default  reduce using rule 60 (vartypes)


State 27

   51 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 51 (vardec)


State 28

   15 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 31


State 29

    5 script: function crlf $@1 script .

    $default  reduce using rule 5 (script)


State 30

    7 script: vardec crlf $@2 script .

    $default  reduce using rule 7 (script)


State 31

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 13 ($@3)

    $@3  go to state 32


State 32

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 . funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 33
    V_MAT     shift, and go to state 34
    V_VECTOR  shift, and go to state 35
    V_ELEM    shift, and go to state 36

    $default  reduce using rule 16 (funparams)

    funparams   go to state 37
    generaldec  go to state 38
    vardec      go to state 39
    arrdec      go to state 40
    matdec      go to state 41
    elementdec  go to state 42
    vectordec   go to state 43


State 33

   72 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 44


State 34

   78 matdec: V_MAT . V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 45


State 35

   84 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 46


State 36

   82 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 47


State 37

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams . SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 48


State 38

   17 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 49

    $default  reduce using rule 18 (morefunparams)

    morefunparams  go to state 50


State 39

   26 generaldec: vardec .
   32           | vardec . $@7 MTH_SEQUA expr

    MTH_SEQUA  reduce using rule 31 ($@7)
    $default   reduce using rule 26 (generaldec)

    $@7  go to state 51


State 40

   27 generaldec: arrdec .
   33           | arrdec . MTH_SEQUA arr

    MTH_SEQUA  shift, and go to state 52

    $default  reduce using rule 27 (generaldec)


State 41

   28 generaldec: matdec .
   34           | matdec . MTH_SEQUA mat

    MTH_SEQUA  shift, and go to state 53

    $default  reduce using rule 28 (generaldec)


State 42

   30 generaldec: elementdec .
   36           | elementdec . MTH_SEQUA element

    MTH_SEQUA  shift, and go to state 54

    $default  reduce using rule 30 (generaldec)


State 43

   29 generaldec: vectordec .
   35           | vectordec . MTH_SEQUA vector

    MTH_SEQUA  shift, and go to state 55

    $default  reduce using rule 29 (generaldec)


State 44

   72 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 56


State 45

   78 matdec: V_MAT V_ID . $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    $default  reduce using rule 77 ($@13)

    $@13  go to state 57


State 46

   84 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 84 (vectordec)


State 47

   82 elementdec: V_ELEM V_ID .

    $default  reduce using rule 82 (elementdec)


State 48

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE . $@4 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 14 ($@4)

    $@4  go to state 58


State 49

   19 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 33
    V_MAT     shift, and go to state 34
    V_VECTOR  shift, and go to state 35
    V_ELEM    shift, and go to state 36

    generaldec  go to state 59
    vardec      go to state 39
    arrdec      go to state 40
    matdec      go to state 41
    elementdec  go to state 42
    vectordec   go to state 43


State 50

   17 funparams: generaldec morefunparams .

    $default  reduce using rule 17 (funparams)


State 51

   32 generaldec: vardec $@7 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 60


State 52

   33 generaldec: arrdec MTH_SEQUA . arr

    SYM_OBRAC  shift, and go to state 61

    arr  go to state 62


State 53

   34 generaldec: matdec MTH_SEQUA . mat

    SYM_OBRAC  shift, and go to state 63

    mat  go to state 64


State 54

   36 generaldec: elementdec MTH_SEQUA . element

    SYM_OCURL  shift, and go to state 65

    element  go to state 66


State 55

   35 generaldec: vectordec MTH_SEQUA . vector

    SYM_OPARE  shift, and go to state 67

    vector  go to state 68


State 56

   72 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 69


State 57

   78 matdec: V_MAT V_ID $@13 . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 70


State 58

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 72


State 59

   19 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 49

    $default  reduce using rule 18 (morefunparams)

    morefunparams  go to state 73


State 60

   32 generaldec: vardec $@7 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 87
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 61

   73 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    arrHelper       go to state 95
    property        go to state 86
    expr            go to state 96
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 62

   33 generaldec: arrdec MTH_SEQUA arr .

    $default  reduce using rule 33 (generaldec)


State 63

   79 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 97


State 64

   34 generaldec: matdec MTH_SEQUA mat .

    $default  reduce using rule 34 (generaldec)


State 65

   83 element: SYM_OCURL . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 98
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 66

   36 generaldec: elementdec MTH_SEQUA element .

    $default  reduce using rule 36 (generaldec)


State 67

   85 vector: SYM_OPARE . expr SYM_COMMA expr SYM_CPARE

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 99
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 68

   35 generaldec: vectordec MTH_SEQUA vector .

    $default  reduce using rule 35 (generaldec)


State 69

   72 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 100


State 70

   78 matdec: V_MAT V_ID $@13 SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 22
    T_INT     shift, and go to state 23
    T_DOUBLE  shift, and go to state 24
    T_CHAR    shift, and go to state 25
    T_STRING  shift, and go to state 26

    vartypes  go to state 101


State 71

   12 optlf: crlf .

    $default  reduce using rule 12 (optlf)


State 72

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 102


State 73

   19 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 19 (morefunparams)


State 74

  128 value: SYM_OPARE . $@33 expr SYM_CPARE

    $default  reduce using rule 127 ($@33)

    $@33  go to state 103


State 75

   97 logicfactor: MTH_NOT . $@19 comparison

    $default  reduce using rule 96 ($@19)

    $@19  go to state 104


State 76

   43 funcall: V_ID . $@8 SYM_OPARE funcallHelper SYM_CPARE
   62 var_or_cte: V_ID .
   69 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@11 structIndex
   87 property: V_ID . $@14 SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 105

    SYM_OPARE  reduce using rule 42 ($@8)
    SYM_DOT    reduce using rule 86 ($@14)
    $default   reduce using rule 62 (var_or_cte)

    $@8   go to state 106
    $@14  go to state 107


State 77

   52 basictypes: V_CHAR .

    $default  reduce using rule 52 (basictypes)


State 78

   53 basictypes: V_STRING .

    $default  reduce using rule 53 (basictypes)


State 79

   55 basictypes: V_INT .

    $default  reduce using rule 55 (basictypes)


State 80

   54 basictypes: V_DOUBLE .

    $default  reduce using rule 54 (basictypes)


State 81

   56 basictypes: V_BOOL .

    $default  reduce using rule 56 (basictypes)


State 82

  124 value: funcall .

    $default  reduce using rule 124 (value)


State 83

   63 var_or_cte: basictypes .

    $default  reduce using rule 63 (var_or_cte)


State 84

  123 value: var_or_cte .

    $default  reduce using rule 123 (value)


State 85

  125 value: structaccess .

    $default  reduce using rule 125 (value)


State 86

  126 value: property .

    $default  reduce using rule 126 (value)


State 87

   32 generaldec: vardec $@7 MTH_SEQUA expr .

    $default  reduce using rule 32 (generaldec)


State 88

   90 expr: logicoperation . $@15 MTH_OR $@16 expr
   91     | logicoperation .

    MTH_OR    reduce using rule 88 ($@15)
    $default  reduce using rule 91 (expr)

    $@15  go to state 108


State 89

   94 logicoperation: logicfactor . $@17 MTH_AND $@18 logicoperation
   95               | logicfactor .

    MTH_AND   reduce using rule 92 ($@17)
    $default  reduce using rule 95 (logicoperation)

    $@17  go to state 109


State 90

   98 logicfactor: comparison .

    $default  reduce using rule 98 (logicfactor)


State 91

  100 comparison: operation . comp_operator $@20 operation
  101           | operation .

    MTH_DEQUA  shift, and go to state 110
    MTH_GT     shift, and go to state 111
    MTH_LT     shift, and go to state 112
    MTH_GTEQ   shift, and go to state 113
    MTH_LTEQ   shift, and go to state 114
    MTH_NOTEQ  shift, and go to state 115

    $default  reduce using rule 101 (comparison)

    comp_operator  go to state 116


State 92

  104 operation: factor . $@21 MTH_PLUS $@22 operation
  107          | factor . $@23 MTH_MINUS $@24 operation
  108          | factor .

    MTH_PLUS   reduce using rule 102 ($@21)
    MTH_MINUS  reduce using rule 105 ($@23)
    $default   reduce using rule 108 (operation)

    $@21  go to state 117
    $@23  go to state 118


State 93

  111 factor: hvalue . $@25 MTH_ASTRK $@26 factor
  114       | hvalue . $@27 MTH_DIVIS $@28 factor
  115       | hvalue .

    MTH_ASTRK  reduce using rule 109 ($@25)
    MTH_DIVIS  reduce using rule 112 ($@27)
    $default   reduce using rule 115 (factor)

    $@25  go to state 119
    $@27  go to state 120


State 94

  118 hvalue: value . $@29 MTH_POWER $@30 hvalue
  121       | value . $@31 MTH_ROOT $@32 hvalue
  122       | value .

    MTH_POWER  reduce using rule 116 ($@29)
    MTH_ROOT   reduce using rule 119 ($@31)
    $default   reduce using rule 122 (hvalue)

    $@29  go to state 121
    $@31  go to state 122


State 95

   73 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 123


State 96

   75 arrHelper: expr . SYM_COMMA $@12 arrHelper
   76          | expr .

    SYM_COMMA  shift, and go to state 124

    $default  reduce using rule 76 (arrHelper)


State 97

   79 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 61

    arr        go to state 125
    matHelper  go to state 126


State 98

   83 element: SYM_OCURL expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 127


State 99

   85 vector: SYM_OPARE expr . SYM_COMMA expr SYM_CPARE

    SYM_COMMA  shift, and go to state 128


State 100

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 129


State 101

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 130


State 102

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 131


State 103

  128 value: SYM_OPARE $@33 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 132
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 104

   97 logicfactor: MTH_NOT $@19 . comparison

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    comparison    go to state 133
    operation     go to state 91
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 105

   69 structaccess: V_ID SYM_OBRAC . expr SYM_CBRAC $@11 structIndex

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 134
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 106

   43 funcall: V_ID $@8 . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 135


State 107

   87 property: V_ID $@14 . SYM_DOT V_ID

    SYM_DOT  shift, and go to state 136


State 108

   90 expr: logicoperation $@15 . MTH_OR $@16 expr

    MTH_OR  shift, and go to state 137


State 109

   94 logicoperation: logicfactor $@17 . MTH_AND $@18 logicoperation

    MTH_AND  shift, and go to state 138


State 110

  133 comp_operator: MTH_DEQUA .

    $default  reduce using rule 133 (comp_operator)


State 111

  129 comp_operator: MTH_GT .

    $default  reduce using rule 129 (comp_operator)


State 112

  131 comp_operator: MTH_LT .

    $default  reduce using rule 131 (comp_operator)


State 113

  130 comp_operator: MTH_GTEQ .

    $default  reduce using rule 130 (comp_operator)


State 114

  132 comp_operator: MTH_LTEQ .

    $default  reduce using rule 132 (comp_operator)


State 115

  134 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 134 (comp_operator)


State 116

  100 comparison: operation comp_operator . $@20 operation

    $default  reduce using rule 99 ($@20)

    $@20  go to state 139


State 117

  104 operation: factor $@21 . MTH_PLUS $@22 operation

    MTH_PLUS  shift, and go to state 140


State 118

  107 operation: factor $@23 . MTH_MINUS $@24 operation

    MTH_MINUS  shift, and go to state 141


State 119

  111 factor: hvalue $@25 . MTH_ASTRK $@26 factor

    MTH_ASTRK  shift, and go to state 142


State 120

  114 factor: hvalue $@27 . MTH_DIVIS $@28 factor

    MTH_DIVIS  shift, and go to state 143


State 121

  118 hvalue: value $@29 . MTH_POWER $@30 hvalue

    MTH_POWER  shift, and go to state 144


State 122

  121 hvalue: value $@31 . MTH_ROOT $@32 hvalue

    MTH_ROOT  shift, and go to state 145


State 123

   73 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 73 (arr)


State 124

   75 arrHelper: expr SYM_COMMA . $@12 arrHelper

    $default  reduce using rule 74 ($@12)

    $@12  go to state 146


State 125

   80 matHelper: arr . SYM_COMMA optlf matHelper
   81          | arr . optlf

    SYM_COMMA  shift, and go to state 147
    LF         shift, and go to state 2
    CR         shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 148


State 126

   79 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 149


State 127

   83 element: SYM_OCURL expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 150
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 128

   85 vector: SYM_OPARE expr SYM_COMMA . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 151
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 129

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 152


State 130

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 153


State 131

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 161
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 132

  128 value: SYM_OPARE $@33 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 173


State 133

   97 logicfactor: MTH_NOT $@19 comparison .

    $default  reduce using rule 97 (logicfactor)


State 134

   69 structaccess: V_ID SYM_OBRAC expr . SYM_CBRAC $@11 structIndex

    SYM_CBRAC  shift, and go to state 174


State 135

   43 funcall: V_ID $@8 SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 175
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    $default  reduce using rule 44 (funcallHelper)

    funcall         go to state 82
    funcallHelper   go to state 176
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    vector          go to state 177
    property        go to state 86
    expr            go to state 178
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 136

   87 property: V_ID $@14 SYM_DOT . V_ID

    V_ID  shift, and go to state 179


State 137

   90 expr: logicoperation $@15 MTH_OR . $@16 expr

    $default  reduce using rule 89 ($@16)

    $@16  go to state 180


State 138

   94 logicoperation: logicfactor $@17 MTH_AND . $@18 logicoperation

    $default  reduce using rule 93 ($@18)

    $@18  go to state 181


State 139

  100 comparison: operation comp_operator $@20 . operation

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 182
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 140

  104 operation: factor $@21 MTH_PLUS . $@22 operation

    $default  reduce using rule 103 ($@22)

    $@22  go to state 183


State 141

  107 operation: factor $@23 MTH_MINUS . $@24 operation

    $default  reduce using rule 106 ($@24)

    $@24  go to state 184


State 142

  111 factor: hvalue $@25 MTH_ASTRK . $@26 factor

    $default  reduce using rule 110 ($@26)

    $@26  go to state 185


State 143

  114 factor: hvalue $@27 MTH_DIVIS . $@28 factor

    $default  reduce using rule 113 ($@28)

    $@28  go to state 186


State 144

  118 hvalue: value $@29 MTH_POWER . $@30 hvalue

    $default  reduce using rule 117 ($@30)

    $@30  go to state 187


State 145

  121 hvalue: value $@31 MTH_ROOT . $@32 hvalue

    $default  reduce using rule 120 ($@32)

    $@32  go to state 188


State 146

   75 arrHelper: expr SYM_COMMA $@12 . arrHelper

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    arrHelper       go to state 189
    property        go to state 86
    expr            go to state 96
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 147

   80 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 190


State 148

   81 matHelper: arr optlf .

    $default  reduce using rule 81 (matHelper)


State 149

   79 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 79 (mat)


State 150

   83 element: SYM_OCURL expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 191


State 151

   85 vector: SYM_OPARE expr SYM_COMMA expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 192


State 152

   72 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 72 (arrdec)


State 153

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 193


State 154

   43 funcall: V_ID . $@8 SYM_OPARE funcallHelper SYM_CPARE
   62 var_or_cte: V_ID .
   65 assign: V_ID . $@10 MTH_SEQUA expr
   69 structaccess: V_ID . SYM_OBRAC expr SYM_CBRAC $@11 structIndex
   87 property: V_ID . $@14 SYM_DOT V_ID

    SYM_OBRAC  shift, and go to state 105

    SYM_OPARE  reduce using rule 42 ($@8)
    SYM_DOT    reduce using rule 86 ($@14)
    MTH_SEQUA  reduce using rule 64 ($@10)
    $default   reduce using rule 62 (var_or_cte)

    $@8   go to state 106
    $@10  go to state 194
    $@14  go to state 107


State 155

  139 if: LOG_IF . $@34 ifHelper ifHelper3

    $default  reduce using rule 138 ($@34)

    $@34  go to state 195


State 156

  149 for: LOG_FOR . forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 196
    V_ID       shift, and go to state 197

    forHelper  go to state 198
    stepfor    go to state 199


State 157

  155 while: LOG_WHILE . $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 153 ($@39)

    $@39  go to state 200


State 158

   40 stmt: RES_MEDIT .

    $default  reduce using rule 40 (stmt)


State 159

   50 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 201
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 160

   25 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 202
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 161

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 203


State 162

   24 funbody: generaldec . crlf $@6 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 204


State 163

   22 funbody: stmt . crlf $@5 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 205


State 164

   41 stmt: ret .

    $default  reduce using rule 41 (stmt)


State 165

   37 stmt: assign .

    $default  reduce using rule 37 (stmt)


State 166

   66 assign: structaccess . MTH_SEQUA expr
  125 value: structaccess .

    MTH_SEQUA  shift, and go to state 206

    $default  reduce using rule 125 (value)


State 167

   67 assign: property . MTH_SEQUA expr
  126 value: property .

    MTH_SEQUA  shift, and go to state 207

    $default  reduce using rule 126 (value)


State 168

   38 stmt: expr .

    $default  reduce using rule 38 (stmt)


State 169

   39 stmt: logicstruct .

    $default  reduce using rule 39 (stmt)


State 170

  135 logicstruct: if .

    $default  reduce using rule 135 (logicstruct)


State 171

  136 logicstruct: for .

    $default  reduce using rule 136 (logicstruct)


State 172

  137 logicstruct: while .

    $default  reduce using rule 137 (logicstruct)


State 173

  128 value: SYM_OPARE $@33 expr SYM_CPARE .

    $default  reduce using rule 128 (value)


State 174

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC . $@11 structIndex

    $default  reduce using rule 68 ($@11)

    $@11  go to state 208


State 175

   85 vector: SYM_OPARE . expr SYM_COMMA expr SYM_CPARE
  128 value: SYM_OPARE . $@33 expr SYM_CPARE

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    SYM_OPARE  [reduce using rule 127 ($@33)]
    MTH_NOT    [reduce using rule 127 ($@33)]
    V_ID       [reduce using rule 127 ($@33)]
    V_CHAR     [reduce using rule 127 ($@33)]
    V_STRING   [reduce using rule 127 ($@33)]
    V_INT      [reduce using rule 127 ($@33)]
    V_DOUBLE   [reduce using rule 127 ($@33)]
    V_BOOL     [reduce using rule 127 ($@33)]

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 99
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    $@33            go to state 103


State 176

   43 funcall: V_ID $@8 SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 209


State 177

   47 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 210

    $default  reduce using rule 48 (funcallHelper2)

    funcallHelper2  go to state 211


State 178

   46 funcallHelper: expr . $@9 funcallHelper2

    $default  reduce using rule 45 ($@9)

    $@9  go to state 212


State 179

   87 property: V_ID $@14 SYM_DOT V_ID .

    $default  reduce using rule 87 (property)


State 180

   90 expr: logicoperation $@15 MTH_OR $@16 . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 213
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 181

   94 logicoperation: logicfactor $@17 MTH_AND $@18 . logicoperation

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    logicoperation  go to state 214
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 182

  100 comparison: operation comp_operator $@20 operation .

    $default  reduce using rule 100 (comparison)


State 183

  104 operation: factor $@21 MTH_PLUS $@22 . operation

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 215
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 184

  107 operation: factor $@23 MTH_MINUS $@24 . operation

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    operation     go to state 216
    factor        go to state 92
    hvalue        go to state 93
    value         go to state 94


State 185

  111 factor: hvalue $@25 MTH_ASTRK $@26 . factor

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 217
    hvalue        go to state 93
    value         go to state 94


State 186

  114 factor: hvalue $@27 MTH_DIVIS $@28 . factor

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    factor        go to state 218
    hvalue        go to state 93
    value         go to state 94


State 187

  118 hvalue: value $@29 MTH_POWER $@30 . hvalue

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 219
    value         go to state 94


State 188

  121 hvalue: value $@31 MTH_ROOT $@32 . hvalue

    SYM_OPARE  shift, and go to state 74
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall       go to state 82
    basictypes    go to state 83
    var_or_cte    go to state 84
    structaccess  go to state 85
    property      go to state 86
    hvalue        go to state 220
    value         go to state 94


State 189

   75 arrHelper: expr SYM_COMMA $@12 arrHelper .

    $default  reduce using rule 75 (arrHelper)


State 190

   80 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 61

    arr        go to state 125
    matHelper  go to state 221


State 191

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 222
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 192

   85 vector: SYM_OPARE expr SYM_COMMA expr SYM_CPARE .

    $default  reduce using rule 85 (vector)


State 193

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 223


State 194

   65 assign: V_ID $@10 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 224


State 195

  139 if: LOG_IF $@34 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 225

    ifHelper  go to state 226


State 196

  152 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 227
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 197

  150 forHelper: V_ID .

    $default  reduce using rule 150 (forHelper)


State 198

  149 for: LOG_FOR forHelper . SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 228


State 199

  151 forHelper: stepfor .

    $default  reduce using rule 151 (forHelper)


State 200

  155 while: LOG_WHILE $@39 . SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 229


State 201

   50 ret: RES_RETRN expr .

    $default  reduce using rule 50 (ret)


State 202

   25 funbody: crlf funbody .

    $default  reduce using rule 25 (funbody)


State 203

   15 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@3 funparams SYM_CPARE $@4 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 15 (function)


State 204

   24 funbody: generaldec crlf . $@6 funbody

    $default  reduce using rule 23 ($@6)

    $@6  go to state 230


State 205

   22 funbody: stmt crlf . $@5 funbody

    $default  reduce using rule 21 ($@5)

    $@5  go to state 231


State 206

   66 assign: structaccess MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 232
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 207

   67 assign: property MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 233
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 208

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@11 . structIndex

    SYM_OBRAC  shift, and go to state 234

    $default  reduce using rule 70 (structIndex)

    structIndex  go to state 235


State 209

   43 funcall: V_ID $@8 SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 43 (funcall)


State 210

   49 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 175
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    $default  reduce using rule 44 (funcallHelper)

    funcall         go to state 82
    funcallHelper   go to state 236
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    vector          go to state 177
    property        go to state 86
    expr            go to state 178
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 211

   47 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 47 (funcallHelper)


State 212

   46 funcallHelper: expr $@9 . funcallHelper2

    SYM_COMMA  shift, and go to state 210

    $default  reduce using rule 48 (funcallHelper2)

    funcallHelper2  go to state 237


State 213

   90 expr: logicoperation $@15 MTH_OR $@16 expr .

    $default  reduce using rule 90 (expr)


State 214

   94 logicoperation: logicfactor $@17 MTH_AND $@18 logicoperation .

    $default  reduce using rule 94 (logicoperation)


State 215

  104 operation: factor $@21 MTH_PLUS $@22 operation .

    $default  reduce using rule 104 (operation)


State 216

  107 operation: factor $@23 MTH_MINUS $@24 operation .

    $default  reduce using rule 107 (operation)


State 217

  111 factor: hvalue $@25 MTH_ASTRK $@26 factor .

    $default  reduce using rule 111 (factor)


State 218

  114 factor: hvalue $@27 MTH_DIVIS $@28 factor .

    $default  reduce using rule 114 (factor)


State 219

  118 hvalue: value $@29 MTH_POWER $@30 hvalue .

    $default  reduce using rule 118 (hvalue)


State 220

  121 hvalue: value $@31 MTH_ROOT $@32 hvalue .

    $default  reduce using rule 121 (hvalue)


State 221

   80 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 80 (matHelper)


State 222

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 238


State 223

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 239


State 224

   65 assign: V_ID $@10 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 240
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 225

  141 ifHelper: SYM_OPARE . expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 241
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 226

  139 if: LOG_IF $@34 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 242

    $default  reduce using rule 145 (ifHelper3)

    ifHelper3  go to state 243


State 227

  152 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 244


State 228

  149 for: LOG_FOR forHelper SYM_ARROW . V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 245


State 229

  155 while: LOG_WHILE $@39 SYM_OPARE . expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 246
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 230

   24 funbody: generaldec crlf $@6 . funbody

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 247
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 231

   22 funbody: stmt crlf $@5 . funbody

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    V_ARR      shift, and go to state 33
    V_MAT      shift, and go to state 34
    V_VECTOR   shift, and go to state 35
    V_ELEM     shift, and go to state 36
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 20 (funbody)

    crlf            go to state 160
    funbody         go to state 248
    generaldec      go to state 162
    stmt            go to state 163
    funcall         go to state 82
    ret             go to state 164
    vardec          go to state 39
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    arrdec          go to state 40
    matdec          go to state 41
    elementdec      go to state 42
    vectordec       go to state 43
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172


State 232

   66 assign: structaccess MTH_SEQUA expr .

    $default  reduce using rule 66 (assign)


State 233

   67 assign: property MTH_SEQUA expr .

    $default  reduce using rule 67 (assign)


State 234

   71 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 249
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 235

   69 structaccess: V_ID SYM_OBRAC expr SYM_CBRAC $@11 structIndex .

    $default  reduce using rule 69 (structaccess)


State 236

   49 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 49 (funcallHelper2)


State 237

   46 funcallHelper: expr $@9 funcallHelper2 .

    $default  reduce using rule 46 (funcallHelper)


State 238

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 250
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 239

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 251


State 240

   65 assign: V_ID $@10 MTH_SEQUA expr .

    $default  reduce using rule 65 (assign)


State 241

  141 ifHelper: SYM_OPARE expr . SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 252


State 242

  147 ifHelper3: LOG_ELSE . $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 146 ($@37)

    $@37  go to state 253


State 243

  139 if: LOG_IF $@34 ifHelper ifHelper3 .

    $default  reduce using rule 139 (if)


State 244

  152 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 254
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 245

  149 for: LOG_FOR forHelper SYM_ARROW V_ID . $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 148 ($@38)

    $@38  go to state 255


State 246

  155 while: LOG_WHILE $@39 SYM_OPARE expr . SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 256


State 247

   24 funbody: generaldec crlf $@6 funbody .

    $default  reduce using rule 24 (funbody)


State 248

   22 funbody: stmt crlf $@5 funbody .

    $default  reduce using rule 22 (funbody)


State 249

   71 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 257


State 250

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 258


State 251

   78 matdec: V_MAT V_ID $@13 SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 78 (matdec)


State 252

  141 ifHelper: SYM_OPARE expr SYM_CPARE . $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 140 ($@35)

    $@35  go to state 259


State 253

  147 ifHelper3: LOG_ELSE $@37 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 260


State 254

  152 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 261


State 255

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 262


State 256

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE . $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 154 ($@40)

    $@40  go to state 263


State 257

   71 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 71 (structIndex)


State 258

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 264
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 259

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 265


State 260

  147 ifHelper3: LOG_ELSE $@37 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 266


State 261

  152 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 267
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 262

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 268


State 263

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 11 (optlf)

    crlf   go to state 71
    optlf  go to state 269


State 264

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 270


State 265

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 271


State 266

  147 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 272


State 267

  152 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 273


State 268

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 274


State 269

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 275


State 270

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 276
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 271

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 277


State 272

  147 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 278
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 279
    newline         go to state 280


State 273

  152 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 152 (stepfor)


State 274

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 278
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 281
    newline         go to state 280


State 275

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 282


State 276

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 283


State 277

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 278
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 284
    newline         go to state 280


State 278

  158 newline: stmt . crlf

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 285


State 279

  147 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 286


State 280

  156 newlineCicle: newline .
  157             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    $default  reduce using rule 156 (newlineCicle)

    stmt            go to state 278
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 287
    newline         go to state 280


State 281

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 288


State 282

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 154
    LOG_IF     shift, and go to state 155
    LOG_FOR    shift, and go to state 156
    LOG_WHILE  shift, and go to state 157
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81
    RES_MEDIT  shift, and go to state 158
    RES_RETRN  shift, and go to state 159

    stmt            go to state 278
    funcall         go to state 82
    ret             go to state 164
    basictypes      go to state 83
    var_or_cte      go to state 84
    assign          go to state 165
    structaccess    go to state 166
    property        go to state 167
    expr            go to state 168
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94
    logicstruct     go to state 169
    if              go to state 170
    for             go to state 171
    while           go to state 172
    newlineCicle    go to state 289
    newline         go to state 280


State 283

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 74
    MTH_NOT    shift, and go to state 75
    V_ID       shift, and go to state 76
    V_CHAR     shift, and go to state 77
    V_STRING   shift, and go to state 78
    V_INT      shift, and go to state 79
    V_DOUBLE   shift, and go to state 80
    V_BOOL     shift, and go to state 81

    funcall         go to state 82
    basictypes      go to state 83
    var_or_cte      go to state 84
    structaccess    go to state 85
    property        go to state 86
    expr            go to state 290
    logicoperation  go to state 88
    logicfactor     go to state 89
    comparison      go to state 90
    operation       go to state 91
    factor          go to state 92
    hvalue          go to state 93
    value           go to state 94


State 284

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 291


State 285

  158 newline: stmt crlf .

    $default  reduce using rule 158 (newline)


State 286

  147 ifHelper3: LOG_ELSE $@37 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 147 (ifHelper3)


State 287

  157 newlineCicle: newline newlineCicle .

    $default  reduce using rule 157 (newlineCicle)


State 288

  149 for: LOG_FOR forHelper SYM_ARROW V_ID $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 149 (for)


State 289

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 292


State 290

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 293


State 291

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 294

    $default  reduce using rule 142 (ifHelper2)

    ifHelper2  go to state 295


State 292

  155 while: LOG_WHILE $@39 SYM_OPARE expr SYM_CPARE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 155 (while)


State 293

   83 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 83 (element)


State 294

  144 ifHelper2: LOG_ELIF . $@36 ifHelper

    $default  reduce using rule 143 ($@36)

    $@36  go to state 296


State 295

  141 ifHelper: SYM_OPARE expr SYM_CPARE $@35 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 141 (ifHelper)


State 296

  144 ifHelper2: LOG_ELIF $@36 . ifHelper

    SYM_OPARE  shift, and go to state 225

    ifHelper  go to state 297


State 297

  144 ifHelper2: LOG_ELIF $@36 ifHelper .

    $default  reduce using rule 144 (ifHelper2)
