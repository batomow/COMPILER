Terminals unused in grammar

   F_ID
   M_ID
   T_FLOAT


State 176 conflicts: 8 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: script
    2     | error

    3 script: %empty

    4 $@1: %empty

    5 script: function crlf $@1 script

    6 $@2: %empty

    7 script: vardec crlf $@2 script

    8 $@3: %empty

    9 script: arrdec crlf $@3 script
   10       | crlf script

   11 crlf: CR LF
   12     | LF

   13 optlf: %empty
   14      | crlf

   15 $@4: %empty

   16 $@5: %empty

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

   18 funparams: %empty
   19          | generaldec morefunparams

   20 morefunparams: %empty
   21              | SYM_COMMA generaldec morefunparams

   22 funbody: %empty

   23 $@6: %empty

   24 funbody: stmt crlf $@6 funbody

   25 $@7: %empty

   26 funbody: generaldec crlf $@7 funbody
   27        | crlf funbody

   28 generaldec: vardec
   29           | arrdec
   30           | matdec
   31           | vectordec
   32           | elementdec

   33 $@8: %empty

   34 generaldec: vardec $@8 MTH_SEQUA expr

   35 $@9: %empty

   36 generaldec: arrdec $@9 MTH_SEQUA arr

   37 $@10: %empty

   38 generaldec: matdec $@10 MTH_SEQUA mat
   39           | vectordec MTH_SEQUA vector
   40           | elementdec MTH_SEQUA element

   41 stmt: assign
   42     | expr
   43     | logicstruct
   44     | RES_MEDIT
   45     | ret

   46 $@11: %empty

   47 funcall: V_ID $@11 SYM_OPARE funcallHelper SYM_CPARE

   48 funcallHelper: %empty

   49 $@12: %empty

   50 funcallHelper: expr $@12 funcallHelper2
   51              | vector funcallHelper2

   52 funcallHelper2: %empty
   53               | SYM_COMMA funcallHelper

   54 ret: RES_RETRN expr

   55 vardec: V_VAR V_ID SYM_COLON vartypes

   56 basictypes: V_CHAR
   57           | V_STRING
   58           | V_DOUBLE
   59           | V_INT
   60           | V_BOOL

   61 vartypes: T_INT
   62         | T_DOUBLE
   63         | T_CHAR
   64         | T_STRING
   65         | T_BOOL

   66 var_or_cte: V_ID
   67           | basictypes

   68 $@13: %empty

   69 assign: V_ID $@13 MTH_SEQUA expr
   70       | structaccess MTH_SEQUA expr
   71       | property MTH_SEQUA expr

   72 $@14: %empty

   73 $@15: %empty

   74 structaccess: V_ID $@14 SYM_OBRAC expr SYM_CBRAC $@15 structIndex

   75 structIndex: %empty
   76            | SYM_OBRAC expr SYM_CBRAC

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

   78 arr: SYM_OBRAC arrHelper SYM_CBRAC

   79 $@16: %empty

   80 arrHelper: expr SYM_COMMA $@16 arrHelper
   81          | expr

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

   83 mat: SYM_OBRAC optlf matHelper SYM_CBRAC

   84 matHelper: arr SYM_COMMA optlf matHelper
   85          | arr optlf

   86 elementdec: V_ELEM V_ID

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

   88 vectordec: V_VECTOR V_ID

   89 vector: SYM_OPARE expr SYM_COMMA expr SYM_CPARE

   90 $@17: %empty

   91 property: V_ID $@17 SYM_DOT V_ID

   92 $@18: %empty

   93 $@19: %empty

   94 expr: logicoperation $@18 MTH_OR $@19 expr
   95     | logicoperation

   96 $@20: %empty

   97 $@21: %empty

   98 logicoperation: logicfactor $@20 MTH_AND $@21 logicoperation
   99               | logicfactor

  100 $@22: %empty

  101 logicfactor: MTH_NOT $@22 comparison
  102            | comparison

  103 $@23: %empty

  104 comparison: operation comp_operator $@23 operation
  105           | operation

  106 $@24: %empty

  107 $@25: %empty

  108 operation: factor $@24 MTH_PLUS $@25 operation

  109 $@26: %empty

  110 $@27: %empty

  111 operation: factor $@26 MTH_MINUS $@27 operation
  112          | factor

  113 $@28: %empty

  114 $@29: %empty

  115 factor: hvalue $@28 MTH_ASTRK $@29 factor

  116 $@30: %empty

  117 $@31: %empty

  118 factor: hvalue $@30 MTH_DIVIS $@31 factor
  119       | hvalue

  120 $@32: %empty

  121 $@33: %empty

  122 hvalue: value $@32 MTH_POWER $@33 hvalue

  123 $@34: %empty

  124 $@35: %empty

  125 hvalue: value $@34 MTH_ROOT $@35 hvalue
  126       | value

  127 value: var_or_cte
  128      | funcall
  129      | structaccess
  130      | property

  131 $@36: %empty

  132 value: SYM_OPARE $@36 expr SYM_CPARE

  133 comp_operator: MTH_GT
  134              | MTH_GTEQ
  135              | MTH_LT
  136              | MTH_LTEQ
  137              | MTH_DEQUA
  138              | MTH_NOTEQ

  139 logicstruct: if
  140            | for
  141            | while

  142 $@37: %empty

  143 if: LOG_IF $@37 ifHelper ifHelper3

  144 $@38: %empty

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

  146 ifHelper2: %empty

  147 $@39: %empty

  148 ifHelper2: LOG_ELIF $@39 ifHelper

  149 ifHelper3: %empty

  150 $@40: %empty

  151 ifHelper3: LOG_ELSE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  152 $@41: %empty

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  154 forHelper: V_ID
  155          | stepfor

  156 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

  157 $@42: %empty

  158 $@43: %empty

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

  160 newlineCicle: newline
  161             | newline newlineCicle

  162 newline: stmt crlf


Terminals, with rules where they appear

$end (0) 0
error (256) 2
SYM_OBRAC (258) 74 76 77 78 82 83 156
SYM_CBRAC (259) 74 76 77 78 82 83 156
SYM_OPARE (260) 17 47 89 132 145 159
SYM_CPARE (261) 17 47 89 132 145 159
SYM_OCURL (262) 17 87 145 151 153 159
SYM_CCURL (263) 17 87 145 151 153 159
SYM_COMMA (264) 21 53 80 84 87 89 156
SYM_ARROW (265) 153
SYM_COLON (266) 17 55 77 82
SYM_DOT (267) 91
MTH_SEQUA (268) 34 36 38 39 40 69 70 71
MTH_DEQUA (269) 137
MTH_GT (270) 133
MTH_LT (271) 135
MTH_GTEQ (272) 134
MTH_LTEQ (273) 136
MTH_NOT (274) 101
MTH_NOTEQ (275) 138
MTH_PLUS (276) 108
MTH_MINUS (277) 111
MTH_ASTRK (278) 115
MTH_DIVIS (279) 118
MTH_POWER (280) 122
MTH_ROOT (281) 125
MTH_AND (282) 98
MTH_OR (283) 94
LF (284) 11 12
CR (285) 11
V_ID (286) 17 47 55 66 69 74 77 82 86 88 91 153 154
F_ID (287)
M_ID (288)
LOG_IF (289) 143
LOG_ELIF (290) 148
LOG_ELSE (291) 151
LOG_FOR (292) 153
LOG_WHILE (293) 159
V_VAR (294) 55
V_CHAR (295) 56
V_STRING (296) 57
V_INT (297) 59 77 82
V_DOUBLE (298) 58
V_BOOL (299) 60
V_ARR (300) 77
V_MAT (301) 82
V_VECTOR (302) 88
V_ELEM (303) 86
T_BOOL (304) 65
T_INT (305) 61
T_FLOAT (306)
T_DOUBLE (307) 62
T_CHAR (308) 63
T_STRING (309) 64
RES_ORDER (310) 17
RES_MEDIT (311) 44
RES_RETRN (312) 54


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
prog (59)
    on left: 1 2, on right: 0
script (60)
    on left: 3 5 7 9 10, on right: 1 5 7 9 10
$@1 (61)
    on left: 4, on right: 5
$@2 (62)
    on left: 6, on right: 7
$@3 (63)
    on left: 8, on right: 9
crlf (64)
    on left: 11 12, on right: 5 7 9 10 14 17 24 26 27 145 151 153 159
    162
optlf (65)
    on left: 13 14, on right: 17 83 84 85 145 151 153 159
function (66)
    on left: 17, on right: 5
$@4 (67)
    on left: 15, on right: 17
$@5 (68)
    on left: 16, on right: 17
funparams (69)
    on left: 18 19, on right: 17
morefunparams (70)
    on left: 20 21, on right: 19 21
funbody (71)
    on left: 22 24 26 27, on right: 17 24 26 27
$@6 (72)
    on left: 23, on right: 24
$@7 (73)
    on left: 25, on right: 26
generaldec (74)
    on left: 28 29 30 31 32 34 36 38 39 40, on right: 19 21 26
$@8 (75)
    on left: 33, on right: 34
$@9 (76)
    on left: 35, on right: 36
$@10 (77)
    on left: 37, on right: 38
stmt (78)
    on left: 41 42 43 44 45, on right: 24 162
funcall (79)
    on left: 47, on right: 128
$@11 (80)
    on left: 46, on right: 47
funcallHelper (81)
    on left: 48 50 51, on right: 47 53
$@12 (82)
    on left: 49, on right: 50
funcallHelper2 (83)
    on left: 52 53, on right: 50 51
ret (84)
    on left: 54, on right: 45
vardec (85)
    on left: 55, on right: 7 28 34
basictypes (86)
    on left: 56 57 58 59 60, on right: 67
vartypes (87)
    on left: 61 62 63 64 65, on right: 17 55 77 82
var_or_cte (88)
    on left: 66 67, on right: 127
assign (89)
    on left: 69 70 71, on right: 41
$@13 (90)
    on left: 68, on right: 69
structaccess (91)
    on left: 74, on right: 70 129
$@14 (92)
    on left: 72, on right: 74
$@15 (93)
    on left: 73, on right: 74
structIndex (94)
    on left: 75 76, on right: 74
arrdec (95)
    on left: 77, on right: 9 29 36
arr (96)
    on left: 78, on right: 36 84 85
arrHelper (97)
    on left: 80 81, on right: 78 80
$@16 (98)
    on left: 79, on right: 80
matdec (99)
    on left: 82, on right: 30 38
mat (100)
    on left: 83, on right: 38
matHelper (101)
    on left: 84 85, on right: 83 84
elementdec (102)
    on left: 86, on right: 32 40
element (103)
    on left: 87, on right: 40
vectordec (104)
    on left: 88, on right: 31 39
vector (105)
    on left: 89, on right: 39 51
property (106)
    on left: 91, on right: 71 130
$@17 (107)
    on left: 90, on right: 91
expr (108)
    on left: 94 95, on right: 34 42 50 54 69 70 71 74 76 80 81 87 89
    94 132 145 156 159
$@18 (109)
    on left: 92, on right: 94
$@19 (110)
    on left: 93, on right: 94
logicoperation (111)
    on left: 98 99, on right: 94 95 98
$@20 (112)
    on left: 96, on right: 98
$@21 (113)
    on left: 97, on right: 98
logicfactor (114)
    on left: 101 102, on right: 98 99
$@22 (115)
    on left: 100, on right: 101
comparison (116)
    on left: 104 105, on right: 101 102
$@23 (117)
    on left: 103, on right: 104
operation (118)
    on left: 108 111 112, on right: 104 105 108 111
$@24 (119)
    on left: 106, on right: 108
$@25 (120)
    on left: 107, on right: 108
$@26 (121)
    on left: 109, on right: 111
$@27 (122)
    on left: 110, on right: 111
factor (123)
    on left: 115 118 119, on right: 108 111 112 115 118
$@28 (124)
    on left: 113, on right: 115
$@29 (125)
    on left: 114, on right: 115
$@30 (126)
    on left: 116, on right: 118
$@31 (127)
    on left: 117, on right: 118
hvalue (128)
    on left: 122 125 126, on right: 115 118 119 122 125
$@32 (129)
    on left: 120, on right: 122
$@33 (130)
    on left: 121, on right: 122
$@34 (131)
    on left: 123, on right: 125
$@35 (132)
    on left: 124, on right: 125
value (133)
    on left: 127 128 129 130 132, on right: 122 125 126
$@36 (134)
    on left: 131, on right: 132
comp_operator (135)
    on left: 133 134 135 136 137 138, on right: 104
logicstruct (136)
    on left: 139 140 141, on right: 43
if (137)
    on left: 143, on right: 139
$@37 (138)
    on left: 142, on right: 143
ifHelper (139)
    on left: 145, on right: 143 148
$@38 (140)
    on left: 144, on right: 145
ifHelper2 (141)
    on left: 146 148, on right: 145
$@39 (142)
    on left: 147, on right: 148
ifHelper3 (143)
    on left: 149 151, on right: 143
$@40 (144)
    on left: 150, on right: 151
for (145)
    on left: 153, on right: 140
$@41 (146)
    on left: 152, on right: 153
forHelper (147)
    on left: 154 155, on right: 153
stepfor (148)
    on left: 156, on right: 155
while (149)
    on left: 159, on right: 141
$@42 (150)
    on left: 157, on right: 159
$@43 (151)
    on left: 158, on right: 159
newlineCicle (152)
    on left: 160 161, on right: 145 151 153 159 161
newline (153)
    on left: 162, on right: 160 161


State 0

    0 $accept: . prog $end

    error      shift, and go to state 1
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    RES_ORDER  shift, and go to state 6

    $end  reduce using rule 3 (script)

    prog      go to state 7
    script    go to state 8
    crlf      go to state 9
    function  go to state 10
    vardec    go to state 11
    arrdec    go to state 12


State 1

    2 prog: error .

    $default  reduce using rule 2 (prog)


State 2

   12 crlf: LF .

    $default  reduce using rule 12 (crlf)


State 3

   11 crlf: CR . LF

    LF  shift, and go to state 13


State 4

   55 vardec: V_VAR . V_ID SYM_COLON vartypes

    V_ID  shift, and go to state 14


State 5

   77 arrdec: V_ARR . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 15


State 6

   17 function: RES_ORDER . V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_ID  shift, and go to state 16


State 7

    0 $accept: prog . $end

    $end  shift, and go to state 17


State 8

    1 prog: script .

    $default  reduce using rule 1 (prog)


State 9

   10 script: crlf . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    RES_ORDER  shift, and go to state 6

    $default  reduce using rule 3 (script)

    script    go to state 18
    crlf      go to state 9
    function  go to state 10
    vardec    go to state 11
    arrdec    go to state 12


State 10

    5 script: function . crlf $@1 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 19


State 11

    7 script: vardec . crlf $@2 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 20


State 12

    9 script: arrdec . crlf $@3 script

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 21


State 13

   11 crlf: CR LF .

    $default  reduce using rule 11 (crlf)


State 14

   55 vardec: V_VAR V_ID . SYM_COLON vartypes

    SYM_COLON  shift, and go to state 22


State 15

   77 arrdec: V_ARR V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 23


State 16

   17 function: RES_ORDER V_ID . SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_COLON  shift, and go to state 24


State 17

    0 $accept: prog $end .

    $default  accept


State 18

   10 script: crlf script .

    $default  reduce using rule 10 (script)


State 19

    5 script: function crlf . $@1 script

    $default  reduce using rule 4 ($@1)

    $@1  go to state 25


State 20

    7 script: vardec crlf . $@2 script

    $default  reduce using rule 6 ($@2)

    $@2  go to state 26


State 21

    9 script: arrdec crlf . $@3 script

    $default  reduce using rule 8 ($@3)

    $@3  go to state 27


State 22

   55 vardec: V_VAR V_ID SYM_COLON . vartypes

    T_BOOL    shift, and go to state 28
    T_INT     shift, and go to state 29
    T_DOUBLE  shift, and go to state 30
    T_CHAR    shift, and go to state 31
    T_STRING  shift, and go to state 32

    vartypes  go to state 33


State 23

   77 arrdec: V_ARR V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 28
    T_INT     shift, and go to state 29
    T_DOUBLE  shift, and go to state 30
    T_CHAR    shift, and go to state 31
    T_STRING  shift, and go to state 32

    vartypes  go to state 34


State 24

   17 function: RES_ORDER V_ID SYM_COLON . vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    T_BOOL    shift, and go to state 28
    T_INT     shift, and go to state 29
    T_DOUBLE  shift, and go to state 30
    T_CHAR    shift, and go to state 31
    T_STRING  shift, and go to state 32

    vartypes  go to state 35


State 25

    5 script: function crlf $@1 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    RES_ORDER  shift, and go to state 6

    $default  reduce using rule 3 (script)

    script    go to state 36
    crlf      go to state 9
    function  go to state 10
    vardec    go to state 11
    arrdec    go to state 12


State 26

    7 script: vardec crlf $@2 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    RES_ORDER  shift, and go to state 6

    $default  reduce using rule 3 (script)

    script    go to state 37
    crlf      go to state 9
    function  go to state 10
    vardec    go to state 11
    arrdec    go to state 12


State 27

    9 script: arrdec crlf $@3 . script

    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_VAR      shift, and go to state 4
    V_ARR      shift, and go to state 5
    RES_ORDER  shift, and go to state 6

    $default  reduce using rule 3 (script)

    script    go to state 38
    crlf      go to state 9
    function  go to state 10
    vardec    go to state 11
    arrdec    go to state 12


State 28

   65 vartypes: T_BOOL .

    $default  reduce using rule 65 (vartypes)


State 29

   61 vartypes: T_INT .

    $default  reduce using rule 61 (vartypes)


State 30

   62 vartypes: T_DOUBLE .

    $default  reduce using rule 62 (vartypes)


State 31

   63 vartypes: T_CHAR .

    $default  reduce using rule 63 (vartypes)


State 32

   64 vartypes: T_STRING .

    $default  reduce using rule 64 (vartypes)


State 33

   55 vardec: V_VAR V_ID SYM_COLON vartypes .

    $default  reduce using rule 55 (vardec)


State 34

   77 arrdec: V_ARR V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 39


State 35

   17 function: RES_ORDER V_ID SYM_COLON vartypes . SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 40


State 36

    5 script: function crlf $@1 script .

    $default  reduce using rule 5 (script)


State 37

    7 script: vardec crlf $@2 script .

    $default  reduce using rule 7 (script)


State 38

    9 script: arrdec crlf $@3 script .

    $default  reduce using rule 9 (script)


State 39

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 41


State 40

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE . $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 15 ($@4)

    $@4  go to state 42


State 41

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 43


State 42

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 . funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 5
    V_MAT     shift, and go to state 44
    V_VECTOR  shift, and go to state 45
    V_ELEM    shift, and go to state 46

    $default  reduce using rule 18 (funparams)

    funparams   go to state 47
    generaldec  go to state 48
    vardec      go to state 49
    arrdec      go to state 50
    matdec      go to state 51
    elementdec  go to state 52
    vectordec   go to state 53


State 43

   77 arrdec: V_ARR V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 77 (arrdec)


State 44

   82 matdec: V_MAT . V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_ID  shift, and go to state 54


State 45

   88 vectordec: V_VECTOR . V_ID

    V_ID  shift, and go to state 55


State 46

   86 elementdec: V_ELEM . V_ID

    V_ID  shift, and go to state 56


State 47

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams . SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    SYM_CPARE  shift, and go to state 57


State 48

   19 funparams: generaldec . morefunparams

    SYM_COMMA  shift, and go to state 58

    $default  reduce using rule 20 (morefunparams)

    morefunparams  go to state 59


State 49

   28 generaldec: vardec .
   34           | vardec . $@8 MTH_SEQUA expr

    MTH_SEQUA  reduce using rule 33 ($@8)
    $default   reduce using rule 28 (generaldec)

    $@8  go to state 60


State 50

   29 generaldec: arrdec .
   36           | arrdec . $@9 MTH_SEQUA arr

    MTH_SEQUA  reduce using rule 35 ($@9)
    $default   reduce using rule 29 (generaldec)

    $@9  go to state 61


State 51

   30 generaldec: matdec .
   38           | matdec . $@10 MTH_SEQUA mat

    MTH_SEQUA  reduce using rule 37 ($@10)
    $default   reduce using rule 30 (generaldec)

    $@10  go to state 62


State 52

   32 generaldec: elementdec .
   40           | elementdec . MTH_SEQUA element

    MTH_SEQUA  shift, and go to state 63

    $default  reduce using rule 32 (generaldec)


State 53

   31 generaldec: vectordec .
   39           | vectordec . MTH_SEQUA vector

    MTH_SEQUA  shift, and go to state 64

    $default  reduce using rule 31 (generaldec)


State 54

   82 matdec: V_MAT V_ID . SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_COLON  shift, and go to state 65


State 55

   88 vectordec: V_VECTOR V_ID .

    $default  reduce using rule 88 (vectordec)


State 56

   86 elementdec: V_ELEM V_ID .

    $default  reduce using rule 86 (elementdec)


State 57

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE . $@5 optlf SYM_OCURL crlf funbody SYM_CCURL

    $default  reduce using rule 16 ($@5)

    $@5  go to state 66


State 58

   21 morefunparams: SYM_COMMA . generaldec morefunparams

    V_VAR     shift, and go to state 4
    V_ARR     shift, and go to state 5
    V_MAT     shift, and go to state 44
    V_VECTOR  shift, and go to state 45
    V_ELEM    shift, and go to state 46

    generaldec  go to state 67
    vardec      go to state 49
    arrdec      go to state 50
    matdec      go to state 51
    elementdec  go to state 52
    vectordec   go to state 53


State 59

   19 funparams: generaldec morefunparams .

    $default  reduce using rule 19 (funparams)


State 60

   34 generaldec: vardec $@8 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 68


State 61

   36 generaldec: arrdec $@9 . MTH_SEQUA arr

    MTH_SEQUA  shift, and go to state 69


State 62

   38 generaldec: matdec $@10 . MTH_SEQUA mat

    MTH_SEQUA  shift, and go to state 70


State 63

   40 generaldec: elementdec MTH_SEQUA . element

    SYM_OCURL  shift, and go to state 71

    element  go to state 72


State 64

   39 generaldec: vectordec MTH_SEQUA . vector

    SYM_OPARE  shift, and go to state 73

    vector  go to state 74


State 65

   82 matdec: V_MAT V_ID SYM_COLON . vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    T_BOOL    shift, and go to state 28
    T_INT     shift, and go to state 29
    T_DOUBLE  shift, and go to state 30
    T_CHAR    shift, and go to state 31
    T_STRING  shift, and go to state 32

    vartypes  go to state 75


State 66

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 . optlf SYM_OCURL crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 77


State 67

   21 morefunparams: SYM_COMMA generaldec . morefunparams

    SYM_COMMA  shift, and go to state 58

    $default  reduce using rule 20 (morefunparams)

    morefunparams  go to state 78


State 68

   34 generaldec: vardec $@8 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 92
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 69

   36 generaldec: arrdec $@9 MTH_SEQUA . arr

    SYM_OBRAC  shift, and go to state 100

    arr  go to state 101


State 70

   38 generaldec: matdec $@10 MTH_SEQUA . mat

    SYM_OBRAC  shift, and go to state 102

    mat  go to state 103


State 71

   87 element: SYM_OCURL . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 104
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 72

   40 generaldec: elementdec MTH_SEQUA element .

    $default  reduce using rule 40 (generaldec)


State 73

   89 vector: SYM_OPARE . expr SYM_COMMA expr SYM_CPARE

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 105
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 74

   39 generaldec: vectordec MTH_SEQUA vector .

    $default  reduce using rule 39 (generaldec)


State 75

   82 matdec: V_MAT V_ID SYM_COLON vartypes . SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 106


State 76

   14 optlf: crlf .

    $default  reduce using rule 14 (optlf)


State 77

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf . SYM_OCURL crlf funbody SYM_CCURL

    SYM_OCURL  shift, and go to state 107


State 78

   21 morefunparams: SYM_COMMA generaldec morefunparams .

    $default  reduce using rule 21 (morefunparams)


State 79

  132 value: SYM_OPARE . $@36 expr SYM_CPARE

    $default  reduce using rule 131 ($@36)

    $@36  go to state 108


State 80

  101 logicfactor: MTH_NOT . $@22 comparison

    $default  reduce using rule 100 ($@22)

    $@22  go to state 109


State 81

   47 funcall: V_ID . $@11 SYM_OPARE funcallHelper SYM_CPARE
   66 var_or_cte: V_ID .
   74 structaccess: V_ID . $@14 SYM_OBRAC expr SYM_CBRAC $@15 structIndex
   91 property: V_ID . $@17 SYM_DOT V_ID

    SYM_OBRAC  reduce using rule 72 ($@14)
    SYM_OPARE  reduce using rule 46 ($@11)
    SYM_DOT    reduce using rule 90 ($@17)
    $default   reduce using rule 66 (var_or_cte)

    $@11  go to state 110
    $@14  go to state 111
    $@17  go to state 112


State 82

   56 basictypes: V_CHAR .

    $default  reduce using rule 56 (basictypes)


State 83

   57 basictypes: V_STRING .

    $default  reduce using rule 57 (basictypes)


State 84

   59 basictypes: V_INT .

    $default  reduce using rule 59 (basictypes)


State 85

   58 basictypes: V_DOUBLE .

    $default  reduce using rule 58 (basictypes)


State 86

   60 basictypes: V_BOOL .

    $default  reduce using rule 60 (basictypes)


State 87

  128 value: funcall .

    $default  reduce using rule 128 (value)


State 88

   67 var_or_cte: basictypes .

    $default  reduce using rule 67 (var_or_cte)


State 89

  127 value: var_or_cte .

    $default  reduce using rule 127 (value)


State 90

  129 value: structaccess .

    $default  reduce using rule 129 (value)


State 91

  130 value: property .

    $default  reduce using rule 130 (value)


State 92

   34 generaldec: vardec $@8 MTH_SEQUA expr .

    $default  reduce using rule 34 (generaldec)


State 93

   94 expr: logicoperation . $@18 MTH_OR $@19 expr
   95     | logicoperation .

    MTH_OR    reduce using rule 92 ($@18)
    $default  reduce using rule 95 (expr)

    $@18  go to state 113


State 94

   98 logicoperation: logicfactor . $@20 MTH_AND $@21 logicoperation
   99               | logicfactor .

    MTH_AND   reduce using rule 96 ($@20)
    $default  reduce using rule 99 (logicoperation)

    $@20  go to state 114


State 95

  102 logicfactor: comparison .

    $default  reduce using rule 102 (logicfactor)


State 96

  104 comparison: operation . comp_operator $@23 operation
  105           | operation .

    MTH_DEQUA  shift, and go to state 115
    MTH_GT     shift, and go to state 116
    MTH_LT     shift, and go to state 117
    MTH_GTEQ   shift, and go to state 118
    MTH_LTEQ   shift, and go to state 119
    MTH_NOTEQ  shift, and go to state 120

    $default  reduce using rule 105 (comparison)

    comp_operator  go to state 121


State 97

  108 operation: factor . $@24 MTH_PLUS $@25 operation
  111          | factor . $@26 MTH_MINUS $@27 operation
  112          | factor .

    MTH_PLUS   reduce using rule 106 ($@24)
    MTH_MINUS  reduce using rule 109 ($@26)
    $default   reduce using rule 112 (operation)

    $@24  go to state 122
    $@26  go to state 123


State 98

  115 factor: hvalue . $@28 MTH_ASTRK $@29 factor
  118       | hvalue . $@30 MTH_DIVIS $@31 factor
  119       | hvalue .

    MTH_ASTRK  reduce using rule 113 ($@28)
    MTH_DIVIS  reduce using rule 116 ($@30)
    $default   reduce using rule 119 (factor)

    $@28  go to state 124
    $@30  go to state 125


State 99

  122 hvalue: value . $@32 MTH_POWER $@33 hvalue
  125       | value . $@34 MTH_ROOT $@35 hvalue
  126       | value .

    MTH_POWER  reduce using rule 120 ($@32)
    MTH_ROOT   reduce using rule 123 ($@34)
    $default   reduce using rule 126 (hvalue)

    $@32  go to state 126
    $@34  go to state 127


State 100

   78 arr: SYM_OBRAC . arrHelper SYM_CBRAC

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    arrHelper       go to state 128
    property        go to state 91
    expr            go to state 129
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 101

   36 generaldec: arrdec $@9 MTH_SEQUA arr .

    $default  reduce using rule 36 (generaldec)


State 102

   83 mat: SYM_OBRAC . optlf matHelper SYM_CBRAC

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 130


State 103

   38 generaldec: matdec $@10 MTH_SEQUA mat .

    $default  reduce using rule 38 (generaldec)


State 104

   87 element: SYM_OCURL expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 131


State 105

   89 vector: SYM_OPARE expr . SYM_COMMA expr SYM_CPARE

    SYM_COMMA  shift, and go to state 132


State 106

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC . V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    V_INT  shift, and go to state 133


State 107

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL . crlf funbody SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 134


State 108

  132 value: SYM_OPARE $@36 . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 135
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 109

  101 logicfactor: MTH_NOT $@22 . comparison

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    comparison    go to state 136
    operation     go to state 96
    factor        go to state 97
    hvalue        go to state 98
    value         go to state 99


State 110

   47 funcall: V_ID $@11 . SYM_OPARE funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 137


State 111

   74 structaccess: V_ID $@14 . SYM_OBRAC expr SYM_CBRAC $@15 structIndex

    SYM_OBRAC  shift, and go to state 138


State 112

   91 property: V_ID $@17 . SYM_DOT V_ID

    SYM_DOT  shift, and go to state 139


State 113

   94 expr: logicoperation $@18 . MTH_OR $@19 expr

    MTH_OR  shift, and go to state 140


State 114

   98 logicoperation: logicfactor $@20 . MTH_AND $@21 logicoperation

    MTH_AND  shift, and go to state 141


State 115

  137 comp_operator: MTH_DEQUA .

    $default  reduce using rule 137 (comp_operator)


State 116

  133 comp_operator: MTH_GT .

    $default  reduce using rule 133 (comp_operator)


State 117

  135 comp_operator: MTH_LT .

    $default  reduce using rule 135 (comp_operator)


State 118

  134 comp_operator: MTH_GTEQ .

    $default  reduce using rule 134 (comp_operator)


State 119

  136 comp_operator: MTH_LTEQ .

    $default  reduce using rule 136 (comp_operator)


State 120

  138 comp_operator: MTH_NOTEQ .

    $default  reduce using rule 138 (comp_operator)


State 121

  104 comparison: operation comp_operator . $@23 operation

    $default  reduce using rule 103 ($@23)

    $@23  go to state 142


State 122

  108 operation: factor $@24 . MTH_PLUS $@25 operation

    MTH_PLUS  shift, and go to state 143


State 123

  111 operation: factor $@26 . MTH_MINUS $@27 operation

    MTH_MINUS  shift, and go to state 144


State 124

  115 factor: hvalue $@28 . MTH_ASTRK $@29 factor

    MTH_ASTRK  shift, and go to state 145


State 125

  118 factor: hvalue $@30 . MTH_DIVIS $@31 factor

    MTH_DIVIS  shift, and go to state 146


State 126

  122 hvalue: value $@32 . MTH_POWER $@33 hvalue

    MTH_POWER  shift, and go to state 147


State 127

  125 hvalue: value $@34 . MTH_ROOT $@35 hvalue

    MTH_ROOT  shift, and go to state 148


State 128

   78 arr: SYM_OBRAC arrHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 149


State 129

   80 arrHelper: expr . SYM_COMMA $@16 arrHelper
   81          | expr .

    SYM_COMMA  shift, and go to state 150

    $default  reduce using rule 81 (arrHelper)


State 130

   83 mat: SYM_OBRAC optlf . matHelper SYM_CBRAC

    SYM_OBRAC  shift, and go to state 100

    arr        go to state 151
    matHelper  go to state 152


State 131

   87 element: SYM_OCURL expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 153
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 132

   89 vector: SYM_OPARE expr SYM_COMMA . expr SYM_CPARE

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 154
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 133

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT . SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC

    SYM_CBRAC  shift, and go to state 155


State 134

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf . funbody SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 44
    V_VECTOR   shift, and go to state 45
    V_ELEM     shift, and go to state 46
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    $default  reduce using rule 22 (funbody)

    crlf            go to state 162
    funbody         go to state 163
    generaldec      go to state 164
    stmt            go to state 165
    funcall         go to state 87
    ret             go to state 166
    vardec          go to state 49
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    arrdec          go to state 50
    matdec          go to state 51
    elementdec      go to state 52
    vectordec       go to state 53
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174


State 135

  132 value: SYM_OPARE $@36 expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 175


State 136

  101 logicfactor: MTH_NOT $@22 comparison .

    $default  reduce using rule 101 (logicfactor)


State 137

   47 funcall: V_ID $@11 SYM_OPARE . funcallHelper SYM_CPARE

    SYM_OPARE  shift, and go to state 176
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    $default  reduce using rule 48 (funcallHelper)

    funcall         go to state 87
    funcallHelper   go to state 177
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    vector          go to state 178
    property        go to state 91
    expr            go to state 179
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 138

   74 structaccess: V_ID $@14 SYM_OBRAC . expr SYM_CBRAC $@15 structIndex

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 180
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 139

   91 property: V_ID $@17 SYM_DOT . V_ID

    V_ID  shift, and go to state 181


State 140

   94 expr: logicoperation $@18 MTH_OR . $@19 expr

    $default  reduce using rule 93 ($@19)

    $@19  go to state 182


State 141

   98 logicoperation: logicfactor $@20 MTH_AND . $@21 logicoperation

    $default  reduce using rule 97 ($@21)

    $@21  go to state 183


State 142

  104 comparison: operation comp_operator $@23 . operation

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    operation     go to state 184
    factor        go to state 97
    hvalue        go to state 98
    value         go to state 99


State 143

  108 operation: factor $@24 MTH_PLUS . $@25 operation

    $default  reduce using rule 107 ($@25)

    $@25  go to state 185


State 144

  111 operation: factor $@26 MTH_MINUS . $@27 operation

    $default  reduce using rule 110 ($@27)

    $@27  go to state 186


State 145

  115 factor: hvalue $@28 MTH_ASTRK . $@29 factor

    $default  reduce using rule 114 ($@29)

    $@29  go to state 187


State 146

  118 factor: hvalue $@30 MTH_DIVIS . $@31 factor

    $default  reduce using rule 117 ($@31)

    $@31  go to state 188


State 147

  122 hvalue: value $@32 MTH_POWER . $@33 hvalue

    $default  reduce using rule 121 ($@33)

    $@33  go to state 189


State 148

  125 hvalue: value $@34 MTH_ROOT . $@35 hvalue

    $default  reduce using rule 124 ($@35)

    $@35  go to state 190


State 149

   78 arr: SYM_OBRAC arrHelper SYM_CBRAC .

    $default  reduce using rule 78 (arr)


State 150

   80 arrHelper: expr SYM_COMMA . $@16 arrHelper

    $default  reduce using rule 79 ($@16)

    $@16  go to state 191


State 151

   84 matHelper: arr . SYM_COMMA optlf matHelper
   85          | arr . optlf

    SYM_COMMA  shift, and go to state 192
    LF         shift, and go to state 2
    CR         shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 193


State 152

   83 mat: SYM_OBRAC optlf matHelper . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 194


State 153

   87 element: SYM_OCURL expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 195


State 154

   89 vector: SYM_OPARE expr SYM_COMMA expr . SYM_CPARE

    SYM_CPARE  shift, and go to state 196


State 155

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC . SYM_OBRAC V_INT SYM_CBRAC

    SYM_OBRAC  shift, and go to state 197


State 156

   47 funcall: V_ID . $@11 SYM_OPARE funcallHelper SYM_CPARE
   66 var_or_cte: V_ID .
   69 assign: V_ID . $@13 MTH_SEQUA expr
   74 structaccess: V_ID . $@14 SYM_OBRAC expr SYM_CBRAC $@15 structIndex
   91 property: V_ID . $@17 SYM_DOT V_ID

    SYM_OBRAC  reduce using rule 72 ($@14)
    SYM_OPARE  reduce using rule 46 ($@11)
    SYM_DOT    reduce using rule 90 ($@17)
    MTH_SEQUA  reduce using rule 68 ($@13)
    $default   reduce using rule 66 (var_or_cte)

    $@11  go to state 110
    $@13  go to state 198
    $@14  go to state 111
    $@17  go to state 112


State 157

  143 if: LOG_IF . $@37 ifHelper ifHelper3

    $default  reduce using rule 142 ($@37)

    $@37  go to state 199


State 158

  153 for: LOG_FOR . forHelper SYM_ARROW V_ID $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OBRAC  shift, and go to state 200
    V_ID       shift, and go to state 201

    forHelper  go to state 202
    stepfor    go to state 203


State 159

  159 while: LOG_WHILE . $@42 SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 157 ($@42)

    $@42  go to state 204


State 160

   44 stmt: RES_MEDIT .

    $default  reduce using rule 44 (stmt)


State 161

   54 ret: RES_RETRN . expr

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 205
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 162

   27 funbody: crlf . funbody

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 44
    V_VECTOR   shift, and go to state 45
    V_ELEM     shift, and go to state 46
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    $default  reduce using rule 22 (funbody)

    crlf            go to state 162
    funbody         go to state 206
    generaldec      go to state 164
    stmt            go to state 165
    funcall         go to state 87
    ret             go to state 166
    vardec          go to state 49
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    arrdec          go to state 50
    matdec          go to state 51
    elementdec      go to state 52
    vectordec       go to state 53
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174


State 163

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody . SYM_CCURL

    SYM_CCURL  shift, and go to state 207


State 164

   26 funbody: generaldec . crlf $@7 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 208


State 165

   24 funbody: stmt . crlf $@6 funbody

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 209


State 166

   45 stmt: ret .

    $default  reduce using rule 45 (stmt)


State 167

   41 stmt: assign .

    $default  reduce using rule 41 (stmt)


State 168

   70 assign: structaccess . MTH_SEQUA expr
  129 value: structaccess .

    MTH_SEQUA  shift, and go to state 210

    $default  reduce using rule 129 (value)


State 169

   71 assign: property . MTH_SEQUA expr
  130 value: property .

    MTH_SEQUA  shift, and go to state 211

    $default  reduce using rule 130 (value)


State 170

   42 stmt: expr .

    $default  reduce using rule 42 (stmt)


State 171

   43 stmt: logicstruct .

    $default  reduce using rule 43 (stmt)


State 172

  139 logicstruct: if .

    $default  reduce using rule 139 (logicstruct)


State 173

  140 logicstruct: for .

    $default  reduce using rule 140 (logicstruct)


State 174

  141 logicstruct: while .

    $default  reduce using rule 141 (logicstruct)


State 175

  132 value: SYM_OPARE $@36 expr SYM_CPARE .

    $default  reduce using rule 132 (value)


State 176

   89 vector: SYM_OPARE . expr SYM_COMMA expr SYM_CPARE
  132 value: SYM_OPARE . $@36 expr SYM_CPARE

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    SYM_OPARE  [reduce using rule 131 ($@36)]
    MTH_NOT    [reduce using rule 131 ($@36)]
    V_ID       [reduce using rule 131 ($@36)]
    V_CHAR     [reduce using rule 131 ($@36)]
    V_STRING   [reduce using rule 131 ($@36)]
    V_INT      [reduce using rule 131 ($@36)]
    V_DOUBLE   [reduce using rule 131 ($@36)]
    V_BOOL     [reduce using rule 131 ($@36)]

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 105
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    $@36            go to state 108


State 177

   47 funcall: V_ID $@11 SYM_OPARE funcallHelper . SYM_CPARE

    SYM_CPARE  shift, and go to state 212


State 178

   51 funcallHelper: vector . funcallHelper2

    SYM_COMMA  shift, and go to state 213

    $default  reduce using rule 52 (funcallHelper2)

    funcallHelper2  go to state 214


State 179

   50 funcallHelper: expr . $@12 funcallHelper2

    $default  reduce using rule 49 ($@12)

    $@12  go to state 215


State 180

   74 structaccess: V_ID $@14 SYM_OBRAC expr . SYM_CBRAC $@15 structIndex

    SYM_CBRAC  shift, and go to state 216


State 181

   91 property: V_ID $@17 SYM_DOT V_ID .

    $default  reduce using rule 91 (property)


State 182

   94 expr: logicoperation $@18 MTH_OR $@19 . expr

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 217
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 183

   98 logicoperation: logicfactor $@20 MTH_AND $@21 . logicoperation

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    logicoperation  go to state 218
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 184

  104 comparison: operation comp_operator $@23 operation .

    $default  reduce using rule 104 (comparison)


State 185

  108 operation: factor $@24 MTH_PLUS $@25 . operation

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    operation     go to state 219
    factor        go to state 97
    hvalue        go to state 98
    value         go to state 99


State 186

  111 operation: factor $@26 MTH_MINUS $@27 . operation

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    operation     go to state 220
    factor        go to state 97
    hvalue        go to state 98
    value         go to state 99


State 187

  115 factor: hvalue $@28 MTH_ASTRK $@29 . factor

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    factor        go to state 221
    hvalue        go to state 98
    value         go to state 99


State 188

  118 factor: hvalue $@30 MTH_DIVIS $@31 . factor

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    factor        go to state 222
    hvalue        go to state 98
    value         go to state 99


State 189

  122 hvalue: value $@32 MTH_POWER $@33 . hvalue

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    hvalue        go to state 223
    value         go to state 99


State 190

  125 hvalue: value $@34 MTH_ROOT $@35 . hvalue

    SYM_OPARE  shift, and go to state 79
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall       go to state 87
    basictypes    go to state 88
    var_or_cte    go to state 89
    structaccess  go to state 90
    property      go to state 91
    hvalue        go to state 224
    value         go to state 99


State 191

   80 arrHelper: expr SYM_COMMA $@16 . arrHelper

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    arrHelper       go to state 225
    property        go to state 91
    expr            go to state 129
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 192

   84 matHelper: arr SYM_COMMA . optlf matHelper

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 226


State 193

   85 matHelper: arr optlf .

    $default  reduce using rule 85 (matHelper)


State 194

   83 mat: SYM_OBRAC optlf matHelper SYM_CBRAC .

    $default  reduce using rule 83 (mat)


State 195

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 227
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 196

   89 vector: SYM_OPARE expr SYM_COMMA expr SYM_CPARE .

    $default  reduce using rule 89 (vector)


State 197

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC . V_INT SYM_CBRAC

    V_INT  shift, and go to state 228


State 198

   69 assign: V_ID $@13 . MTH_SEQUA expr

    MTH_SEQUA  shift, and go to state 229


State 199

  143 if: LOG_IF $@37 . ifHelper ifHelper3

    SYM_OPARE  shift, and go to state 230

    ifHelper  go to state 231


State 200

  156 stepfor: SYM_OBRAC . expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 232
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 201

  154 forHelper: V_ID .

    $default  reduce using rule 154 (forHelper)


State 202

  153 for: LOG_FOR forHelper . SYM_ARROW V_ID $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_ARROW  shift, and go to state 233


State 203

  155 forHelper: stepfor .

    $default  reduce using rule 155 (forHelper)


State 204

  159 while: LOG_WHILE $@42 . SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 234


State 205

   54 ret: RES_RETRN expr .

    $default  reduce using rule 54 (ret)


State 206

   27 funbody: crlf funbody .

    $default  reduce using rule 27 (funbody)


State 207

   17 function: RES_ORDER V_ID SYM_COLON vartypes SYM_OPARE $@4 funparams SYM_CPARE $@5 optlf SYM_OCURL crlf funbody SYM_CCURL .

    $default  reduce using rule 17 (function)


State 208

   26 funbody: generaldec crlf . $@7 funbody

    $default  reduce using rule 25 ($@7)

    $@7  go to state 235


State 209

   24 funbody: stmt crlf . $@6 funbody

    $default  reduce using rule 23 ($@6)

    $@6  go to state 236


State 210

   70 assign: structaccess MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 237
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 211

   71 assign: property MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 238
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 212

   47 funcall: V_ID $@11 SYM_OPARE funcallHelper SYM_CPARE .

    $default  reduce using rule 47 (funcall)


State 213

   53 funcallHelper2: SYM_COMMA . funcallHelper

    SYM_OPARE  shift, and go to state 176
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    $default  reduce using rule 48 (funcallHelper)

    funcall         go to state 87
    funcallHelper   go to state 239
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    vector          go to state 178
    property        go to state 91
    expr            go to state 179
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 214

   51 funcallHelper: vector funcallHelper2 .

    $default  reduce using rule 51 (funcallHelper)


State 215

   50 funcallHelper: expr $@12 . funcallHelper2

    SYM_COMMA  shift, and go to state 213

    $default  reduce using rule 52 (funcallHelper2)

    funcallHelper2  go to state 240


State 216

   74 structaccess: V_ID $@14 SYM_OBRAC expr SYM_CBRAC . $@15 structIndex

    $default  reduce using rule 73 ($@15)

    $@15  go to state 241


State 217

   94 expr: logicoperation $@18 MTH_OR $@19 expr .

    $default  reduce using rule 94 (expr)


State 218

   98 logicoperation: logicfactor $@20 MTH_AND $@21 logicoperation .

    $default  reduce using rule 98 (logicoperation)


State 219

  108 operation: factor $@24 MTH_PLUS $@25 operation .

    $default  reduce using rule 108 (operation)


State 220

  111 operation: factor $@26 MTH_MINUS $@27 operation .

    $default  reduce using rule 111 (operation)


State 221

  115 factor: hvalue $@28 MTH_ASTRK $@29 factor .

    $default  reduce using rule 115 (factor)


State 222

  118 factor: hvalue $@30 MTH_DIVIS $@31 factor .

    $default  reduce using rule 118 (factor)


State 223

  122 hvalue: value $@32 MTH_POWER $@33 hvalue .

    $default  reduce using rule 122 (hvalue)


State 224

  125 hvalue: value $@34 MTH_ROOT $@35 hvalue .

    $default  reduce using rule 125 (hvalue)


State 225

   80 arrHelper: expr SYM_COMMA $@16 arrHelper .

    $default  reduce using rule 80 (arrHelper)


State 226

   84 matHelper: arr SYM_COMMA optlf . matHelper

    SYM_OBRAC  shift, and go to state 100

    arr        go to state 151
    matHelper  go to state 242


State 227

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 243


State 228

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 244


State 229

   69 assign: V_ID $@13 MTH_SEQUA . expr

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 245
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 230

  145 ifHelper: SYM_OPARE . expr SYM_CPARE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 246
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 231

  143 if: LOG_IF $@37 ifHelper . ifHelper3

    LOG_ELSE  shift, and go to state 247

    $default  reduce using rule 149 (ifHelper3)

    ifHelper3  go to state 248


State 232

  156 stepfor: SYM_OBRAC expr . SYM_COMMA expr SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 249


State 233

  153 for: LOG_FOR forHelper SYM_ARROW . V_ID $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    V_ID  shift, and go to state 250


State 234

  159 while: LOG_WHILE $@42 SYM_OPARE . expr SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 251
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 235

   26 funbody: generaldec crlf $@7 . funbody

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 44
    V_VECTOR   shift, and go to state 45
    V_ELEM     shift, and go to state 46
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    $default  reduce using rule 22 (funbody)

    crlf            go to state 162
    funbody         go to state 252
    generaldec      go to state 164
    stmt            go to state 165
    funcall         go to state 87
    ret             go to state 166
    vardec          go to state 49
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    arrdec          go to state 50
    matdec          go to state 51
    elementdec      go to state 52
    vectordec       go to state 53
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174


State 236

   24 funbody: stmt crlf $@6 . funbody

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    LF         shift, and go to state 2
    CR         shift, and go to state 3
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_VAR      shift, and go to state 4
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    V_ARR      shift, and go to state 5
    V_MAT      shift, and go to state 44
    V_VECTOR   shift, and go to state 45
    V_ELEM     shift, and go to state 46
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    $default  reduce using rule 22 (funbody)

    crlf            go to state 162
    funbody         go to state 253
    generaldec      go to state 164
    stmt            go to state 165
    funcall         go to state 87
    ret             go to state 166
    vardec          go to state 49
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    arrdec          go to state 50
    matdec          go to state 51
    elementdec      go to state 52
    vectordec       go to state 53
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174


State 237

   70 assign: structaccess MTH_SEQUA expr .

    $default  reduce using rule 70 (assign)


State 238

   71 assign: property MTH_SEQUA expr .

    $default  reduce using rule 71 (assign)


State 239

   53 funcallHelper2: SYM_COMMA funcallHelper .

    $default  reduce using rule 53 (funcallHelper2)


State 240

   50 funcallHelper: expr $@12 funcallHelper2 .

    $default  reduce using rule 50 (funcallHelper)


State 241

   74 structaccess: V_ID $@14 SYM_OBRAC expr SYM_CBRAC $@15 . structIndex

    SYM_OBRAC  shift, and go to state 254

    $default  reduce using rule 75 (structIndex)

    structIndex  go to state 255


State 242

   84 matHelper: arr SYM_COMMA optlf matHelper .

    $default  reduce using rule 84 (matHelper)


State 243

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 256
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 244

   82 matdec: V_MAT V_ID SYM_COLON vartypes SYM_OBRAC V_INT SYM_CBRAC SYM_OBRAC V_INT SYM_CBRAC .

    $default  reduce using rule 82 (matdec)


State 245

   69 assign: V_ID $@13 MTH_SEQUA expr .

    $default  reduce using rule 69 (assign)


State 246

  145 ifHelper: SYM_OPARE expr . SYM_CPARE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_CPARE  shift, and go to state 257


State 247

  151 ifHelper3: LOG_ELSE . $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 150 ($@40)

    $@40  go to state 258


State 248

  143 if: LOG_IF $@37 ifHelper ifHelper3 .

    $default  reduce using rule 143 (if)


State 249

  156 stepfor: SYM_OBRAC expr SYM_COMMA . expr SYM_COMMA expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 259
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 250

  153 for: LOG_FOR forHelper SYM_ARROW V_ID . $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 152 ($@41)

    $@41  go to state 260


State 251

  159 while: LOG_WHILE $@42 SYM_OPARE expr . SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_CPARE  shift, and go to state 261


State 252

   26 funbody: generaldec crlf $@7 funbody .

    $default  reduce using rule 26 (funbody)


State 253

   24 funbody: stmt crlf $@6 funbody .

    $default  reduce using rule 24 (funbody)


State 254

   76 structIndex: SYM_OBRAC . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 262
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 255

   74 structaccess: V_ID $@14 SYM_OBRAC expr SYM_CBRAC $@15 structIndex .

    $default  reduce using rule 74 (structaccess)


State 256

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 263


State 257

  145 ifHelper: SYM_OPARE expr SYM_CPARE . $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    $default  reduce using rule 144 ($@38)

    $@38  go to state 264


State 258

  151 ifHelper3: LOG_ELSE $@40 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 265


State 259

  156 stepfor: SYM_OBRAC expr SYM_COMMA expr . SYM_COMMA expr SYM_CBRAC

    SYM_COMMA  shift, and go to state 266


State 260

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 267


State 261

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE . $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    $default  reduce using rule 158 ($@43)

    $@43  go to state 268


State 262

   76 structIndex: SYM_OBRAC expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 269


State 263

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 270
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 264

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 271


State 265

  151 ifHelper3: LOG_ELSE $@40 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 272


State 266

  156 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA . expr SYM_CBRAC

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 273
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 267

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 274


State 268

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 . optlf SYM_OCURL crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    $default  reduce using rule 13 (optlf)

    crlf   go to state 76
    optlf  go to state 275


State 269

   76 structIndex: SYM_OBRAC expr SYM_CBRAC .

    $default  reduce using rule 76 (structIndex)


State 270

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 276


State 271

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2

    SYM_OCURL  shift, and go to state 277


State 272

  151 ifHelper3: LOG_ELSE $@40 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 278


State 273

  156 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr . SYM_CBRAC

    SYM_CBRAC  shift, and go to state 279


State 274

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 280


State 275

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 optlf . SYM_OCURL crlf newlineCicle SYM_CCURL

    SYM_OCURL  shift, and go to state 281


State 276

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_COMMA expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 282
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 277

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL ifHelper2

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 283


State 278

  151 ifHelper3: LOG_ELSE $@40 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    stmt            go to state 284
    funcall         go to state 87
    ret             go to state 166
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174
    newlineCicle    go to state 285
    newline         go to state 286


State 279

  156 stepfor: SYM_OBRAC expr SYM_COMMA expr SYM_COMMA expr SYM_CBRAC .

    $default  reduce using rule 156 (stepfor)


State 280

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    stmt            go to state 284
    funcall         go to state 87
    ret             go to state 166
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174
    newlineCicle    go to state 287
    newline         go to state 286


State 281

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL . crlf newlineCicle SYM_CCURL

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 288


State 282

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_COMMA expr SYM_CCURL

    SYM_COMMA  shift, and go to state 289


State 283

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL ifHelper2

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    stmt            go to state 284
    funcall         go to state 87
    ret             go to state 166
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174
    newlineCicle    go to state 290
    newline         go to state 286


State 284

  162 newline: stmt . crlf

    LF  shift, and go to state 2
    CR  shift, and go to state 3

    crlf  go to state 291


State 285

  151 ifHelper3: LOG_ELSE $@40 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 292


State 286

  160 newlineCicle: newline .
  161             | newline . newlineCicle

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    $default  reduce using rule 160 (newlineCicle)

    stmt            go to state 284
    funcall         go to state 87
    ret             go to state 166
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174
    newlineCicle    go to state 293
    newline         go to state 286


State 287

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 294


State 288

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL crlf . newlineCicle SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 156
    LOG_IF     shift, and go to state 157
    LOG_FOR    shift, and go to state 158
    LOG_WHILE  shift, and go to state 159
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86
    RES_MEDIT  shift, and go to state 160
    RES_RETRN  shift, and go to state 161

    stmt            go to state 284
    funcall         go to state 87
    ret             go to state 166
    basictypes      go to state 88
    var_or_cte      go to state 89
    assign          go to state 167
    structaccess    go to state 168
    property        go to state 169
    expr            go to state 170
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99
    logicstruct     go to state 171
    if              go to state 172
    for             go to state 173
    while           go to state 174
    newlineCicle    go to state 295
    newline         go to state 286


State 289

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA . expr SYM_CCURL

    SYM_OPARE  shift, and go to state 79
    MTH_NOT    shift, and go to state 80
    V_ID       shift, and go to state 81
    V_CHAR     shift, and go to state 82
    V_STRING   shift, and go to state 83
    V_INT      shift, and go to state 84
    V_DOUBLE   shift, and go to state 85
    V_BOOL     shift, and go to state 86

    funcall         go to state 87
    basictypes      go to state 88
    var_or_cte      go to state 89
    structaccess    go to state 90
    property        go to state 91
    expr            go to state 296
    logicoperation  go to state 93
    logicfactor     go to state 94
    comparison      go to state 95
    operation       go to state 96
    factor          go to state 97
    hvalue          go to state 98
    value           go to state 99


State 290

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL ifHelper2

    SYM_CCURL  shift, and go to state 297


State 291

  162 newline: stmt crlf .

    $default  reduce using rule 162 (newline)


State 292

  151 ifHelper3: LOG_ELSE $@40 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 151 (ifHelper3)


State 293

  161 newlineCicle: newline newlineCicle .

    $default  reduce using rule 161 (newlineCicle)


State 294

  153 for: LOG_FOR forHelper SYM_ARROW V_ID $@41 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 153 (for)


State 295

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle . SYM_CCURL

    SYM_CCURL  shift, and go to state 298


State 296

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr . SYM_CCURL

    SYM_CCURL  shift, and go to state 299


State 297

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL . ifHelper2

    LOG_ELIF  shift, and go to state 300

    $default  reduce using rule 146 (ifHelper2)

    ifHelper2  go to state 301


State 298

  159 while: LOG_WHILE $@42 SYM_OPARE expr SYM_CPARE $@43 optlf SYM_OCURL crlf newlineCicle SYM_CCURL .

    $default  reduce using rule 159 (while)


State 299

   87 element: SYM_OCURL expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_COMMA expr SYM_CCURL .

    $default  reduce using rule 87 (element)


State 300

  148 ifHelper2: LOG_ELIF . $@39 ifHelper

    $default  reduce using rule 147 ($@39)

    $@39  go to state 302


State 301

  145 ifHelper: SYM_OPARE expr SYM_CPARE $@38 optlf SYM_OCURL crlf newlineCicle SYM_CCURL ifHelper2 .

    $default  reduce using rule 145 (ifHelper)


State 302

  148 ifHelper2: LOG_ELIF $@39 . ifHelper

    SYM_OPARE  shift, and go to state 230

    ifHelper  go to state 303


State 303

  148 ifHelper2: LOG_ELIF $@39 ifHelper .

    $default  reduce using rule 148 (ifHelper2)
